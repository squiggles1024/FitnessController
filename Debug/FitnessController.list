
FitnessController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a48c  0800a48c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a494  0800a494  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a494  0800a494  0001a494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800a49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  200000d8  0800a574  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  0800a574  00020aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021594  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005125  00000000  00000000  0004169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000467c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000481c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fb8d  00000000  00000000  00049930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024cf1  00000000  00000000  000794bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bf21  00000000  00000000  0009e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa0cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fbc  00000000  00000000  001aa120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc8 	.word	0x08009dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08009dc8 	.word	0x08009dc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HCI_TL_SPI_Init+0x88>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <HCI_TL_SPI_Init+0x8c>)
 80005ba:	f004 f903 	bl	80047c4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f004 f8f3 	bl	80047c4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <HCI_TL_SPI_Init+0x90>)
 80005f8:	f004 f8e4 	bl	80047c4 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80005fc:	f001 ffa2 	bl	8002544 <BSP_SPI3_Init>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000
 8000614:	48000c00 	.word	0x48000c00

08000618 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HCI_TL_SPI_DeInit+0x28>)
 8000620:	f004 fa7a 	bl	8004b18 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HCI_TL_SPI_DeInit+0x2c>)
 800062a:	f004 fa75 	bl	8004b18 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f004 fa6f 	bl	8004b18 <HAL_GPIO_DeInit>
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48001000 	.word	0x48001000
 8000644:	48000c00 	.word	0x48000c00

08000648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <HCI_TL_SPI_Reset+0x40>)
 8000654:	f004 fb6c 	bl	8004d30 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f004 fb65 	bl	8004d30 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000666:	2005      	movs	r0, #5
 8000668:	f002 f8d2 	bl	8002810 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f004 fb5b 	bl	8004d30 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f002 f8c8 	bl	8002810 <HAL_Delay>
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000c00 	.word	0x48000c00

0800068c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800069c:	23ff      	movs	r3, #255	; 0xff
 800069e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <HCI_TL_SPI_Receive+0xb0>)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4822      	ldr	r0, [pc, #136]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 80006b8:	f004 fb3a 	bl	8004d30 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2205      	movs	r2, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ff6c 	bl	80025a4 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d129      	bne.n	8000726 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d2:	7c3b      	ldrb	r3, [r7, #16]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006e2:	8bfb      	ldrh	r3, [r7, #30]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01e      	beq.n	8000726 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006e8:	8bfa      	ldrh	r2, [r7, #30]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d901      	bls.n	80006f4 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	777b      	strb	r3, [r7, #29]
 80006f8:	e010      	b.n	800071c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006fa:	f107 011b 	add.w	r1, r7, #27
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2201      	movs	r2, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff4d 	bl	80025a4 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800070a:	7f7b      	ldrb	r3, [r7, #29]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	7efa      	ldrb	r2, [r7, #27]
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	3301      	adds	r3, #1
 800071a:	777b      	strb	r3, [r7, #29]
 800071c:	7f7b      	ldrb	r3, [r7, #29]
 800071e:	b29b      	uxth	r3, r3
 8000720:	8bfa      	ldrh	r2, [r7, #30]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8e9      	bhi.n	80006fa <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 800072e:	f004 faff 	bl	8004d30 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000732:	7f7b      	ldrb	r3, [r7, #29]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08009de0 	.word	0x08009de0
 8000740:	48000c00 	.word	0x48000c00

08000744 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <HCI_TL_SPI_Send+0xa0>)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	3304      	adds	r3, #4
 800075e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000760:	f002 f84a 	bl	80027f8 <HAL_GetTick>
 8000764:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 8000772:	f004 fadd 	bl	8004d30 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2205      	movs	r2, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ff0f 	bl	80025a4 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8000786:	7a3b      	ldrb	r3, [r7, #8]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d10f      	bne.n	80007ac <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	b29b      	uxth	r3, r3
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d806      	bhi.n	80007a4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	461a      	mov	r2, r3
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <HCI_TL_SPI_Send+0xa8>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f001 ff01 	bl	80025a4 <BSP_SPI3_SendRecv>
 80007a2:	e006      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80007a4:	f06f 0301 	mvn.w	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e002      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 80007ba:	f004 fab9 	bl	8004d30 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007be:	f002 f81b 	bl	80027f8 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d903      	bls.n	80007d4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007cc:	f06f 0302 	mvn.w	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
      break;
 80007d2:	e002      	b.n	80007da <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dbc5      	blt.n	8000766 <HCI_TL_SPI_Send+0x22>

  return result;
 80007da:	69fb      	ldr	r3, [r7, #28]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08009de8 	.word	0x08009de8
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	200000fc 	.word	0x200000fc

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f004 fa82 	bl	8004d00 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48001000 	.word	0x48001000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <hci_tl_lowlevel_init+0x50>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f007 ffb9 	bl	80087a8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000836:	4910      	ldr	r1, [pc, #64]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083a:	f003 ff7e 	bl	800473a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000840:	2100      	movs	r1, #0
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000844:	f003 ff5f 	bl	8004706 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f003 fcd2 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f003 fceb 	bl	800422e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08000585 	.word	0x08000585
 8000864:	08000619 	.word	0x08000619
 8000868:	08000745 	.word	0x08000745
 800086c:	0800068d 	.word	0x0800068d
 8000870:	08000649 	.word	0x08000649
 8000874:	080025e5 	.word	0x080025e5
 8000878:	16000006 	.word	0x16000006
 800087c:	200000f4 	.word	0x200000f4
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f008 f8f2 	bl	8008a74 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <AddBatteryService>:
static BatteryServiceStatus_t InitBatteryValue(void);
static BatteryServiceStatus_t UpdateBatteryValue(void);
static uint8_t GetBatteryValue(void);


BatteryServiceStatus_t AddBatteryService(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
	tBleStatus status;
	BatteryServiceStatus_t ret;
	uint16_t uuid = BATTERY_SERVICE_UUID;
 80008ae:	f641 030f 	movw	r3, #6159	; 0x180f
 80008b2:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 7, &BatteryServiceHandle);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AddBatteryService+0x60>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2307      	movs	r3, #7
 80008bc:	2201      	movs	r2, #1
 80008be:	2001      	movs	r0, #1
 80008c0:	f007 f91f 	bl	8007b02 <aci_gatt_add_serv>
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <AddBatteryService+0x30>
		printf("Adding BATTERY Service Failed\n\r");
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <AddBatteryService+0x64>)
 80008d0:	f008 fa76 	bl	8008dc0 <iprintf>
		return Battery_AddServiceErr;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e012      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = AddBatteryCharacteristics();
 80008d8:	f000 f81a 	bl	8000910 <AddBatteryCharacteristics>
 80008dc:	4603      	mov	r3, r0
 80008de:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d001      	beq.n	80008ea <AddBatteryService+0x42>
		return ret;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	e009      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = InitBatteryValue();
 80008ea:	f000 f861 	bl	80009b0 <InitBatteryValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d001      	beq.n	80008fc <AddBatteryService+0x54>
		return ret;
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	e000      	b.n	80008fe <AddBatteryService+0x56>
	}
    return Battery_OK;
 80008fc:	2303      	movs	r3, #3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001fc 	.word	0x200001fc
 800090c:	08009e18 	.word	0x08009e18

08000910 <AddBatteryCharacteristics>:

uint16_t GetBatteryServiceHandle(void){
	return BatteryServiceHandle;
}

static BatteryServiceStatus_t AddBatteryCharacteristics(void){
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e034      	b.n	8000986 <AddBatteryCharacteristics+0x76>
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <AddBatteryCharacteristics+0x88>)
 800091e:	8818      	ldrh	r0, [r3, #0]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <AddBatteryCharacteristics+0x8c>)
 8000924:	5cd1      	ldrb	r1, [r2, r3]
        		                   BatteryCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&BatteryCharUUIDLookUpTable[i],  //UUID Value
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <AddBatteryCharacteristics+0x90>)
 800092c:	189c      	adds	r4, r3, r2
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800092e:	f04f 0c01 	mov.w	ip, #1
								   BatteryCharLengthLookUpTable[i],                 //Char Value Length
				                   BatteryCharPropertiesLookUpTable[i],             //Char Properties
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <AddBatteryCharacteristics+0x94>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800093a:	b2db      	uxtb	r3, r3
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2500      	movs	r5, #0
 8000940:	2600      	movs	r6, #0
				                   BatteryCharSecPermissionsLookUpTable[i],         //Char SecPermissions
								   BatteryCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                              //Encyption Key Size
				                   0,                                               //Does the value field have variable length? 1= yes, 0 = no
				                   &BatteryCharHandleLookUpTable[i]);               //BATTERY Char Handle Address
 8000942:	7bfa      	ldrb	r2, [r7, #15]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <AddBatteryCharacteristics+0x98>)
 8000948:	441a      	add	r2, r3
 800094a:	9205      	str	r2, [sp, #20]
 800094c:	2200      	movs	r2, #0
 800094e:	9204      	str	r2, [sp, #16]
 8000950:	2210      	movs	r2, #16
 8000952:	9203      	str	r2, [sp, #12]
 8000954:	9602      	str	r6, [sp, #8]
 8000956:	9501      	str	r5, [sp, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4663      	mov	r3, ip
 800095e:	4622      	mov	r2, r4
 8000960:	f007 f958 	bl	8007c14 <aci_gatt_add_char>
 8000964:	4603      	mov	r3, r0
 8000966:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <AddBatteryCharacteristics+0x70>
        	printf(BatteryCharErrorStringLookUpTable[i]);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <AddBatteryCharacteristics+0x9c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	4618      	mov	r0, r3
 8000978:	f008 fa22 	bl	8008dc0 <iprintf>
        	return BatteryCharErrorReturnLookUpTable[i];
 800097c:	2300      	movs	r3, #0
 800097e:	e006      	b.n	800098e <AddBatteryCharacteristics+0x7e>
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0c7      	beq.n	800091c <AddBatteryCharacteristics+0xc>
        }
    }

    return Battery_OK;
 800098c:	2303      	movs	r3, #3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	bf00      	nop
 8000998:	200001fc 	.word	0x200001fc
 800099c:	20000000 	.word	0x20000000
 80009a0:	0800a1d4 	.word	0x0800a1d4
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000200 	.word	0x20000200
 80009ac:	20000008 	.word	0x20000008

080009b0 <InitBatteryValue>:

static BatteryServiceStatus_t InitBatteryValue(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	BatteryServiceStatus_t ret;
	ret = UpdateBatteryValue();
 80009b6:	f000 f807 	bl	80009c8 <UpdateBatteryValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	return ret;
 80009be:	79fb      	ldrb	r3, [r7, #7]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <UpdateBatteryValue>:

static BatteryServiceStatus_t UpdateBatteryValue(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
    tBleStatus status;
    uint8_t reg = GetBatteryValue();
 80009ce:	f000 f821 	bl	8000a14 <GetBatteryValue>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71bb      	strb	r3, [r7, #6]
    status = aci_gatt_update_char_value(BatteryServiceHandle, BatteryCharHandleLookUpTable[BATTERY_LEVEL_INDEX], 0, 1, &reg);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <UpdateBatteryValue+0x40>)
 80009d8:	8818      	ldrh	r0, [r3, #0]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <UpdateBatteryValue+0x44>)
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2200      	movs	r2, #0
 80009e6:	f007 fb28 	bl	800803a <aci_gatt_update_char_value>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

    if(status != BLE_STATUS_SUCCESS){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <UpdateBatteryValue+0x36>
    	printf("Update Battery Level char failed\n\r");
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <UpdateBatteryValue+0x48>)
 80009f6:	f008 f9e3 	bl	8008dc0 <iprintf>
    	return Battery_UpdateCharErr;
 80009fa:	2302      	movs	r3, #2
 80009fc:	e000      	b.n	8000a00 <UpdateBatteryValue+0x38>
    }

    return Battery_OK;
 80009fe:	2303      	movs	r3, #3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001fc 	.word	0x200001fc
 8000a0c:	20000200 	.word	0x20000200
 8000a10:	08009e38 	.word	0x08009e38

08000a14 <GetBatteryValue>:

static uint8_t GetBatteryValue(void){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return 100;
 8000a18:	2364      	movs	r3, #100	; 0x64
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <AnalogStickInit>:
 *@Params: Init struct with desired user settings, AnalogStick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: AnalogStick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void AnalogStickInit(AnalogStick_Handle_t *AnalogStick, AnalogStick_IO_Drv_t IO){
 8000a24:	b084      	sub	sp, #16
 8000a26:	b5b0      	push	{r4, r5, r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	f107 001c 	add.w	r0, r7, #28
 8000a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	AnalogStick->IO_Driver = IO;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	1d1c      	adds	r4, r3, #4
 8000a3a:	f107 051c 	add.w	r5, r7, #28
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	6023      	str	r3, [r4, #0]
	AnalogStick->IO_Driver.init();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4798      	blx	r3
	AnalogStick->X_Position = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
	AnalogStick->Y_Position = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	805a      	strh	r2, [r3, #2]
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a62:	b004      	add	sp, #16
 8000a64:	4770      	bx	lr

08000a66 <AnalogStickRead>:
 *@Params: AnalogStick Handle
 *@Return: AnalogStickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: AnalogStickHandle must be initialized
 *@Postcondition: AnalogStick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
AnalogStickStatus_t AnalogStickRead(AnalogStick_Handle_t *AnalogStick){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	int16_t PreviousX = AnalogStick->X_Position;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	81fb      	strh	r3, [r7, #14]
	int16_t PreviousY = AnalogStick->Y_Position;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	81bb      	strh	r3, [r7, #12]
	AnalogStick->IO_Driver.read(&(AnalogStick->X_Position), &(AnalogStick->Y_Position));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	3202      	adds	r2, #2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4798      	blx	r3
    if((AnalogStick->X_Position == 0 && PreviousX == 0) && (AnalogStick->Y_Position == 0 && PreviousY == 0)){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10e      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d105      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <AnalogStickRead+0x4a>
        return AnalogStickUnchanged;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <AnalogStickRead+0x4c>
	}
    return AnalogStickChanged;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <AnalogStickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void AnalogStickIOInit(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10d      	bne.n	8000ae4 <AnalogStickIOInit+0x28>
	    ADC_GPIO_Init();
 8000ac8:	f001 fabe 	bl	8002048 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000acc:	f001 f950 	bl	8001d70 <ADC_DMA_Init>
	    ADC1_Init();
 8000ad0:	f001 f886 	bl	8001be0 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	4905      	ldr	r1, [pc, #20]	; (8000aec <AnalogStickIOInit+0x30>)
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <AnalogStickIOInit+0x34>)
 8000ada:	f002 fa37 	bl	8002f4c <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000478 	.word	0x20000478
 8000aec:	2000046c 	.word	0x2000046c
 8000af0:	200003c0 	.word	0x200003c0

08000af4 <AnalogStickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from AnalogStick will be stopped.
 **************************************//**************************************/
static void AnalogStickIODeInit(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <AnalogStickIODeInit+0x1c>)
 8000afa:	f002 fae3 	bl	80030c4 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000afe:	200b      	movs	r0, #11
 8000b00:	f003 fba3 	bl	800424a <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f003 fbba 	bl	800427e <HAL_NVIC_ClearPendingIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200003c0 	.word	0x200003c0

08000b14 <AnalogStickIORead1>:
 *@Params: AnalogStick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the AnalogStick
 *@Precondition: AnalogStick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw AnalogStick value.
 **************************************//**************************************/
static void AnalogStickIORead1(int16_t *X_Pos, int16_t *Y_Pos){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_LX_INDEX] << 4) - 32767;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <AnalogStickIORead1+0x4c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b2c:	3b7f      	subs	r3, #127	; 0x7f
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*X_Pos = Convert;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	89fa      	ldrh	r2, [r7, #14]
 8000b36:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_LY_INDEX] << 4) - 32767;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <AnalogStickIORead1+0x4c>)
 8000b3a:	885b      	ldrh	r3, [r3, #2]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b46:	3b7f      	subs	r3, #127	; 0x7f
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*Y_Pos = Convert;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	89fa      	ldrh	r2, [r7, #14]
 8000b50:	801a      	strh	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000046c 	.word	0x2000046c

08000b64 <AnalogStickIORead2>:

static void AnalogStickIORead2(int16_t *X_Pos, int16_t *Y_Pos){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_RX_INDEX] << 4) - 32767;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <AnalogStickIORead2+0x4c>)
 8000b70:	889b      	ldrh	r3, [r3, #4]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b7c:	3b7f      	subs	r3, #127	; 0x7f
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*X_Pos = Convert;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_RY_INDEX] << 4) - 32767;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <AnalogStickIORead2+0x4c>)
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b96:	3b7f      	subs	r3, #127	; 0x7f
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*Y_Pos = Convert;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	89fa      	ldrh	r2, [r7, #14]
 8000ba0:	801a      	strh	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000046c 	.word	0x2000046c

08000bb4 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(ButtonIDNumber_t ButtonID, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	b5b0      	push	{r4, r5, r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	f107 0118 	add.w	r1, r7, #24
 8000bc2:	e881 000c 	stmia.w	r1, {r2, r3}
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	Button->IO_Driver   = IO;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	1d1c      	adds	r4, r3, #4
 8000bce:	f107 0518 	add.w	r5, r7, #24
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	6023      	str	r3, [r4, #0]
	Button->IO_Driver.init();
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4798      	blx	r3
	Button->ButtonIDNumber = ButtonID;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	701a      	strb	r2, [r3, #0]
	Button->State = ButtonUnpressed;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2200      	movs	r2, #0
 8000bea:	705a      	strb	r2, [r3, #1]
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr

08000bfa <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	4610      	mov	r0, r2
 8000c12:	4798      	blx	r3
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	705a      	strb	r2, [r3, #1]
    if(Previous_State != Button->State){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d001      	beq.n	8000c2a <ButtonRead+0x30>
    	return ButtonChanged;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8000c2a:	2301      	movs	r3, #1
    }
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO Peripheral and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Uninitialized){
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Button_IO_init+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <Button_IO_init+0x16>
		Button_GPIO_Init();
 8000c40:	f001 f970 	bl	8001f24 <Button_GPIO_Init>
	    initialize_status = ButtonIO_Initialized;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <Button_IO_init+0x1c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000202 	.word	0x20000202

08000c54 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <Button_IO_deinit+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d102      	bne.n	8000c66 <Button_IO_deinit+0x12>
	    //de init GPIO. implement later.
	    initialize_status = ButtonIO_Uninitialized;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <Button_IO_deinit+0x1c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	}
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000202 	.word	0x20000202

08000c74 <Button_IO_ReadPosLogic>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_ReadPosLogic(uint8_t ButtonNumber){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <Button_IO_ReadPosLogic+0x3c>)
 8000c82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <Button_IO_ReadPosLogic+0x3c>)
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	889b      	ldrh	r3, [r3, #4]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4610      	mov	r0, r2
 8000c94:	f004 f834 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <Button_IO_ReadPosLogic+0x32>
		return ButtonPressed;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <Button_IO_ReadPosLogic+0x34>
	} else {
		return ButtonUnpressed;
 8000ca6:	2300      	movs	r3, #0
	}
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0800a200 	.word	0x0800a200

08000cb4 <Button_IO_ReadNegLogic>:

static ButtonState_t Button_IO_ReadNegLogic(uint8_t ButtonNumber){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <Button_IO_ReadNegLogic+0x3c>)
 8000cc2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <Button_IO_ReadNegLogic+0x3c>)
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f004 f814 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <Button_IO_ReadNegLogic+0x32>
		return ButtonUnpressed;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <Button_IO_ReadNegLogic+0x34>
	} else {
		return ButtonPressed;
 8000ce6:	2301      	movs	r3, #1
	}
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	0800a200 	.word	0x0800a200

08000cf4 <DpadInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Dpad handle will be initialized and ready to use
 **************************************//**************************************/
void DpadInit(DpadIDNumber_t DpadID, Dpad_Handle_t *Dpad, HatSwitch_IO_Drv_t IO){
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	b5b0      	push	{r4, r5, r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	f107 0118 	add.w	r1, r7, #24
 8000d02:	e881 000c 	stmia.w	r1, {r2, r3}
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	Dpad->IO_Driver   = IO;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	1d1c      	adds	r4, r3, #4
 8000d0e:	f107 0518 	add.w	r5, r7, #24
 8000d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	6023      	str	r3, [r4, #0]
	Dpad->IO_Driver.init();
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4798      	blx	r3
	Dpad->DpadIDNumber = DpadID;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	701a      	strb	r2, [r3, #0]
	Dpad->State = HatNeutral;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	705a      	strb	r2, [r3, #1]
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000d36:	b002      	add	sp, #8
 8000d38:	4770      	bx	lr

08000d3a <DpadRead>:
 *@Params: Dpad handle to read
 *@Return: DpadChanged if the Dpad changed states, otherwise DpadUnchanged
 *@Precondition: DpadHandle should be initialized/
 *@Postcondition: DpadState in the DpadHandle will be updated.
 **************************************//**************************************/
DpadStatus_t DpadRead(Dpad_Handle_t *Dpad){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
    HatSwitchState_t Previous_State = Dpad->State;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	73fb      	strb	r3, [r7, #15]
    Dpad->State = Dpad->IO_Driver.read(Dpad->DpadIDNumber);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	4610      	mov	r0, r2
 8000d52:	4798      	blx	r3
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	705a      	strb	r2, [r3, #1]
    if(Previous_State != Dpad->State){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d001      	beq.n	8000d6a <DpadRead+0x30>
    	return DpadChanged;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <DpadRead+0x32>
    } else {
    	return DpadUnchanged;
 8000d6a:	2301      	movs	r3, #1
    }
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HatSwitch_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO Peripheral and clocks will be enabled and ready to use
 **************************************//**************************************/
static void HatSwitch_IO_init(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

	if(initialize_status == HatSwitchIO_Uninitialized){
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HatSwitch_IO_init+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <HatSwitch_IO_init+0x16>
		Button_GPIO_Init();
 8000d80:	f001 f8d0 	bl	8001f24 <Button_GPIO_Init>
	    initialize_status = HatSwitchIO_Initialized;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HatSwitch_IO_init+0x1c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000203 	.word	0x20000203

08000d94 <HatSwitch_IO_deinit>:

static void HatSwitch_IO_deinit(void){
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

	if(initialize_status == HatSwitchIO_Initialized){
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HatSwitch_IO_deinit+0x1c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d102      	bne.n	8000da6 <HatSwitch_IO_deinit+0x12>
	    //de init GPIO. implement later.
	    initialize_status = HatSwitchIO_Uninitialized;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HatSwitch_IO_deinit+0x1c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	}
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000203 	.word	0x20000203

08000db4 <HatSwitch_IO_Read>:
 *@Params: Number of the HatSwitch to read
 *@Return: HatSwitchUnpressed if the HatSwitch is not pressed, HatSwitchPressed if it is pressed.
 *@Precondition: HatSwitch IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static HatSwitchState_t HatSwitch_IO_Read(uint8_t HatSwitchNumber){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState UpState = HAL_GPIO_ReadPin(XINPUT_GAMEPAD_DPAD_UP_GPIO_Port, XINPUT_GAMEPAD_DPAD_UP_Pin);
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f003 ff9c 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState DownState = HAL_GPIO_ReadPin(XINPUT_GAMEPAD_DPAD_DOWN_GPIO_Port, XINPUT_GAMEPAD_DPAD_DOWN_Pin);
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f003 ff95 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState LeftState = HAL_GPIO_ReadPin(XINPUT_GAMEPAD_DPAD_LEFT_GPIO_Port, XINPUT_GAMEPAD_DPAD_LEFT_Pin);
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f003 ff8e 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	737b      	strb	r3, [r7, #13]
	GPIO_PinState RightState = HAL_GPIO_ReadPin(XINPUT_GAMEPAD_DPAD_RIGHT_GPIO_Port, XINPUT_GAMEPAD_DPAD_RIGHT_Pin);
 8000de8:	2120      	movs	r1, #32
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f003 ff87 	bl	8004d00 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	733b      	strb	r3, [r7, #12]

    if(UpState && !DownState && !LeftState && !RightState){       //Up
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00a      	beq.n	8000e12 <HatSwitch_IO_Read+0x5e>
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d107      	bne.n	8000e12 <HatSwitch_IO_Read+0x5e>
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d104      	bne.n	8000e12 <HatSwitch_IO_Read+0x5e>
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HatSwitch_IO_Read+0x5e>
		return HatUp;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e062      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(UpState && !DownState && !LeftState && RightState){  //UpRight
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00a      	beq.n	8000e2e <HatSwitch_IO_Read+0x7a>
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d107      	bne.n	8000e2e <HatSwitch_IO_Read+0x7a>
 8000e1e:	7b7b      	ldrb	r3, [r7, #13]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <HatSwitch_IO_Read+0x7a>
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HatSwitch_IO_Read+0x7a>
		return HatUpRight;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e054      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(!UpState && !DownState && !LeftState && RightState){ //Right
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10a      	bne.n	8000e4a <HatSwitch_IO_Read+0x96>
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <HatSwitch_IO_Read+0x96>
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <HatSwitch_IO_Read+0x96>
 8000e40:	7b3b      	ldrb	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HatSwitch_IO_Read+0x96>
		return HatRight;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e046      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(!UpState && DownState && !LeftState && RightState){  //DownRight
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10a      	bne.n	8000e66 <HatSwitch_IO_Read+0xb2>
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <HatSwitch_IO_Read+0xb2>
 8000e56:	7b7b      	ldrb	r3, [r7, #13]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <HatSwitch_IO_Read+0xb2>
 8000e5c:	7b3b      	ldrb	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HatSwitch_IO_Read+0xb2>
		return HatDownRight;
 8000e62:	2304      	movs	r3, #4
 8000e64:	e038      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(!UpState && DownState && !LeftState && !RightState){ //Down
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10a      	bne.n	8000e82 <HatSwitch_IO_Read+0xce>
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <HatSwitch_IO_Read+0xce>
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <HatSwitch_IO_Read+0xce>
 8000e78:	7b3b      	ldrb	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HatSwitch_IO_Read+0xce>
		return HatDown;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e02a      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(!UpState && DownState && LeftState && !RightState){  //DownLeft
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10a      	bne.n	8000e9e <HatSwitch_IO_Read+0xea>
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HatSwitch_IO_Read+0xea>
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <HatSwitch_IO_Read+0xea>
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HatSwitch_IO_Read+0xea>
		return HatDownLeft;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e01c      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(!UpState && !DownState && LeftState && !RightState){ //Left
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HatSwitch_IO_Read+0x106>
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <HatSwitch_IO_Read+0x106>
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HatSwitch_IO_Read+0x106>
 8000eb0:	7b3b      	ldrb	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HatSwitch_IO_Read+0x106>
		return HatLeft;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00e      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else if(UpState && !DownState && LeftState && !RightState){ //UpLeft
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00a      	beq.n	8000ed6 <HatSwitch_IO_Read+0x122>
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d107      	bne.n	8000ed6 <HatSwitch_IO_Read+0x122>
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <HatSwitch_IO_Read+0x122>
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HatSwitch_IO_Read+0x122>
		return HatUpLeft;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e000      	b.n	8000ed8 <HatSwitch_IO_Read+0x124>
	}else{
		return HatNeutral;
 8000ed6:	2300      	movs	r3, #0
	}

}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <TriggerInit>:
 *@Params: Init struct with desired user settings, Trigger handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Trigger handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void TriggerInit(Trigger_Handle_t *Trigger, Trigger_IO_Drv_t IO){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	b5b0      	push	{r4, r5, r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	f107 001c 	add.w	r0, r7, #28
 8000eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Trigger->IO_Driver = IO;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1d1c      	adds	r4, r3, #4
 8000ef6:	f107 051c 	add.w	r5, r7, #28
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	6023      	str	r3, [r4, #0]
	Trigger->IO_Driver.init();
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4798      	blx	r3
	Trigger->Position = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr

08000f1c <TriggerRead>:
 *@Params: Trigger Handle
 *@Return: TriggerChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: TriggerHandle must be initialized
 *@Postcondition: Trigger XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
TriggerStatus_t TriggerRead(Trigger_Handle_t *Trigger){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint8_t Previous = Trigger->Position;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	73fb      	strb	r3, [r7, #15]
	Trigger->IO_Driver.read(&(Trigger->Position));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4610      	mov	r0, r2
 8000f32:	4798      	blx	r3
    if((Trigger->Position == 0 && Previous == 0)){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <TriggerRead+0x2a>
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <TriggerRead+0x2a>
        return TriggerUnchanged;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <TriggerRead+0x2c>
	}
    return TriggerChanged;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <TriggerIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void TriggerIOInit(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <TriggerIOInit+0x2c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10d      	bne.n	8000f78 <TriggerIOInit+0x28>
	    ADC_GPIO_Init();
 8000f5c:	f001 f874 	bl	8002048 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000f60:	f000 ff06 	bl	8001d70 <ADC_DMA_Init>
	    ADC1_Init();
 8000f64:	f000 fe3c 	bl	8001be0 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000f68:	220c      	movs	r2, #12
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <TriggerIOInit+0x30>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <TriggerIOInit+0x34>)
 8000f6e:	f001 ffed 	bl	8002f4c <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000f72:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <TriggerIOInit+0x2c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000478 	.word	0x20000478
 8000f80:	2000046c 	.word	0x2000046c
 8000f84:	200003c0 	.word	0x200003c0

08000f88 <TriggerIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Trigger will be stopped.
 **************************************//**************************************/
static void TriggerIODeInit(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <TriggerIODeInit+0x1c>)
 8000f8e:	f002 f899 	bl	80030c4 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000f92:	200b      	movs	r0, #11
 8000f94:	f003 f959 	bl	800424a <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000f98:	200b      	movs	r0, #11
 8000f9a:	f003 f970 	bl	800427e <HAL_NVIC_ClearPendingIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003c0 	.word	0x200003c0

08000fa8 <TriggerIORead1>:
 *@Params: Trigger Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the Trigger
 *@Precondition: Trigger IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw Trigger value.
 **************************************//**************************************/
static void TriggerIORead1(uint8_t *Pos){
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
    uint16_t Value = adc_buffer[ADC_LT_INDEX];
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <TriggerIORead1+0x44>)
 8000fb2:	891b      	ldrh	r3, [r3, #8]
 8000fb4:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	f640 1298 	movw	r2, #2456	; 0x998
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d802      	bhi.n	8000fc6 <TriggerIORead1+0x1e>
		Convert = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <TriggerIORead1+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b19      	cmp	r3, #25
 8000fd4:	d801      	bhi.n	8000fda <TriggerIORead1+0x32>
		Convert = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2000046c 	.word	0x2000046c

08000ff0 <TriggerIORead2>:

static void TriggerIORead2(uint8_t *Pos){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
	uint16_t Value = adc_buffer[ADC_RT_INDEX];
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <TriggerIORead2+0x44>)
 8000ffa:	895b      	ldrh	r3, [r3, #10]
 8000ffc:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000ffe:	89bb      	ldrh	r3, [r7, #12]
 8001000:	f640 1298 	movw	r2, #2456	; 0x998
 8001004:	4293      	cmp	r3, r2
 8001006:	d802      	bhi.n	800100e <TriggerIORead2+0x1e>
		Convert = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e004      	b.n	8001018 <TriggerIORead2+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b19      	cmp	r3, #25
 800101c:	d801      	bhi.n	8001022 <TriggerIORead2+0x32>
		Convert = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	701a      	strb	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	2000046c 	.word	0x2000046c

08001038 <AddDeviceInfoService>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void);


DeviceInfoServiceStatus_t AddDeviceInfoService(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
	tBleStatus status;
	DeviceInfoServiceStatus_t ret;
	uint16_t uuid = DEVICEINFO_SERVICE_UUID;
 800103e:	f641 030a 	movw	r3, #6154	; 0x180a
 8001042:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &DeviceInfoServiceHandle);
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <AddDeviceInfoService+0x44>)
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2310      	movs	r3, #16
 800104c:	2201      	movs	r2, #1
 800104e:	2001      	movs	r0, #1
 8001050:	f006 fd57 	bl	8007b02 <aci_gatt_add_serv>
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <AddDeviceInfoService+0x30>
		printf("Adding Device Info Service Failed\n\r");
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <AddDeviceInfoService+0x48>)
 8001060:	f007 feae 	bl	8008dc0 <iprintf>
		return DeviceInfo_AddServiceErr;
 8001064:	2301      	movs	r3, #1
 8001066:	e004      	b.n	8001072 <AddDeviceInfoService+0x3a>
	}
	ret = AddDeviceInfoCharacteristics();
 8001068:	f000 f852 	bl	8001110 <AddDeviceInfoCharacteristics>
 800106c:	4603      	mov	r3, r0
 800106e:	71bb      	strb	r3, [r7, #6]
    return ret;
 8001070:	79bb      	ldrb	r3, [r7, #6]

}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000204 	.word	0x20000204
 8001080:	08009f24 	.word	0x08009f24

08001084 <InitDeviceInfoCharacteristics>:

uint16_t GetDeviceInfoServiceHandle(void){
	return DeviceInfoServiceHandle;
}

static DeviceInfoServiceStatus_t InitDeviceInfoCharacteristics(void){
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b085      	sub	sp, #20
 8001088:	af02      	add	r7, sp, #8
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e029      	b.n	80010e4 <InitDeviceInfoCharacteristics+0x60>
    	status = aci_gatt_update_char_value(DeviceInfoServiceHandle, DeviceInfoCharHandleLookUpTable[i], 0, DeviceInfoCharValueLengthLookUpTable[i], DeviceInfoCharValueStrings[i]);
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <InitDeviceInfoCharacteristics+0x70>)
 8001092:	8818      	ldrh	r0, [r3, #0]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <InitDeviceInfoCharacteristics+0x74>)
 8001098:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <InitDeviceInfoCharacteristics+0x78>)
 80010a0:	5cd2      	ldrb	r2, [r2, r3]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4c16      	ldr	r4, [pc, #88]	; (8001100 <InitDeviceInfoCharacteristics+0x7c>)
 80010a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	f006 ffc3 	bl	800803a <aci_gatt_update_char_value>
 80010b4:	4603      	mov	r3, r0
 80010b6:	71bb      	strb	r3, [r7, #6]
    	if(status != BLE_STATUS_SUCCESS){
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00f      	beq.n	80010de <InitDeviceInfoCharacteristics+0x5a>
    		printf(DeviceInfoCharErrorStringLookUpTable[i]);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <InitDeviceInfoCharacteristics+0x80>)
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 fe7a 	bl	8008dc0 <iprintf>
    		printf("Fail on Init Device Info with return code %u",status);
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	4619      	mov	r1, r3
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <InitDeviceInfoCharacteristics+0x84>)
 80010d2:	f007 fe75 	bl	8008dc0 <iprintf>
    		return DeviceInfoCharErrorReturnLookUpTable[i];
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <InitDeviceInfoCharacteristics+0x88>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	e006      	b.n	80010ec <InitDeviceInfoCharacteristics+0x68>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d9d2      	bls.n	8001090 <InitDeviceInfoCharacteristics+0xc>
    	}
    }
    return DeviceInfo_OK;
 80010ea:	2307      	movs	r3, #7
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000208 	.word	0x20000208
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000014 	.word	0x20000014
 8001104:	20000024 	.word	0x20000024
 8001108:	08009f48 	.word	0x08009f48
 800110c:	0800a2fc 	.word	0x0800a2fc

08001110 <AddDeviceInfoCharacteristics>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e03c      	b.n	8001196 <AddDeviceInfoCharacteristics+0x86>
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <AddDeviceInfoCharacteristics+0x9c>)
 800111e:	881c      	ldrh	r4, [r3, #0]
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <AddDeviceInfoCharacteristics+0xa0>)
 8001124:	5cd5      	ldrb	r5, [r2, r3]
        		                   DeviceInfoCharUUIDTypeLookUpTable[i],               //UUID Type
				                   (const uint8_t*)&DeviceInfoCharUUIDLookUpTable[i],  //UUID Value
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <AddDeviceInfoCharacteristics+0xa4>)
 800112c:	189e      	adds	r6, r3, r2
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <AddDeviceInfoCharacteristics+0xa8>)
 8001132:	f812 c003 	ldrb.w	ip, [r2, r3]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <AddDeviceInfoCharacteristics+0xac>)
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	491f      	ldr	r1, [pc, #124]	; (80011c0 <AddDeviceInfoCharacteristics+0xb0>)
 8001142:	5c8a      	ldrb	r2, [r1, r2]
 8001144:	7bf9      	ldrb	r1, [r7, #15]
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <AddDeviceInfoCharacteristics+0xb4>)
 8001148:	5c41      	ldrb	r1, [r0, r1]
				                   DeviceInfo_CharPropertiesLookUpTable[i],            //Char Properties
				                   DeviceInfoCharPermissionsLookUpTable[i],            //Char SecPermissions
								   DeviceInfoCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                                 //Encryption Key Size
				                   1,                                                  //variable length value field (1) or not (0).
				                   &DeviceInfoCharHandleLookUpTable[i]);               //DeviceInfo Char Handle Address
 800114a:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 800114c:	0040      	lsls	r0, r0, #1
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <AddDeviceInfoCharacteristics+0xb8>)
 8001150:	4418      	add	r0, r3
 8001152:	9005      	str	r0, [sp, #20]
 8001154:	2001      	movs	r0, #1
 8001156:	9004      	str	r0, [sp, #16]
 8001158:	2010      	movs	r0, #16
 800115a:	9003      	str	r0, [sp, #12]
 800115c:	9102      	str	r1, [sp, #8]
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4663      	mov	r3, ip
 8001166:	4632      	mov	r2, r6
 8001168:	4629      	mov	r1, r5
 800116a:	4620      	mov	r0, r4
 800116c:	f006 fd52 	bl	8007c14 <aci_gatt_add_char>
 8001170:	4603      	mov	r3, r0
 8001172:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <AddDeviceInfoCharacteristics+0x80>
        	printf(DeviceInfoCharErrorStringLookUpTable[i]);
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <AddDeviceInfoCharacteristics+0xbc>)
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	4618      	mov	r0, r3
 8001184:	f007 fe1c 	bl	8008dc0 <iprintf>
        	return DeviceInfoCharErrorReturnLookUpTable[i];
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <AddDeviceInfoCharacteristics+0xc0>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	e008      	b.n	80011a2 <AddDeviceInfoCharacteristics+0x92>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d9bf      	bls.n	800111c <AddDeviceInfoCharacteristics+0xc>
        }
    }
    return InitDeviceInfoCharacteristics();
 800119c:	f7ff ff72 	bl	8001084 <InitDeviceInfoCharacteristics>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000204 	.word	0x20000204
 80011b0:	0800a2e8 	.word	0x0800a2e8
 80011b4:	0800a2ec 	.word	0x0800a2ec
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000010 	.word	0x20000010
 80011c0:	0800a2f4 	.word	0x0800a2f4
 80011c4:	0800a2f8 	.word	0x0800a2f8
 80011c8:	20000208 	.word	0x20000208
 80011cc:	20000024 	.word	0x20000024
 80011d0:	0800a2fc 	.word	0x0800a2fc

080011d4 <FitnessControllerBLEInit>:
		0x0100, //left shoulder
		0x0200  //right shoulder
};


void FitnessControllerBLEInit(void){
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af04      	add	r7, sp, #16
	tBleStatus status; //Var for storing return status

	uint8_t bdaddr[BD_ADDR_SIZE]; //Device address
	const char *DeviceName = "Evan's Fitness Controller"; //Device Name
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <FitnessControllerBLEInit+0x13c>)
 80011dc:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80011de:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <FitnessControllerBLEInit+0x140>)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e8:	6018      	str	r0, [r3, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	8019      	strh	r1, [r3, #0]
	//Init HCI
	hci_init(ControllerEventNotify,NULL);
 80011ee:	2100      	movs	r1, #0
 80011f0:	4849      	ldr	r0, [pc, #292]	; (8001318 <FitnessControllerBLEInit+0x144>)
 80011f2:	f007 fa97 	bl	8008724 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80011f6:	1cba      	adds	r2, r7, #2
 80011f8:	1d7b      	adds	r3, r7, #5
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 f90d 	bl	800841c <getBlueNRGVersion>
	hci_reset();
 8001202:	f007 f94f 	bl	80084a4 <hci_reset>
	HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f001 fb02 	bl	8002810 <HAL_Delay>

	status = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	461a      	mov	r2, r3
 8001212:	2106      	movs	r1, #6
 8001214:	2000      	movs	r0, #0
 8001216:	f007 f876 	bl	8008306 <aci_hal_write_config_data>
 800121a:	4603      	mov	r3, r0
 800121c:	74fb      	strb	r3, [r7, #19]

	if(status != BLE_STATUS_SUCCESS){
 800121e:	7cfb      	ldrb	r3, [r7, #19]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <FitnessControllerBLEInit+0x58>
		printf("aci_hal_write_config_data failed\n\r");
 8001224:	483d      	ldr	r0, [pc, #244]	; (800131c <FitnessControllerBLEInit+0x148>)
 8001226:	f007 fdcb 	bl	8008dc0 <iprintf>
		while(1);
 800122a:	e7fe      	b.n	800122a <FitnessControllerBLEInit+0x56>
	}

	status = aci_gatt_init();
 800122c:	f006 fc46 	bl	8007abc <aci_gatt_init>
 8001230:	4603      	mov	r3, r0
 8001232:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <FitnessControllerBLEInit+0x6e>
		printf("aci_gatt_init failed\n\r");
 800123a:	4839      	ldr	r0, [pc, #228]	; (8001320 <FitnessControllerBLEInit+0x14c>)
 800123c:	f007 fdc0 	bl	8008dc0 <iprintf>
		while(1);
 8001240:	e7fe      	b.n	8001240 <FitnessControllerBLEInit+0x6c>
	}


    status = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, strlen(DeviceName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7fe ffc4 	bl	80001d0 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b2da      	uxtb	r2, r3
 800124c:	f107 010a 	add.w	r1, r7, #10
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	460b      	mov	r3, r1
 800125c:	2100      	movs	r1, #0
 800125e:	2001      	movs	r0, #1
 8001260:	f006 fa39 	bl	80076d6 <aci_gap_init_IDB05A1>
 8001264:	4603      	mov	r3, r0
 8001266:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <FitnessControllerBLEInit+0xa2>
		printf("aci_gap_init failed\n\r");
 800126e:	482d      	ldr	r0, [pc, #180]	; (8001324 <FitnessControllerBLEInit+0x150>)
 8001270:	f007 fda6 	bl	8008dc0 <iprintf>
		while(1);
 8001274:	e7fe      	b.n	8001274 <FitnessControllerBLEInit+0xa0>
	}


	status = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(DeviceName), DeviceName);
 8001276:	897c      	ldrh	r4, [r7, #10]
 8001278:	893d      	ldrh	r5, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7fe ffa8 	bl	80001d0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b2da      	uxtb	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	2200      	movs	r2, #0
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f006 fed3 	bl	800803a <aci_gatt_update_char_value>
 8001294:	4603      	mov	r3, r0
 8001296:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <FitnessControllerBLEInit+0xd2>
		printf("aci_gatt_update_char_value failed\n\r");
 800129e:	4822      	ldr	r0, [pc, #136]	; (8001328 <FitnessControllerBLEInit+0x154>)
 80012a0:	f007 fd8e 	bl	8008dc0 <iprintf>
		while(1);
 80012a4:	e7fe      	b.n	80012a4 <FitnessControllerBLEInit+0xd0>
	}
	uint16_t test_appearance_value = 0x03C4;
 80012a6:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 80012aa:	803b      	strh	r3, [r7, #0]
	status = aci_gatt_update_char_value(service_handle,appearance_char_handle,0,2,&test_appearance_value);
 80012ac:	8978      	ldrh	r0, [r7, #10]
 80012ae:	88f9      	ldrh	r1, [r7, #6]
 80012b0:	463b      	mov	r3, r7
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2302      	movs	r3, #2
 80012b6:	2200      	movs	r2, #0
 80012b8:	f006 febf 	bl	800803a <aci_gatt_update_char_value>
 80012bc:	4603      	mov	r3, r0
 80012be:	74fb      	strb	r3, [r7, #19]
	AddServices();
 80012c0:	f000 f946 	bl	8001550 <AddServices>

	status = aci_gap_set_io_capability(IO_CAP_NO_INPUT_NO_OUTPUT);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f006 fb40 	bl	800794a <aci_gap_set_io_capability>
 80012ca:	4603      	mov	r3, r0
 80012cc:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 80012ce:	7cfb      	ldrb	r3, [r7, #19]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <FitnessControllerBLEInit+0x106>
        printf("aci_gap_set_io_capabilities failed\n\r");
 80012d4:	4815      	ldr	r0, [pc, #84]	; (800132c <FitnessControllerBLEInit+0x158>)
 80012d6:	f007 fd73 	bl	8008dc0 <iprintf>
	}
	status = aci_gap_set_auth_requirement(MITM_PROTECTION_NOT_REQUIRED,
 80012da:	2300      	movs	r3, #0
 80012dc:	9303      	str	r3, [sp, #12]
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <FitnessControllerBLEInit+0x15c>)
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2310      	movs	r3, #16
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2307      	movs	r3, #7
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f006 fb56 	bl	80079a2 <aci_gap_set_auth_requirement>
 80012f6:	4603      	mov	r3, r0
 80012f8:	74fb      	strb	r3, [r7, #19]
										  7,
										  16,
										  USE_FIXED_PIN_FOR_PAIRING,
										  123456,
										  NO_BONDING);
	if(status != BLE_STATUS_SUCCESS){
 80012fa:	7cfb      	ldrb	r3, [r7, #19]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <FitnessControllerBLEInit+0x132>
        printf("aci_gap_set_auth_requirement failed\n\r");
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <FitnessControllerBLEInit+0x160>)
 8001302:	f007 fd5d 	bl	8008dc0 <iprintf>
	}


}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	08009f78 	.word	0x08009f78
 8001314:	0800a300 	.word	0x0800a300
 8001318:	0800160d 	.word	0x0800160d
 800131c:	08009f94 	.word	0x08009f94
 8001320:	08009fb8 	.word	0x08009fb8
 8001324:	08009fd0 	.word	0x08009fd0
 8001328:	08009fe8 	.word	0x08009fe8
 800132c:	0800a00c 	.word	0x0800a00c
 8001330:	0001e240 	.word	0x0001e240
 8001334:	0800a034 	.word	0x0800a034

08001338 <FitnessController_BLE_Process>:

void FitnessController_BLE_Process(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	//make device discoverable
	if(discoverable == DEVICE_NOTDISCOVERABLE){
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <FitnessController_BLE_Process+0x34>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <FitnessController_BLE_Process+0x12>
		SetDiscoverable();
 8001346:	f000 f931 	bl	80015ac <SetDiscoverable>
	}
	FitnessControllerDataFlag_t DataFlag = FitnessControllerUpdateState(&FitnessController);
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <FitnessController_BLE_Process+0x38>)
 800134c:	f000 f826 	bl	800139c <FitnessControllerUpdateState>
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
    if(DataFlag == FC_NewDataAvailable){
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <FitnessController_BLE_Process+0x26>
    	SendHIDData();
 800135a:	f000 fb89 	bl	8001a70 <SendHIDData>
    }
	hci_user_evt_proc();
 800135e:	f007 fb5d 	bl	8008a1c <hci_user_evt_proc>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200003a0 	.word	0x200003a0
 8001370:	20000210 	.word	0x20000210

08001374 <FitnessControllerHardwareInit>:

void FitnessControllerHardwareInit(FitnessControllerHandle_t *FitnessController){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	ControllerButtonInit(FitnessController);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f9b5 	bl	80016ec <ControllerButtonInit>
	ControllerTriggerInit(FitnessController);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa0a 	bl	800179c <ControllerTriggerInit>
	ControllerStickInit(FitnessController);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fa31 	bl	80017f0 <ControllerStickInit>
	ControllerDpadInit(FitnessController);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fa58 	bl	8001844 <ControllerDpadInit>
	//HeartRateInit(FitnessController);
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <FitnessControllerUpdateState>:

FitnessControllerDataFlag_t FitnessControllerUpdateState(FitnessControllerHandle_t *FitnessController){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	FitnessControllerDataFlag_t ReturnStatus = FC_NoDataAvailable;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	73bb      	strb	r3, [r7, #14]
 80013ac:	e049      	b.n	8001442 <FitnessControllerUpdateState+0xa6>
    	if(ButtonRead(&FitnessController->Buttons[i].Button) == ButtonChanged){
 80013ae:	7bba      	ldrb	r2, [r7, #14]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	3318      	adds	r3, #24
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fc1b 	bl	8000bfa <ButtonRead>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d138      	bne.n	800143c <FitnessControllerUpdateState+0xa0>
    		ReturnStatus |= FC_NewDataAvailable;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
            if(FitnessController->Buttons[i].Button.State == ButtonPressed){
 80013d2:	7bba      	ldrb	r2, [r7, #14]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3319      	adds	r3, #25
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d112      	bne.n	800140e <FitnessControllerUpdateState+0x72>
            	HIDReport.Buttons |= FitnessController->Buttons[i].ButtonMsk;
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 80013ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80013ee:	b299      	uxth	r1, r3
 80013f0:	7bba      	ldrb	r2, [r7, #14]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4403      	add	r3, r0
 80013fe:	3330      	adds	r3, #48	; 0x30
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	430b      	orrs	r3, r1
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b51      	ldr	r3, [pc, #324]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 8001408:	f8a3 2001 	strh.w	r2, [r3, #1]
 800140c:	e016      	b.n	800143c <FitnessControllerUpdateState+0xa0>
            } else {
            	HIDReport.Buttons &= ~(FitnessController->Buttons[i].ButtonMsk);
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 8001410:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001414:	b29b      	uxth	r3, r3
 8001416:	b219      	sxth	r1, r3
 8001418:	7bba      	ldrb	r2, [r7, #14]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4403      	add	r3, r0
 8001426:	3330      	adds	r3, #48	; 0x30
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b21b      	sxth	r3, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	b21b      	sxth	r3, r3
 8001430:	400b      	ands	r3, r1
 8001432:	b21b      	sxth	r3, r3
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 8001438:	f8a3 2001 	strh.w	r2, [r3, #1]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	3301      	adds	r3, #1
 8001440:	73bb      	strb	r3, [r7, #14]
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d9b2      	bls.n	80013ae <FitnessControllerUpdateState+0x12>
            }
    	}
    }

    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 8001448:	2300      	movs	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]
 800144c:	e023      	b.n	8001496 <FitnessControllerUpdateState+0xfa>
        if(TriggerRead(&FitnessController->Triggers[i]) == TriggerChanged){
 800144e:	7b7a      	ldrb	r2, [r7, #13]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fd5b 	bl	8000f1c <TriggerRead>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <FitnessControllerUpdateState+0xf4>
        	ReturnStatus |= FC_NewDataAvailable;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Triggers[i] = FitnessController->Triggers[i].Position;
 8001474:	7b7a      	ldrb	r2, [r7, #13]
 8001476:	7b79      	ldrb	r1, [r7, #13]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4403      	add	r3, r0
 8001484:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 800148c:	440b      	add	r3, r1
 800148e:	70da      	strb	r2, [r3, #3]
    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 8001490:	7b7b      	ldrb	r3, [r7, #13]
 8001492:	3301      	adds	r3, #1
 8001494:	737b      	strb	r3, [r7, #13]
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d9d8      	bls.n	800144e <FitnessControllerUpdateState+0xb2>
        }
    }

    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	733b      	strb	r3, [r7, #12]
 80014a0:	e03c      	b.n	800151c <FitnessControllerUpdateState+0x180>
        if(AnalogStickRead(&FitnessController->Sticks[i]) == AnalogStickChanged){
 80014a2:	7b3a      	ldrb	r2, [r7, #12]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fad6 	bl	8000a66 <AnalogStickRead>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d12a      	bne.n	8001516 <FitnessControllerUpdateState+0x17a>
        	ReturnStatus |= FC_NewDataAvailable;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Sticks[i*2] = FitnessController->Sticks[i].X_Position;
 80014c8:	7b3a      	ldrb	r2, [r7, #12]
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	0059      	lsls	r1, r3, #1
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4403      	add	r3, r0
 80014da:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80014de:	f9b3 0000 	ldrsh.w	r0, [r3]
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 80014e4:	004b      	lsls	r3, r1, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	4602      	mov	r2, r0
 80014ea:	f8a3 2005 	strh.w	r2, [r3, #5]
        	HIDReport.Sticks[i*2+1] = FitnessController->Sticks[i].Y_Position;
 80014ee:	7b3a      	ldrb	r2, [r7, #12]
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4403      	add	r3, r0
 8001502:	f503 73b1 	add.w	r3, r3, #354	; 0x162
 8001506:	f9b3 0000 	ldrsh.w	r0, [r3]
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 800150c:	004b      	lsls	r3, r1, #1
 800150e:	4413      	add	r3, r2
 8001510:	4602      	mov	r2, r0
 8001512:	f8a3 2005 	strh.w	r2, [r3, #5]
    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	733b      	strb	r3, [r7, #12]
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d9bf      	bls.n	80014a2 <FitnessControllerUpdateState+0x106>
        }
    }
    if(DpadRead(&FitnessController->Dpad) == DpadChanged){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc08 	bl	8000d3a <DpadRead>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <FitnessControllerUpdateState+0x1a4>
    	ReturnStatus |= FC_NewDataAvailable;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
    	HIDReport.Dpad = FitnessController->Dpad.State;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	785a      	ldrb	r2, [r3, #1]
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <FitnessControllerUpdateState+0x1b0>)
 800153e:	701a      	strb	r2, [r3, #0]
    }

    //MAX30102_ReadHeartRate(&HeartRateMonitor);

    return ReturnStatus;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003a4 	.word	0x200003a4

08001550 <AddServices>:

static void AddServices(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0

	  HIDServiceStatus_t HIDStatus;
	  HIDStatus = AddHIDService();
 8001556:	f000 f98d 	bl	8001874 <AddHIDService>
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	  if(HIDStatus != HID_OK){
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d003      	beq.n	800156c <AddServices+0x1c>
          printf("Add HID Service Failed\n\r");
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <AddServices+0x50>)
 8001566:	f007 fc2b 	bl	8008dc0 <iprintf>
          while(1);
 800156a:	e7fe      	b.n	800156a <AddServices+0x1a>
	  }

	  BatteryServiceStatus_t BatStatus;
	  BatStatus = AddBatteryService();
 800156c:	f7ff f99c 	bl	80008a8 <AddBatteryService>
 8001570:	4603      	mov	r3, r0
 8001572:	71bb      	strb	r3, [r7, #6]
	  if(BatStatus != Battery_OK){
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d003      	beq.n	8001582 <AddServices+0x32>
		  printf("Add Battery Service Failed\n\r");
 800157a:	480a      	ldr	r0, [pc, #40]	; (80015a4 <AddServices+0x54>)
 800157c:	f007 fc20 	bl	8008dc0 <iprintf>
          while(1);
 8001580:	e7fe      	b.n	8001580 <AddServices+0x30>
	  }

	  DeviceInfoServiceStatus_t DIStatus;
	  DIStatus = AddDeviceInfoService();
 8001582:	f7ff fd59 	bl	8001038 <AddDeviceInfoService>
 8001586:	4603      	mov	r3, r0
 8001588:	717b      	strb	r3, [r7, #5]
	  if(DIStatus != DeviceInfo_OK){
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2b07      	cmp	r3, #7
 800158e:	d003      	beq.n	8001598 <AddServices+0x48>
		  printf("Add Device Service Failed\n\r");
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <AddServices+0x58>)
 8001592:	f007 fc15 	bl	8008dc0 <iprintf>
          while(1);
 8001596:	e7fe      	b.n	8001596 <AddServices+0x46>
	  }

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800a05c 	.word	0x0800a05c
 80015a4:	0800a078 	.word	0x0800a078
 80015a8:	0800a098 	.word	0x0800a098

080015ac <SetDiscoverable>:

static tBleStatus SetDiscoverable(void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af08      	add	r7, sp, #32
	tBleStatus status;
    status = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	9306      	str	r3, [sp, #24]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9305      	str	r3, [sp, #20]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9304      	str	r3, [sp, #16]
 80015be:	2300      	movs	r3, #0
 80015c0:	9303      	str	r3, [sp, #12]
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <SetDiscoverable+0x54>)
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	2313      	movs	r3, #19
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2000      	movs	r0, #0
 80015d6:	f006 f8ce 	bl	8007776 <aci_gap_set_discoverable>
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
    if(status == BLE_STATUS_SUCCESS){
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <SetDiscoverable+0x3e>
    	discoverable = DEVICE_DISCOVERABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <SetDiscoverable+0x58>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    }

	if(status != BLE_STATUS_SUCCESS){
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <SetDiscoverable+0x4a>
		printf("aci_gap_set_discoverable failed\n\r");
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <SetDiscoverable+0x5c>)
 80015f2:	f007 fbe5 	bl	8008dc0 <iprintf>
	}

	return status;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	0800a308 	.word	0x0800a308
 8001604:	200003a0 	.word	0x200003a0
 8001608:	0800a0b4 	.word	0x0800a0b4

0800160c <ControllerEventNotify>:

static void ControllerEventNotify(void *pData){
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	  hci_uart_pckt *hci_pckt = pData;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	61fb      	str	r3, [r7, #28]
	  /* obtain event packet */
	  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
	  tBleStatus status;

	  if(hci_pckt->type != HCI_EVENT_PKT){
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d156      	bne.n	80016d4 <ControllerEventNotify+0xc8>
	    return;
	  }

	  switch(event_pckt->evt){
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d02d      	beq.n	800168a <ControllerEventNotify+0x7e>
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	dc55      	bgt.n	80016de <ControllerEventNotify+0xd2>
 8001632:	2b05      	cmp	r3, #5
 8001634:	d002      	beq.n	800163c <ControllerEventNotify+0x30>
 8001636:	2b3e      	cmp	r3, #62	; 0x3e
 8001638:	d006      	beq.n	8001648 <ControllerEventNotify+0x3c>
 800163a:	e050      	b.n	80016de <ControllerEventNotify+0xd2>
	    case EVT_DISCONN_COMPLETE:
	      {
	    	  SetDiscoverable();
 800163c:	f7ff ffb6 	bl	80015ac <SetDiscoverable>
	    	  connected = DEVICE_CONNECTABLE;
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <ControllerEventNotify+0xd8>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8001646:	e04a      	b.n	80016de <ControllerEventNotify+0xd2>

	    case EVT_LE_META_EVENT:
	      {
	        evt_le_meta_event *evt = (void *)event_pckt->data;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	3302      	adds	r3, #2
 800164c:	613b      	str	r3, [r7, #16]

	        switch(evt->subevent){
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d140      	bne.n	80016d8 <ControllerEventNotify+0xcc>
	        case EVT_LE_CONN_COMPLETE:
	          {
	            evt_le_connection_complete *cc = (void *)evt->data;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
	            connection_handle = cc->handle;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <ControllerEventNotify+0xdc>)
 8001666:	801a      	strh	r2, [r3, #0]
	            status = aci_gap_slave_security_request(connection_handle, NO_BONDING, MITM_PROTECTION_NOT_REQUIRED);
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <ControllerEventNotify+0xdc>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f006 f9ed 	bl	8007a50 <aci_gap_slave_security_request>
 8001676:	4603      	mov	r3, r0
 8001678:	72fb      	strb	r3, [r7, #11]
	            if(status == BLE_STATUS_SUCCESS){
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <ControllerEventNotify+0x7a>
	                connected = DEVICE_CONNECTED;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ControllerEventNotify+0xd8>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
	            }
	          }
	          break;
 8001686:	bf00      	nop
	        }
	      }
	      break;
 8001688:	e026      	b.n	80016d8 <ControllerEventNotify+0xcc>

	    case EVT_VENDOR:
	      {
	        evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	3302      	adds	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
	        switch(blue_evt->ecode){
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	f640 4201 	movw	r2, #3073	; 0xc01
 800169a:	4293      	cmp	r3, r2
 800169c:	d014      	beq.n	80016c8 <ControllerEventNotify+0xbc>
 800169e:	f640 4201 	movw	r2, #3073	; 0xc01
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dc1a      	bgt.n	80016dc <ControllerEventNotify+0xd0>
 80016a6:	f240 4205 	movw	r2, #1029	; 0x405
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00e      	beq.n	80016cc <ControllerEventNotify+0xc0>
 80016ae:	f240 4205 	movw	r2, #1029	; 0x405
 80016b2:	4293      	cmp	r3, r2
 80016b4:	dc12      	bgt.n	80016dc <ControllerEventNotify+0xd0>
 80016b6:	f240 4201 	movw	r2, #1025	; 0x401
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d008      	beq.n	80016d0 <ControllerEventNotify+0xc4>
 80016be:	f240 4202 	movw	r2, #1026	; 0x402
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10a      	bne.n	80016dc <ControllerEventNotify+0xd0>
	        case(EVT_BLUE_GATT_ATTRIBUTE_MODIFIED):
	        		break;
	        case(EVT_BLUE_GAP_PASS_KEY_REQUEST):
	        		break;
 80016c6:	e004      	b.n	80016d2 <ControllerEventNotify+0xc6>
	        		break;
 80016c8:	bf00      	nop
 80016ca:	e007      	b.n	80016dc <ControllerEventNotify+0xd0>
	        case(EVT_BLUE_GAP_PAIRING_CMPLT):
	        		break;
	        case(EVT_BLUE_GAP_BOND_LOST):
	        		break;
 80016cc:	bf00      	nop
 80016ce:	e005      	b.n	80016dc <ControllerEventNotify+0xd0>
	        		break;
 80016d0:	bf00      	nop
	        }
	      }
	      break;
 80016d2:	e003      	b.n	80016dc <ControllerEventNotify+0xd0>
	    return;
 80016d4:	bf00      	nop
 80016d6:	e002      	b.n	80016de <ControllerEventNotify+0xd2>
	      break;
 80016d8:	bf00      	nop
 80016da:	e000      	b.n	80016de <ControllerEventNotify+0xd2>
	      break;
 80016dc:	bf00      	nop
	    }
}
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000036 	.word	0x20000036
 80016e8:	20000034 	.word	0x20000034

080016ec <ControllerButtonInit>:

static void ControllerButtonInit(FitnessControllerHandle_t *FitnessController){
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e041      	b.n	800177e <ControllerButtonInit+0x92>
		FitnessController->Buttons[i].ButtonMsk = ButtonMskLUT[i];
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	4924      	ldr	r1, [pc, #144]	; (8001790 <ControllerButtonInit+0xa4>)
 8001700:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3330      	adds	r3, #48	; 0x30
 8001712:	4602      	mov	r2, r0
 8001714:	801a      	strh	r2, [r3, #0]
		if(i != XINPUT_LEFT_THUMB_INDEX && i != XINPUT_RIGHT_THUMB_INDEX){
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b06      	cmp	r3, #6
 800171a:	d018      	beq.n	800174e <ControllerButtonInit+0x62>
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d015      	beq.n	800174e <ControllerButtonInit+0x62>
		    ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverPosLogic);
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	3318      	adds	r3, #24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	18d6      	adds	r6, r2, r3
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <ControllerButtonInit+0xa8>)
 8001734:	7bfd      	ldrb	r5, [r7, #15]
 8001736:	466c      	mov	r4, sp
 8001738:	f103 0208 	add.w	r2, r3, #8
 800173c:	ca07      	ldmia	r2, {r0, r1, r2}
 800173e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001742:	cb0c      	ldmia	r3, {r2, r3}
 8001744:	4631      	mov	r1, r6
 8001746:	4628      	mov	r0, r5
 8001748:	f7ff fa34 	bl	8000bb4 <ButtonInit>
 800174c:	e014      	b.n	8001778 <ControllerButtonInit+0x8c>
		} else {
			ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverNegLogic);
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	3318      	adds	r3, #24
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	18d6      	adds	r6, r2, r3
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <ControllerButtonInit+0xac>)
 8001760:	7bfd      	ldrb	r5, [r7, #15]
 8001762:	466c      	mov	r4, sp
 8001764:	f103 0208 	add.w	r2, r3, #8
 8001768:	ca07      	ldmia	r2, {r0, r1, r2}
 800176a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800176e:	cb0c      	ldmia	r3, {r2, r3}
 8001770:	4631      	mov	r1, r6
 8001772:	4628      	mov	r0, r5
 8001774:	f7ff fa1e 	bl	8000bb4 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3301      	adds	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b09      	cmp	r3, #9
 8001782:	d9ba      	bls.n	80016fa <ControllerButtonInit+0xe>
		}
	}

}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178e:	bf00      	nop
 8001790:	0800a31c 	.word	0x0800a31c
 8001794:	0800a250 	.word	0x0800a250
 8001798:	0800a264 	.word	0x0800a264

0800179c <ControllerTriggerInit>:

static void ControllerTriggerInit(FitnessControllerHandle_t *FitnessController){
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
	TriggerInit(&FitnessController->Triggers[XINPUT_LEFTANALOG_INDEX], TriggerIO_Driver1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f503 7498 	add.w	r4, r3, #304	; 0x130
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <ControllerTriggerInit+0x4c>)
 80017ac:	466d      	mov	r5, sp
 80017ae:	f103 020c 	add.w	r2, r3, #12
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fb8f 	bl	8000ee0 <TriggerInit>
	TriggerInit(&FitnessController->Triggers[XINPUT_RIGHTANALOG_INDEX], TriggerIO_Driver2);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <ControllerTriggerInit+0x50>)
 80017ca:	466d      	mov	r5, sp
 80017cc:	f103 020c 	add.w	r2, r3, #12
 80017d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fb80 	bl	8000ee0 <TriggerInit>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	0800a28c 	.word	0x0800a28c
 80017ec:	0800a2a0 	.word	0x0800a2a0

080017f0 <ControllerStickInit>:

static void ControllerStickInit(FitnessControllerHandle_t *FitnessController){
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
   AnalogStickInit(&FitnessController->Sticks[XINPUT_LEFTANALOG_INDEX], AnalogStickIO_Driver1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <ControllerStickInit+0x4c>)
 8001800:	466d      	mov	r5, sp
 8001802:	f103 020c 	add.w	r2, r3, #12
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e885 0003 	stmia.w	r5, {r0, r1}
 800180e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff f907 	bl	8000a24 <AnalogStickInit>
   AnalogStickInit(&FitnessController->Sticks[XINPUT_RIGHTANALOG_INDEX], AnalogStickIO_Driver2);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <ControllerStickInit+0x50>)
 800181e:	466d      	mov	r5, sp
 8001820:	f103 020c 	add.w	r2, r3, #12
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	e885 0003 	stmia.w	r5, {r0, r1}
 800182c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff f8f8 	bl	8000a24 <AnalogStickInit>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bdb0      	pop	{r4, r5, r7, pc}
 800183c:	0800a1d8 	.word	0x0800a1d8
 8001840:	0800a1ec 	.word	0x0800a1ec

08001844 <ControllerDpadInit>:

static void ControllerDpadInit(FitnessControllerHandle_t *FitnessController){
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af04      	add	r7, sp, #16
 800184a:	6078      	str	r0, [r7, #4]
   DpadInit(1, &FitnessController->Dpad, HatSwitchIO_Driver);
 800184c:	687d      	ldr	r5, [r7, #4]
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <ControllerDpadInit+0x2c>)
 8001850:	466c      	mov	r4, sp
 8001852:	f103 0208 	add.w	r2, r3, #8
 8001856:	ca07      	ldmia	r2, {r0, r1, r2}
 8001858:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800185c:	cb0c      	ldmia	r3, {r2, r3}
 800185e:	4629      	mov	r1, r5
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fa47 	bl	8000cf4 <DpadInit>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bdb0      	pop	{r4, r5, r7, pc}
 800186e:	bf00      	nop
 8001870:	0800a278 	.word	0x0800a278

08001874 <AddHIDService>:
};

static HIDServiceStatus_t AddHIDCharacteristics(void);
static HIDServiceStatus_t InitHIDCharacteristicValues(void);

HIDServiceStatus_t AddHIDService(void){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af02      	add	r7, sp, #8
	tBleStatus status;
	HIDServiceStatus_t ret;
	uint16_t uuid = HID_SERVICE_UUID;
 800187a:	f641 0312 	movw	r3, #6162	; 0x1812
 800187e:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &HidServiceHandle);
 8001880:	1d39      	adds	r1, r7, #4
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <AddHIDService+0x44>)
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2310      	movs	r3, #16
 8001888:	2201      	movs	r2, #1
 800188a:	2001      	movs	r0, #1
 800188c:	f006 f939 	bl	8007b02 <aci_gatt_add_serv>
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <AddHIDService+0x30>
		printf("Adding HID Service Failed\n\r");
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <AddHIDService+0x48>)
 800189c:	f007 fa90 	bl	8008dc0 <iprintf>
		return HID_AddServiceErr;
 80018a0:	2304      	movs	r3, #4
 80018a2:	e004      	b.n	80018ae <AddHIDService+0x3a>
	}
	ret = AddHIDCharacteristics();
 80018a4:	f000 f80c 	bl	80018c0 <AddHIDCharacteristics>
 80018a8:	4603      	mov	r3, r0
 80018aa:	71bb      	strb	r3, [r7, #6]
    return ret;
 80018ac:	79bb      	ldrb	r3, [r7, #6]

}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003b2 	.word	0x200003b2
 80018bc:	0800a17c 	.word	0x0800a17c

080018c0 <AddHIDCharacteristics>:

uint16_t GetHIDServiceHandle(void){
	return HidServiceHandle;
}

static HIDServiceStatus_t AddHIDCharacteristics(void){
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af06      	add	r7, sp, #24
	tBleStatus status;
	HIDServiceStatus_t ret;
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e040      	b.n	800194e <AddHIDCharacteristics+0x8e>
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <AddHIDCharacteristics+0xa8>)
 80018ce:	881c      	ldrh	r4, [r3, #0]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4a26      	ldr	r2, [pc, #152]	; (800196c <AddHIDCharacteristics+0xac>)
 80018d4:	5cd5      	ldrb	r5, [r2, r3]
        		                   HIDCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&HIDCharUUIDLookUpTable[i],  //UUID Value
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <AddHIDCharacteristics+0xb0>)
 80018dc:	189e      	adds	r6, r3, r2
								   HIDCharValueLenLookUpTable[i],               //Char Value Length
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <AddHIDCharacteristics+0xb4>)
 80018e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80018e6:	fa5f fc83 	uxtb.w	ip, r3
				                   HIDCharPropertiesLookUpTable[i],             //Char Properties
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <AddHIDCharacteristics+0xb8>)
 80018ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	4920      	ldr	r1, [pc, #128]	; (800197c <AddHIDCharacteristics+0xbc>)
 80018fa:	5c8a      	ldrb	r2, [r1, r2]
 80018fc:	7bf9      	ldrb	r1, [r7, #15]
 80018fe:	4820      	ldr	r0, [pc, #128]	; (8001980 <AddHIDCharacteristics+0xc0>)
 8001900:	5c41      	ldrb	r1, [r0, r1]
				                   HIDCharPermissionsLookUpTable[i],            //Char SecPermissions
								   HID_CharNotifyModeLookUpTable[i],            //Char Application (Server Side)Notify Mode e.g. Will the BLE Controller Notify me when a r/w occurs
				                   16,                                          //Encyption Key Size
				                   0,                                           //Does the value field have variable length? 1= yes, 0 = no
				                   &HIDCharHandleLookUpTable[i]);               //HID Char Handle Address
 8001902:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8001904:	0040      	lsls	r0, r0, #1
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <AddHIDCharacteristics+0xc4>)
 8001908:	4418      	add	r0, r3
 800190a:	9005      	str	r0, [sp, #20]
 800190c:	2000      	movs	r0, #0
 800190e:	9004      	str	r0, [sp, #16]
 8001910:	2010      	movs	r0, #16
 8001912:	9003      	str	r0, [sp, #12]
 8001914:	9102      	str	r1, [sp, #8]
 8001916:	9201      	str	r2, [sp, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4663      	mov	r3, ip
 800191e:	4632      	mov	r2, r6
 8001920:	4629      	mov	r1, r5
 8001922:	4620      	mov	r0, r4
 8001924:	f006 f976 	bl	8007c14 <aci_gatt_add_char>
 8001928:	4603      	mov	r3, r0
 800192a:	737b      	strb	r3, [r7, #13]
        if(status != BLE_STATUS_SUCCESS){
 800192c:	7b7b      	ldrb	r3, [r7, #13]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <AddHIDCharacteristics+0x88>
        	printf(HIDCharErrorStringLookUpTable[i]);
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <AddHIDCharacteristics+0xc8>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	4618      	mov	r0, r3
 800193c:	f007 fa40 	bl	8008dc0 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <AddHIDCharacteristics+0xcc>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	e00a      	b.n	800195e <AddHIDCharacteristics+0x9e>
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3301      	adds	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d9bb      	bls.n	80018cc <AddHIDCharacteristics+0xc>
        }
    }
    ret = InitHIDCharacteristicValues();
 8001954:	f000 f81c 	bl	8001990 <InitHIDCharacteristicValues>
 8001958:	4603      	mov	r3, r0
 800195a:	73bb      	strb	r3, [r7, #14]
    return ret;
 800195c:	7bbb      	ldrb	r3, [r7, #14]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001966:	bf00      	nop
 8001968:	200003b2 	.word	0x200003b2
 800196c:	0800a394 	.word	0x0800a394
 8001970:	0800a398 	.word	0x0800a398
 8001974:	20000038 	.word	0x20000038
 8001978:	20000040 	.word	0x20000040
 800197c:	0800a3a0 	.word	0x0800a3a0
 8001980:	0800a3a4 	.word	0x0800a3a4
 8001984:	200003b4 	.word	0x200003b4
 8001988:	20000048 	.word	0x20000048
 800198c:	0800a3a8 	.word	0x0800a3a8

08001990 <InitHIDCharacteristicValues>:

static HIDServiceStatus_t InitHIDCharacteristicValues(void){
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b08d      	sub	sp, #52	; 0x34
 8001994:	af0a      	add	r7, sp, #40	; 0x28
	tBleStatus status;

	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e04e      	b.n	8001a3a <InitHIDCharacteristicValues+0xaa>
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <InitHIDCharacteristicValues+0xbc>)
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <InitHIDCharacteristicValues+0xc0>)
 80019a4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														NOTIFICATION,                      //The offset from which the attribute value has to be updated
														0,
														0,
														HIDCharValueLenLookUpTable[i],     //Length of the value to be updated
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <InitHIDCharacteristicValues+0xc4>)
 80019ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	79fa      	ldrb	r2, [r7, #7]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 80019b4:	4c28      	ldr	r4, [pc, #160]	; (8001a58 <InitHIDCharacteristicValues+0xc8>)
 80019b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2300      	movs	r3, #0
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	2201      	movs	r2, #1
 80019c6:	f006 fc07 	bl	80081d8 <aci_gatt_update_char_value_ext_IDB05A1>
 80019ca:	4603      	mov	r3, r0
 80019cc:	71bb      	strb	r3, [r7, #6]


        if(status != BLE_STATUS_SUCCESS){
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <InitHIDCharacteristicValues+0x60>
        	printf("Error Initializing Characteristic\n\r");
 80019d4:	4821      	ldr	r0, [pc, #132]	; (8001a5c <InitHIDCharacteristicValues+0xcc>)
 80019d6:	f007 f9f3 	bl	8008dc0 <iprintf>
        	printf(HIDCharErrorStringLookUpTable[i]);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <InitHIDCharacteristicValues+0xd0>)
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f007 f9ec 	bl	8008dc0 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <InitHIDCharacteristicValues+0xd4>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	e028      	b.n	8001a42 <InitHIDCharacteristicValues+0xb2>
        }
        if(i == HID_REPORT_INDEX){
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d11e      	bne.n	8001a34 <InitHIDCharacteristicValues+0xa4>
        	 uint16_t desc_uuid = HID_REPORTREF_DESC_UUID;
 80019f6:	f642 1308 	movw	r3, #10504	; 0x2908
 80019fa:	80bb      	strh	r3, [r7, #4]
             status = aci_gatt_add_char_desc(HidServiceHandle,
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <InitHIDCharacteristicValues+0xbc>)
 80019fe:	8818      	ldrh	r0, [r3, #0]
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <InitHIDCharacteristicValues+0xc0>)
 8001a02:	88d9      	ldrh	r1, [r3, #6]
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <InitHIDCharacteristicValues+0xd8>)
 8001a08:	9208      	str	r2, [sp, #32]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	9207      	str	r2, [sp, #28]
 8001a0e:	2207      	movs	r2, #7
 8001a10:	9206      	str	r2, [sp, #24]
 8001a12:	2200      	movs	r2, #0
 8001a14:	9205      	str	r2, [sp, #20]
 8001a16:	2201      	movs	r2, #1
 8001a18:	9204      	str	r2, [sp, #16]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	9203      	str	r2, [sp, #12]
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <InitHIDCharacteristicValues+0xdc>)
 8001a20:	9202      	str	r2, [sp, #8]
 8001a22:	2202      	movs	r2, #2
 8001a24:	9201      	str	r2, [sp, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	9200      	str	r2, [sp, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f006 f9bd 	bl	8007daa <aci_gatt_add_char_desc>
 8001a30:	4603      	mov	r3, r0
 8001a32:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d9ad      	bls.n	800199c <InitHIDCharacteristicValues+0xc>
											 7,
											 0,
											 &HIDReportDescHandle);
        }
	}
	return HID_OK;
 8001a40:	2305      	movs	r3, #5
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003b2 	.word	0x200003b2
 8001a50:	200003b4 	.word	0x200003b4
 8001a54:	20000038 	.word	0x20000038
 8001a58:	20000058 	.word	0x20000058
 8001a5c:	0800a198 	.word	0x0800a198
 8001a60:	20000048 	.word	0x20000048
 8001a64:	0800a3a8 	.word	0x0800a3a8
 8001a68:	200003bc 	.word	0x200003bc
 8001a6c:	0800a334 	.word	0x0800a334

08001a70 <SendHIDData>:

void SendHIDData(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af04      	add	r7, sp, #16
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <SendHIDData+0x30>)
 8001a78:	8818      	ldrh	r0, [r3, #0]
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <SendHIDData+0x34>)
 8001a7c:	88d9      	ldrh	r1, [r3, #6]
					                            HIDCharHandleLookUpTable[HID_REPORT_INDEX],       //Handle of the characteristic.
												NOTIFICATION,                                                //The offset from which the attribute value has to be updated
												0,
												0,
												HIDCharValueLenLookUpTable[HID_REPORT_INDEX],     //Length of the value to be updated
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <SendHIDData+0x38>)
 8001a80:	88db      	ldrh	r3, [r3, #6]
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001a82:	b2db      	uxtb	r3, r3
												HIDCharValueLookUpTable[HID_REPORT_INDEX]);       //Updated characteristic value
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <SendHIDData+0x3c>)
 8001a86:	68d2      	ldr	r2, [r2, #12]
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001a88:	9202      	str	r2, [sp, #8]
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	2201      	movs	r2, #1
 8001a94:	f006 fba0 	bl	80081d8 <aci_gatt_update_char_value_ext_IDB05A1>

}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200003b2 	.word	0x200003b2
 8001aa4:	200003b4 	.word	0x200003b4
 8001aa8:	20000038 	.word	0x20000038
 8001aac:	20000058 	.word	0x20000058

08001ab0 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0ac      	sub	sp, #176	; 0xb0
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2288      	movs	r2, #136	; 0x88
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f007 f96d 	bl	8008db0 <memset>
  if(adcHandle->Instance==ADC1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <HAL_ADC_MspInit+0x11c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d171      	bne.n	8001bc4 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ae6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001af6:	2318      	movs	r3, #24
 8001af8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001afa:	2307      	movs	r3, #7
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 ff99 	bl	8005a48 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b1c:	f000 fb2a 	bl	8002174 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_ADC_MspInit+0x120>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LeftStick_X_Pin|LeftStick_Y_Pin|RightStick_X_Pin|RightStick_Y_Pin
 8001b50:	233f      	movs	r3, #63	; 0x3f
 8001b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |LeftTrigger_Pin|RightTrigger_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b56:	230b      	movs	r3, #11
 8001b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b66:	4619      	mov	r1, r3
 8001b68:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <HAL_ADC_MspInit+0x124>)
 8001b6a:	f002 fe2b 	bl	80047c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_ADC_MspInit+0x12c>)
 8001b72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001baa:	f002 fb77 	bl	800429c <HAL_DMA_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001bb4:	f000 fade 	bl	8002174 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bbe:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_ADC_MspInit+0x128>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	37b0      	adds	r7, #176	; 0xb0
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	50040000 	.word	0x50040000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	20000424 	.word	0x20000424
 8001bdc:	40020008 	.word	0x40020008

08001be0 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
	  ADC_MultiModeTypeDef multimode = {0};
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]

	  hadc1.Instance = ADC1;
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <ADC1_Init+0x170>)
 8001c04:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <ADC1_Init+0x174>)
 8001c06:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c08:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <ADC1_Init+0x170>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <ADC1_Init+0x170>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <ADC1_Init+0x170>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <ADC1_Init+0x170>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <ADC1_Init+0x170>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <ADC1_Init+0x170>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c2c:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <ADC1_Init+0x170>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 6;
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <ADC1_Init+0x170>)
 8001c34:	2206      	movs	r2, #6
 8001c36:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c38:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <ADC1_Init+0x170>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <ADC1_Init+0x170>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c46:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <ADC1_Init+0x170>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <ADC1_Init+0x170>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c54:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <ADC1_Init+0x170>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <ADC1_Init+0x170>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c62:	483b      	ldr	r0, [pc, #236]	; (8001d50 <ADC1_Init+0x170>)
 8001c64:	f001 f81c 	bl	8002ca0 <HAL_ADC_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <ADC1_Init+0x92>
	  {
	    Error_Handler();
 8001c6e:	f000 fa81 	bl	8002174 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4834      	ldr	r0, [pc, #208]	; (8001d50 <ADC1_Init+0x170>)
 8001c7e:	f002 f8ed 	bl	8003e5c <HAL_ADCEx_MultiModeConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001c88:	f000 fa74 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <ADC1_Init+0x178>)
 8001c8e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c90:	2306      	movs	r3, #6
 8001c92:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001c94:	2304      	movs	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c98:	237f      	movs	r3, #127	; 0x7f
 8001c9a:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4829      	ldr	r0, [pc, #164]	; (8001d50 <ADC1_Init+0x170>)
 8001caa:	f001 fa8b 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <ADC1_Init+0xd8>
	  {
	    Error_Handler();
 8001cb4:	f000 fa5e 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <ADC1_Init+0x17c>)
 8001cba:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4822      	ldr	r0, [pc, #136]	; (8001d50 <ADC1_Init+0x170>)
 8001cc6:	f001 fa7d 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <ADC1_Init+0xf4>
	  {
	    Error_Handler();
 8001cd0:	f000 fa50 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <ADC1_Init+0x180>)
 8001cd6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cd8:	2312      	movs	r3, #18
 8001cda:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <ADC1_Init+0x170>)
 8001ce2:	f001 fa6f 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <ADC1_Init+0x110>
	  {
	    Error_Handler();
 8001cec:	f000 fa42 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <ADC1_Init+0x184>)
 8001cf2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cf4:	2318      	movs	r3, #24
 8001cf6:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <ADC1_Init+0x170>)
 8001cfe:	f001 fa61 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <ADC1_Init+0x12c>
	  {
	    Error_Handler();
 8001d08:	f000 fa34 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_13;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <ADC1_Init+0x188>)
 8001d0e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d14:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <ADC1_Init+0x170>)
 8001d1c:	f001 fa52 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <ADC1_Init+0x14a>
	  {
	    Error_Handler();
 8001d26:	f000 fa25 	bl	8002174 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <ADC1_Init+0x18c>)
 8001d2c:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d2e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001d32:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <ADC1_Init+0x170>)
 8001d3a:	f001 fa43 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <ADC1_Init+0x168>
	  {
	    Error_Handler();
 8001d44:	f000 fa16 	bl	8002174 <Error_Handler>
	  }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200003c0 	.word	0x200003c0
 8001d54:	50040000 	.word	0x50040000
 8001d58:	04300002 	.word	0x04300002
 8001d5c:	08600004 	.word	0x08600004
 8001d60:	0c900008 	.word	0x0c900008
 8001d64:	10c00010 	.word	0x10c00010
 8001d68:	36902000 	.word	0x36902000
 8001d6c:	3ac04000 	.word	0x3ac04000

08001d70 <ADC_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/* USER CODE BEGIN 2 */
void ADC_DMA_Init(){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <ADC_DMA_Init+0x30>)
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <ADC_DMA_Init+0x30>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6493      	str	r3, [r2, #72]	; 0x48
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <ADC_DMA_Init+0x30>)
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	200b      	movs	r0, #11
 8001d94:	f002 fa2f 	bl	80041f6 <HAL_NVIC_SetPriority>
	  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000

08001da4 <BLE_GPIO_Init>:
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}

/* USER CODE BEGIN 2 */
void BLE_GPIO_Init(void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a42      	ldr	r2, [pc, #264]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <BLE_GPIO_Init+0x16c>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e38:	4836      	ldr	r0, [pc, #216]	; (8001f14 <BLE_GPIO_Init+0x170>)
 8001e3a:	f002 ff79 	bl	8004d30 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e44:	4834      	ldr	r0, [pc, #208]	; (8001f18 <BLE_GPIO_Init+0x174>)
 8001e46:	f002 ff73 	bl	8004d30 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4832      	ldr	r0, [pc, #200]	; (8001f1c <BLE_GPIO_Init+0x178>)
 8001e52:	f002 ff6d 	bl	8004d30 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f002 ff66 	bl	8004d30 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SPBTLE_RF_IRQ_EXTI6_Pin;
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e6c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4829      	ldr	r0, [pc, #164]	; (8001f20 <BLE_GPIO_Init+0x17c>)
 8001e7a:	f002 fca3 	bl	80047c4 <HAL_GPIO_Init>


	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LED2_Pin;
 8001e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e82:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	481f      	ldr	r0, [pc, #124]	; (8001f14 <BLE_GPIO_Init+0x170>)
 8001e98:	f002 fc94 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin;
 8001e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(SPBTLE_RF_SPI3_CSN_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4818      	ldr	r0, [pc, #96]	; (8001f18 <BLE_GPIO_Init+0x174>)
 8001eb6:	f002 fc85 	bl	80047c4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LED3_WIFI__LED4_BLE_Pin;
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LED3_WIFI__LED4_BLE_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4812      	ldr	r0, [pc, #72]	; (8001f1c <BLE_GPIO_Init+0x178>)
 8001ed4:	f002 fc76 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8001ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001edc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef4:	f002 fc66 	bl	80047c4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	2017      	movs	r0, #23
 8001efe:	f002 f97a 	bl	80041f6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f02:	2017      	movs	r0, #23
 8001f04:	f002 f993 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000c00 	.word	0x48000c00
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	48001000 	.word	0x48001000

08001f24 <Button_GPIO_Init>:

void Button_GPIO_Init(void){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <Button_GPIO_Init+0x118>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	; (800203c <Button_GPIO_Init+0x118>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <Button_GPIO_Init+0x118>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <Button_GPIO_Init+0x118>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a39      	ldr	r2, [pc, #228]	; (800203c <Button_GPIO_Init+0x118>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <Button_GPIO_Init+0x118>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <Button_GPIO_Init+0x118>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a33      	ldr	r2, [pc, #204]	; (800203c <Button_GPIO_Init+0x118>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <Button_GPIO_Init+0x118>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <Button_GPIO_Init+0x118>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a2d      	ldr	r2, [pc, #180]	; (800203c <Button_GPIO_Init+0x118>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <Button_GPIO_Init+0x118>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <Button_GPIO_Init+0x118>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a27      	ldr	r2, [pc, #156]	; (800203c <Button_GPIO_Init+0x118>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <Button_GPIO_Init+0x118>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]


	  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
	                           PAPin PAPin PAPin PAPin */
	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_B_Pin|XINPUT_GAMEPAD_A_Pin|XINPUT_GAMEPAD_DPAD_UP_Pin|XINPUT_GAMEPAD_START_Pin
 8001fb2:	f248 03ef 	movw	r3, #33007	; 0x80ef
 8001fb6:	617b      	str	r3, [r7, #20]
	                          |XINPUT_GAMEPAD_DPAD_RIGHT_Pin|XINPUT_GAMEPAD_DPAD_LEFT_Pin|XINPUT_GAMEPAD_DPAD_DOWN_Pin|XINPUT_GAMEPAD_RIGHT_SHOULDER_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f002 fbfb 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_RIGHT_THUMB_Pin;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(XINPUT_GAMEPAD_RIGHT_THUMB_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe4:	f002 fbee 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin PBPin */
	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_Y_Pin|XINPUT_GAMEPAD_LEFT_SHOULDER_Pin|XINPUT_GAMEPAD_BACK_Pin;
 8001fe8:	2315      	movs	r3, #21
 8001fea:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4811      	ldr	r0, [pc, #68]	; (8002040 <Button_GPIO_Init+0x11c>)
 8001ffc:	f002 fbe2 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_LEFT_THUMB_Pin;
 8002000:	2302      	movs	r3, #2
 8002002:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(XINPUT_GAMEPAD_LEFT_THUMB_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <Button_GPIO_Init+0x11c>)
 8002014:	f002 fbd6 	bl	80047c4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_X_Pin;
 8002018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(XINPUT_GAMEPAD_X_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <Button_GPIO_Init+0x120>)
 800202e:	f002 fbc9 	bl	80047c4 <HAL_GPIO_Init>

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400
 8002044:	48000c00 	.word	0x48000c00

08002048 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <ADC_GPIO_Init+0x2c>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <ADC_GPIO_Init+0x2c>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <ADC_GPIO_Init+0x2c>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207c:	f000 fb54 	bl	8002728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002080:	f000 f816 	bl	80020b0 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_DMA_Init();
  MX_USART1_UART_Init();
 8002084:	f000 f994 	bl	80023b0 <MX_USART1_UART_Init>
  //MX_ADC1_Init();
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  BLE_GPIO_Init();
 8002088:	f7ff fe8c 	bl	8001da4 <BLE_GPIO_Init>
  FitnessControllerBLEInit();
 800208c:	f7ff f8a2 	bl	80011d4 <FitnessControllerBLEInit>
  printf("Initialization Success!\n");
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <main+0x30>)
 8002092:	f006 ff1b 	bl	8008ecc <puts>
  FitnessControllerHardwareInit(&FitnessController);
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <main+0x34>)
 8002098:	f7ff f96c 	bl	8001374 <FitnessControllerHardwareInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(5);
 800209c:	2005      	movs	r0, #5
 800209e:	f000 fbb7 	bl	8002810 <HAL_Delay>
	FitnessController_BLE_Process();
 80020a2:	f7ff f949 	bl	8001338 <FitnessController_BLE_Process>
	HAL_Delay(5);
 80020a6:	e7f9      	b.n	800209c <main+0x24>
 80020a8:	0800a1bc 	.word	0x0800a1bc
 80020ac:	20000210 	.word	0x20000210

080020b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b096      	sub	sp, #88	; 0x58
 80020b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	2244      	movs	r2, #68	; 0x44
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f006 fe76 	bl	8008db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c4:	463b      	mov	r3, r7
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020d6:	f002 fe61 	bl	8004d9c <HAL_PWREx_ControlVoltageScaling>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020e0:	f000 f848 	bl	8002174 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020e4:	f002 fe3c 	bl	8004d60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <SystemClock_Config+0xc0>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a20      	ldr	r2, [pc, #128]	; (8002170 <SystemClock_Config+0xc0>)
 80020f0:	f023 0318 	bic.w	r3, r3, #24
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020f8:	2314      	movs	r3, #20
 80020fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020fc:	2301      	movs	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002100:	2301      	movs	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002108:	2360      	movs	r3, #96	; 0x60
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210c:	2302      	movs	r3, #2
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002110:	2301      	movs	r3, #1
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002118:	2328      	movs	r3, #40	; 0x28
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800211c:	2307      	movs	r3, #7
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002120:	2302      	movs	r3, #2
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002124:	2302      	movs	r3, #2
 8002126:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fe8b 	bl	8004e48 <HAL_RCC_OscConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002138:	f000 f81c 	bl	8002174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213c:	230f      	movs	r3, #15
 800213e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002140:	2303      	movs	r3, #3
 8002142:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	2104      	movs	r1, #4
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fa53 	bl	8005600 <HAL_RCC_ClockConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002160:	f000 f808 	bl	8002174 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002164:	f003 ff5a 	bl	800601c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002168:	bf00      	nop
 800216a:	3758      	adds	r7, #88	; 0x58
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000

08002174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002178:	b672      	cpsid	i
}
 800217a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800217c:	e7fe      	b.n	800217c <Error_Handler+0x8>
	...

08002180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x44>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_MspInit+0x44>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6613      	str	r3, [r2, #96]	; 0x60
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_MspInit+0x44>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_MspInit+0x44>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_MspInit+0x44>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x44>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 fadc 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA1_Channel1_IRQHandler+0x10>)
 8002222:	f002 f991 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000424 	.word	0x20000424

08002230 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <EXTI9_5_IRQHandler+0x10>)
 8002236:	f002 fa95 	bl	8004764 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200000f4 	.word	0x200000f4

08002244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
	}

return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f917 	bl	80024cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
	}
	return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f006 fcf6 	bl	8008d40 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20018000 	.word	0x20018000
 8002380:	00000400 	.word	0x00000400
 8002384:	2000047c 	.word	0x2000047c
 8002388:	20000af0 	.word	0x20000af0

0800238c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <MX_USART1_UART_Init+0x5c>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_USART1_UART_Init+0x58>)
 80023f4:	f004 fc26 	bl	8006c44 <HAL_UART_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023fe:	f7ff feb9 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000480 	.word	0x20000480
 800240c:	40013800 	.word	0x40013800

08002410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0ac      	sub	sp, #176	; 0xb0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2288      	movs	r2, #136	; 0x88
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f006 fcbd 	bl	8008db0 <memset>
  if(uartHandle->Instance==USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_UART_MspInit+0xb0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d13a      	bne.n	80024b6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002440:	2301      	movs	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002444:	2300      	movs	r3, #0
 8002446:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fafb 	bl	8005a48 <HAL_RCCEx_PeriphCLKConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002458:	f7ff fe8c 	bl	8002174 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002466:	6613      	str	r3, [r2, #96]	; 0x60
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_UART_MspInit+0xb4>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a4:	2307      	movs	r3, #7
 80024a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_UART_MspInit+0xb8>)
 80024b2:	f002 f987 	bl	80047c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024b6:	bf00      	nop
 80024b8:	37b0      	adds	r7, #176	; 0xb0
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	48000400 	.word	0x48000400

080024cc <__io_putchar>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 10);
 80024d4:	1d39      	adds	r1, r7, #4
 80024d6:	230a      	movs	r3, #10
 80024d8:	2201      	movs	r2, #1
 80024da:	4804      	ldr	r0, [pc, #16]	; (80024ec <__io_putchar+0x20>)
 80024dc:	f004 fc00 	bl	8006ce0 <HAL_UART_Transmit>
	return ch;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000480 	.word	0x20000480

080024f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024f4:	f7ff ff4a 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <LoopForever+0x6>)
  ldr r1, =_edata
 80024fa:	490d      	ldr	r1, [pc, #52]	; (8002530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <LoopForever+0xe>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002510:	4c0a      	ldr	r4, [pc, #40]	; (800253c <LoopForever+0x16>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251e:	f006 fc15 	bl	8008d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002522:	f7ff fda9 	bl	8002078 <main>

08002526 <LoopForever>:

LoopForever:
    b LoopForever
 8002526:	e7fe      	b.n	8002526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002530:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002534:	0800a49c 	.word	0x0800a49c
  ldr r2, =_sbss
 8002538:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800253c:	20000aec 	.word	0x20000aec

08002540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC1_2_IRQHandler>
	...

08002544 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <BSP_SPI3_Init+0x54>)
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <BSP_SPI3_Init+0x58>)
 8002552:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <BSP_SPI3_Init+0x5c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4911      	ldr	r1, [pc, #68]	; (80025a0 <BSP_SPI3_Init+0x5c>)
 800255c:	600a      	str	r2, [r1, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d114      	bne.n	800258c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8002562:	480d      	ldr	r0, [pc, #52]	; (8002598 <BSP_SPI3_Init+0x54>)
 8002564:	f004 f9fc 	bl	8006960 <HAL_SPI_GetState>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10e      	bne.n	800258c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <BSP_SPI3_Init+0x54>)
 8002570:	f000 f882 	bl	8002678 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800257a:	4807      	ldr	r0, [pc, #28]	; (8002598 <BSP_SPI3_Init+0x54>)
 800257c:	f000 f83a 	bl	80025f4 <MX_SPI3_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002586:	f06f 0307 	mvn.w	r3, #7
 800258a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000504 	.word	0x20000504
 800259c:	40003c00 	.word	0x40003c00
 80025a0:	20000568 	.word	0x20000568

080025a4 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025bc:	9200      	str	r2, [sp, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <BSP_SPI3_SendRecv+0x3c>)
 80025c4:	f003 ffb9 	bl	800653a <HAL_SPI_TransmitReceive>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80025ce:	f06f 0305 	mvn.w	r3, #5
 80025d2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80025d4:	697b      	ldr	r3, [r7, #20]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000504 	.word	0x20000504

080025e4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80025e8:	f000 f906 	bl	80027f8 <HAL_GetTick>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <MX_SPI3_Init+0x80>)
 8002604:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800260c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800261a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2218      	movs	r2, #24
 8002634:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2207      	movs	r2, #7
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2208      	movs	r2, #8
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f003 fec0 	bl	80063e0 <HAL_SPI_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40003c00 	.word	0x40003c00

08002678 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <SPI3_MspInit+0xa8>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <SPI3_MspInit+0xa8>)
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <SPI3_MspInit+0xa8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <SPI3_MspInit+0xa8>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <SPI3_MspInit+0xa8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <SPI3_MspInit+0xa8>)
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80026b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80026c2:	2306      	movs	r3, #6
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4815      	ldr	r0, [pc, #84]	; (8002724 <SPI3_MspInit+0xac>)
 80026ce:	f002 f879 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80026d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80026e4:	2306      	movs	r3, #6
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <SPI3_MspInit+0xac>)
 80026f0:	f002 f868 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80026f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002706:	2306      	movs	r3, #6
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <SPI3_MspInit+0xac>)
 8002712:	f002 f857 	bl	80047c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	48000800 	.word	0x48000800

08002728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002732:	2003      	movs	r0, #3
 8002734:	f001 fd54 	bl	80041e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002738:	2000      	movs	r0, #0
 800273a:	f000 f80d 	bl	8002758 <HAL_InitTick>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	71fb      	strb	r3, [r7, #7]
 8002748:	e001      	b.n	800274e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800274a:	f7ff fd19 	bl	8002180 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800274e:	79fb      	ldrb	r3, [r7, #7]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_InitTick+0x6c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_InitTick+0x70>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_InitTick+0x6c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fd6f 	bl	8004266 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d809      	bhi.n	80027a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f001 fd2b 	bl	80041f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_InitTick+0x74>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e007      	b.n	80027b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e004      	b.n	80027b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e001      	b.n	80027b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000070 	.word	0x20000070
 80027c8:	20000068 	.word	0x20000068
 80027cc:	2000006c 	.word	0x2000006c

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000070 	.word	0x20000070
 80027f4:	2000056c 	.word	0x2000056c

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2000056c 	.word	0x2000056c

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff ffee 	bl	80027f8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffde 	bl	80027f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000070 	.word	0x20000070

08002858 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <LL_ADC_SetOffset+0x44>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	03fff000 	.word	0x03fff000

08002908 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3330      	adds	r3, #48	; 0x30
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	211f      	movs	r1, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 011f 	and.w	r1, r3, #31
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	431a      	orrs	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3314      	adds	r3, #20
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0e5b      	lsrs	r3, r3, #25
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2107      	movs	r1, #7
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0d1b      	lsrs	r3, r3, #20
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0318 	and.w	r3, r3, #24
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a64:	40d9      	lsrs	r1, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	400b      	ands	r3, r1
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	0007ffff 	.word	0x0007ffff

08002a88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 031f 	and.w	r3, r3, #31
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <LL_ADC_IsEnabled+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_ADC_IsEnabled+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d101      	bne.n	8002bce <LL_ADC_IsDisableOngoing+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_ADC_IsDisableOngoing+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf0:	f043 0204 	orr.w	r2, r3, #4
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e136      	b.n	8002f28 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7fe fef1 	bl	8001ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fef1 	bl	8002ac8 <LL_ADC_IsDeepPowerDownEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fed7 	bl	8002aa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff0c 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d115      	bne.n	8002d32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fef0 	bl	8002af0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d10:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <HAL_ADC_Init+0x290>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_ADC_Init+0x294>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d24:	e002      	b.n	8002d2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f9      	bne.n	8002d26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff feee 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff62 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002d68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 80cf 	bne.w	8002f16 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 80cb 	bne.w	8002f16 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d88:	f043 0202 	orr.w	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fefb 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da0:	4865      	ldr	r0, [pc, #404]	; (8002f38 <HAL_ADC_Init+0x298>)
 8002da2:	f7ff fef5 	bl	8002b90 <LL_ADC_IsEnabled>
 8002da6:	4604      	mov	r4, r0
 8002da8:	4864      	ldr	r0, [pc, #400]	; (8002f3c <HAL_ADC_Init+0x29c>)
 8002daa:	f7ff fef1 	bl	8002b90 <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	431c      	orrs	r4, r3
 8002db2:	4863      	ldr	r0, [pc, #396]	; (8002f40 <HAL_ADC_Init+0x2a0>)
 8002db4:	f7ff feec 	bl	8002b90 <LL_ADC_IsEnabled>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	485f      	ldr	r0, [pc, #380]	; (8002f44 <HAL_ADC_Init+0x2a4>)
 8002dc8:	f7ff fd46 	bl	8002858 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7e5b      	ldrb	r3, [r3, #25]
 8002dd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ddc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002de2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d106      	bne.n	8002e08 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	045b      	lsls	r3, r3, #17
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_ADC_Init+0x2a8>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fef5 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002e42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff16 	bl	8002c7a <LL_ADC_INJ_IsConversionOngoing>
 8002e4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d13d      	bne.n	8002ed2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d13a      	bne.n	8002ed2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e60:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e68:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e78:	f023 0302 	bic.w	r3, r3, #2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	430b      	orrs	r3, r1
 8002e84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d118      	bne.n	8002ec2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	e007      	b.n	8002ed2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f023 010f 	bic.w	r1, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	e007      	b.n	8002f04 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 020f 	bic.w	r2, r2, #15
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f023 0303 	bic.w	r3, r3, #3
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
 8002f14:	e007      	b.n	8002f26 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3724      	adds	r7, #36	; 0x24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	20000068 	.word	0x20000068
 8002f34:	053e2d63 	.word	0x053e2d63
 8002f38:	50040000 	.word	0x50040000
 8002f3c:	50040100 	.word	0x50040100
 8002f40:	50040200 	.word	0x50040200
 8002f44:	50040300 	.word	0x50040300
 8002f48:	fff0c007 	.word	0xfff0c007

08002f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f58:	4853      	ldr	r0, [pc, #332]	; (80030a8 <HAL_ADC_Start_DMA+0x15c>)
 8002f5a:	f7ff fd95 	bl	8002a88 <LL_ADC_GetMultimode>
 8002f5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fe61 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 8093 	bne.w	8003098 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x34>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e08e      	b.n	800309e <HAL_ADC_Start_DMA+0x152>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_ADC_Start_DMA+0x160>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d008      	beq.n	8002fa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d002      	beq.n	8002fa4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	d172      	bne.n	800308a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fdb9 	bl	8003b1c <ADC_Enable>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d165      	bne.n	8003080 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <HAL_ADC_Start_DMA+0x164>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d002      	beq.n	8002fd8 <HAL_ADC_Start_DMA+0x8c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_Start_DMA+0x8e>
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_ADC_Start_DMA+0x168>)
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d002      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f023 0206 	bic.w	r2, r3, #6
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58
 800300c:	e002      	b.n	8003014 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_ADC_Start_DMA+0x16c>)
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	4a26      	ldr	r2, [pc, #152]	; (80030bc <HAL_ADC_Start_DMA+0x170>)
 8003022:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <HAL_ADC_Start_DMA+0x174>)
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	221c      	movs	r2, #28
 8003032:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0210 	orr.w	r2, r2, #16
 800304a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3340      	adds	r3, #64	; 0x40
 8003066:	4619      	mov	r1, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f001 f9ce 	bl	800440c <HAL_DMA_Start_IT>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fdaf 	bl	8002bdc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800307e:	e00d      	b.n	800309c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003088:	e008      	b.n	800309c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003096:	e001      	b.n	800309c <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	50040300 	.word	0x50040300
 80030ac:	50040200 	.word	0x50040200
 80030b0:	50040100 	.word	0x50040100
 80030b4:	50040000 	.word	0x50040000
 80030b8:	08003ce7 	.word	0x08003ce7
 80030bc:	08003dbf 	.word	0x08003dbf
 80030c0:	08003ddb 	.word	0x08003ddb

080030c4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_ADC_Stop_DMA+0x16>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e051      	b.n	800317e <HAL_ADC_Stop_DMA+0xba>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030e2:	2103      	movs	r1, #3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fc5d 	bl	80039a4 <ADC_ConversionStop>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13f      	bne.n	8003174 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d10f      	bne.n	8003132 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f9d8 	bl	80044cc <HAL_DMA_Abort>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0210 	bic.w	r2, r2, #16
 8003140:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fd6d 	bl	8003c28 <ADC_Disable>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e002      	b.n	800315a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fd67 	bl	8003c28 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0b6      	sub	sp, #216	; 0xd8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x22>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e3c7      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7b2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd1a 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 83a8 	bne.w	8003950 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d824      	bhi.n	8003252 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	3b02      	subs	r3, #2
 800320e:	2b03      	cmp	r3, #3
 8003210:	d81b      	bhi.n	800324a <HAL_ADC_ConfigChannel+0x86>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_ADC_ConfigChannel+0x54>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	08003231 	.word	0x08003231
 8003220:	08003239 	.word	0x08003239
 8003224:	08003241 	.word	0x08003241
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	220c      	movs	r2, #12
 800322c:	605a      	str	r2, [r3, #4]
          break;
 800322e:	e011      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2212      	movs	r2, #18
 8003234:	605a      	str	r2, [r3, #4]
          break;
 8003236:	e00d      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2218      	movs	r2, #24
 800323c:	605a      	str	r2, [r3, #4]
          break;
 800323e:	e009      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	605a      	str	r2, [r3, #4]
          break;
 8003248:	e004      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2206      	movs	r2, #6
 800324e:	605a      	str	r2, [r3, #4]
          break;
 8003250:	e000      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003252:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f7ff fb95 	bl	8002990 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fcde 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003270:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fcfe 	bl	8002c7a <LL_ADC_INJ_IsConversionOngoing>
 800327e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 81a6 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 81a1 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7ff fba0 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00a      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6919      	ldr	r1, [r3, #16]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032da:	f7ff faf1 	bl	80028c0 <LL_ADC_SetOffset>
 80032de:	e17b      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fb0e 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_ADC_ConfigChannel+0x148>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fb03 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 021f 	and.w	r2, r3, #31
 800330a:	e01e      	b.n	800334a <HAL_ADC_ConfigChannel+0x186>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff faf8 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800332a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800332e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e004      	b.n	8003348 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800333e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x19e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	e018      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800337e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e004      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800338a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003394:	429a      	cmp	r2, r3
 8003396:	d106      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fac7 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff faab 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x20e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff faa0 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	e01e      	b.n	8003410 <HAL_ADC_ConfigChannel+0x24c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa95 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e004      	b.n	800340e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x264>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	e018      	b.n	800345a <HAL_ADC_ConfigChannel+0x296>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800343c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800345a:	429a      	cmp	r2, r3
 800345c:	d106      	bne.n	800346c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fa64 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fa48 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003478:	4603      	mov	r3, r0
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x2d4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fa3d 	bl	8002908 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	e01e      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x312>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fa32 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80034be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e004      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80034ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x32a>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	e016      	b.n	800351c <HAL_ADC_ConfigChannel+0x358>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e004      	b.n	800351c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800351c:	429a      	cmp	r2, r3
 800351e:	d106      	bne.n	800352e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fa03 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2103      	movs	r1, #3
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f9e7 	bl	8002908 <LL_ADC_GetOffsetChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_ADC_ConfigChannel+0x396>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2103      	movs	r1, #3
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f9dc 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003550:	4603      	mov	r3, r0
 8003552:	0e9b      	lsrs	r3, r3, #26
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	e017      	b.n	800358a <HAL_ADC_ConfigChannel+0x3c6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2103      	movs	r1, #3
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff f9d1 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003574:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x3de>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	e011      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x402>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e003      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d106      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2103      	movs	r1, #3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f9ae 	bl	8002934 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fad7 	bl	8002b90 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 813f 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7ff fa22 	bl	8002a40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a8e      	ldr	r2, [pc, #568]	; (800383c <HAL_ADC_ConfigChannel+0x678>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f040 8130 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x46c>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2b09      	cmp	r3, #9
 8003626:	bf94      	ite	ls
 8003628:	2301      	movls	r3, #1
 800362a:	2300      	movhi	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e019      	b.n	8003664 <HAL_ADC_ConfigChannel+0x4a0>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e003      	b.n	8003654 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800364c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b09      	cmp	r3, #9
 800365c:	bf94      	ite	ls
 800365e:	2301      	movls	r3, #1
 8003660:	2300      	movhi	r3, #0
 8003662:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003664:	2b00      	cmp	r3, #0
 8003666:	d079      	beq.n	800375c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x4c0>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	3301      	adds	r3, #1
 800367c:	069b      	lsls	r3, r3, #26
 800367e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003682:	e015      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x4ec>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003694:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	069b      	lsls	r3, r3, #26
 80036ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x50c>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	e017      	b.n	8003700 <HAL_ADC_ConfigChannel+0x53c>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e003      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	ea42 0103 	orr.w	r1, r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x562>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	3301      	adds	r3, #1
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	051b      	lsls	r3, r3, #20
 8003724:	e018      	b.n	8003758 <HAL_ADC_ConfigChannel+0x594>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e003      	b.n	800374a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	430b      	orrs	r3, r1
 800375a:	e080      	b.n	800385e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x5b4>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	3301      	adds	r3, #1
 8003770:	069b      	lsls	r3, r3, #26
 8003772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003776:	e015      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x5e0>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	069b      	lsls	r3, r3, #26
 80037a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x600>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	e017      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x630>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	61fb      	str	r3, [r7, #28]
  return result;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	ea42 0103 	orr.w	r1, r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x65c>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	3b1e      	subs	r3, #30
 8003818:	051b      	lsls	r3, r3, #20
 800381a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800381e:	e01d      	b.n	800385c <HAL_ADC_ConfigChannel+0x698>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	613b      	str	r3, [r7, #16]
  return result;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e005      	b.n	8003848 <HAL_ADC_ConfigChannel+0x684>
 800383c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f003 021f 	and.w	r2, r3, #31
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	3b1e      	subs	r3, #30
 8003856:	051b      	lsls	r3, r3, #20
 8003858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800385c:	430b      	orrs	r3, r1
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	6892      	ldr	r2, [r2, #8]
 8003862:	4619      	mov	r1, r3
 8003864:	f7ff f8c0 	bl	80029e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_ADC_ConfigChannel+0x7bc>)
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d07a      	beq.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003874:	4843      	ldr	r0, [pc, #268]	; (8003984 <HAL_ADC_ConfigChannel+0x7c0>)
 8003876:	f7ff f815 	bl	80028a4 <LL_ADC_GetCommonPathInternalCh>
 800387a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_ADC_ConfigChannel+0x7c4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d12c      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d126      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3c      	ldr	r2, [pc, #240]	; (800398c <HAL_ADC_ConfigChannel+0x7c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0x6e4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <HAL_ADC_ConfigChannel+0x7cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d15d      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b0:	4619      	mov	r1, r3
 80038b2:	4834      	ldr	r0, [pc, #208]	; (8003984 <HAL_ADC_ConfigChannel+0x7c0>)
 80038b4:	f7fe ffe3 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_ADC_ConfigChannel+0x7d0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	4a36      	ldr	r2, [pc, #216]	; (8003998 <HAL_ADC_ConfigChannel+0x7d4>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038d2:	e002      	b.n	80038da <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	e040      	b.n	8003964 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a2d      	ldr	r2, [pc, #180]	; (800399c <HAL_ADC_ConfigChannel+0x7d8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d118      	bne.n	800391e <HAL_ADC_ConfigChannel+0x75a>
 80038ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d112      	bne.n	800391e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a23      	ldr	r2, [pc, #140]	; (800398c <HAL_ADC_ConfigChannel+0x7c8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_ADC_ConfigChannel+0x748>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_ADC_ConfigChannel+0x7cc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d12d      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800390c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003914:	4619      	mov	r1, r3
 8003916:	481b      	ldr	r0, [pc, #108]	; (8003984 <HAL_ADC_ConfigChannel+0x7c0>)
 8003918:	f7fe ffb1 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800391c:	e024      	b.n	8003968 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d120      	bne.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800392c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11a      	bne.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_ADC_ConfigChannel+0x7c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d115      	bne.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003946:	4619      	mov	r1, r3
 8003948:	480e      	ldr	r0, [pc, #56]	; (8003984 <HAL_ADC_ConfigChannel+0x7c0>)
 800394a:	f7fe ff98 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
 800394e:	e00c      	b.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003962:	e002      	b.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003968:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003976:	4618      	mov	r0, r3
 8003978:	37d8      	adds	r7, #216	; 0xd8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	80080000 	.word	0x80080000
 8003984:	50040300 	.word	0x50040300
 8003988:	c7520000 	.word	0xc7520000
 800398c:	50040000 	.word	0x50040000
 8003990:	50040200 	.word	0x50040200
 8003994:	20000068 	.word	0x20000068
 8003998:	053e2d63 	.word	0x053e2d63
 800399c:	cb840000 	.word	0xcb840000
 80039a0:	80000001 	.word	0x80000001

080039a4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f936 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 80039c0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f957 	bl	8002c7a <LL_ADC_INJ_IsConversionOngoing>
 80039cc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8098 	beq.w	8003b0c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02a      	beq.n	8003a40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7e5b      	ldrb	r3, [r3, #25]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d126      	bne.n	8003a40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7e1b      	ldrb	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d122      	bne.n	8003a40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039fe:	e014      	b.n	8003a2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4a45      	ldr	r2, [pc, #276]	; (8003b18 <ADC_ConversionStop+0x174>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d90d      	bls.n	8003a24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0210 	orr.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e074      	b.n	8003b0e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d1e3      	bne.n	8003a00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d014      	beq.n	8003a70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f8ee 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f8ab 	bl	8002bb6 <LL_ADC_IsDisableOngoing>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f8ca 	bl	8002c04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d014      	beq.n	8003aa0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f8fd 	bl	8002c7a <LL_ADC_INJ_IsConversionOngoing>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f893 	bl	8002bb6 <LL_ADC_IsDisableOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff f8d9 	bl	8002c52 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d005      	beq.n	8003ab2 <ADC_ConversionStop+0x10e>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d105      	bne.n	8003ab8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003aac:	230c      	movs	r3, #12
 8003aae:	617b      	str	r3, [r7, #20]
        break;
 8003ab0:	e005      	b.n	8003abe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	617b      	str	r3, [r7, #20]
        break;
 8003ab6:	e002      	b.n	8003abe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ab8:	2304      	movs	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]
        break;
 8003abc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003abe:	f7fe fe9b 	bl	80027f8 <HAL_GetTick>
 8003ac2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ac4:	e01b      	b.n	8003afe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ac6:	f7fe fe97 	bl	80027f8 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d914      	bls.n	8003afe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f043 0210 	orr.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e007      	b.n	8003b0e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1dc      	bne.n	8003ac6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	a33fffff 	.word	0xa33fffff

08003b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f82f 	bl	8002b90 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d169      	bne.n	8003c0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <ADC_Enable+0xfc>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e055      	b.n	8003c0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe ffea 	bl	8002b40 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b6c:	482b      	ldr	r0, [pc, #172]	; (8003c1c <ADC_Enable+0x100>)
 8003b6e:	f7fe fe99 	bl	80028a4 <LL_ADC_GetCommonPathInternalCh>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b7c:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <ADC_Enable+0x104>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <ADC_Enable+0x108>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b96:	e002      	b.n	8003b9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fe28 	bl	80027f8 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003baa:	e028      	b.n	8003bfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe ffed 	bl	8002b90 <LL_ADC_IsEnabled>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe ffbd 	bl	8002b40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc6:	f7fe fe17 	bl	80027f8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d914      	bls.n	8003bfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d00d      	beq.n	8003bfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f043 0210 	orr.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e007      	b.n	8003c0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d1cf      	bne.n	8003bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	8000003f 	.word	0x8000003f
 8003c1c:	50040300 	.word	0x50040300
 8003c20:	20000068 	.word	0x20000068
 8003c24:	053e2d63 	.word	0x053e2d63

08003c28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe ffbe 	bl	8002bb6 <LL_ADC_IsDisableOngoing>
 8003c3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe ffa5 	bl	8002b90 <LL_ADC_IsEnabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d047      	beq.n	8003cdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d144      	bne.n	8003cdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030d 	and.w	r3, r3, #13
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10c      	bne.n	8003c7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ff7f 	bl	8002b68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c72:	f7fe fdc1 	bl	80027f8 <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c78:	e029      	b.n	8003cce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0210 	orr.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e023      	b.n	8003cde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c96:	f7fe fdaf 	bl	80027f8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d914      	bls.n	8003cce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e007      	b.n	8003cde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1dc      	bne.n	8003c96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d14b      	bne.n	8003d98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d021      	beq.n	8003d5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fe23 	bl	800296a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d032      	beq.n	8003d90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d12b      	bne.n	8003d90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d11f      	bne.n	8003d90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8003d5c:	e018      	b.n	8003d90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d111      	bne.n	8003d90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff f9f8 	bl	8003186 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d96:	e00e      	b.n	8003db6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fa02 	bl	80031ae <HAL_ADC_ErrorCallback>
}
 8003daa:	e004      	b.n	8003db6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff f9e4 	bl	800319a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff f9d4 	bl	80031ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <LL_ADC_IsEnabled>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <LL_ADC_IsEnabled+0x18>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <LL_ADC_IsEnabled+0x1a>
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d101      	bne.n	8003e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b09f      	sub	sp, #124	; 0x7c
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e093      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003e82:	2300      	movs	r3, #0
 8003e84:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003e86:	2300      	movs	r3, #0
 8003e88:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a47      	ldr	r2, [pc, #284]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d102      	bne.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e94:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	e001      	b.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e072      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ffb8 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003ec4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ffb2 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d154      	bne.n	8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d151      	bne.n	8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003edc:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ede:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02c      	beq.n	8003f42 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003efa:	035b      	lsls	r3, r3, #13
 8003efc:	430b      	orrs	r3, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f04:	4829      	ldr	r0, [pc, #164]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f06:	f7ff ff82 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4828      	ldr	r0, [pc, #160]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f0e:	f7ff ff7e 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	431c      	orrs	r4, r3
 8003f16:	4828      	ldr	r0, [pc, #160]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f18:	f7ff ff79 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4323      	orrs	r3, r4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d137      	bne.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	6811      	ldr	r1, [r2, #0]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	6892      	ldr	r2, [r2, #8]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f40:	e028      	b.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f4e:	4817      	ldr	r0, [pc, #92]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f50:	f7ff ff5d 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f54:	4604      	mov	r4, r0
 8003f56:	4816      	ldr	r0, [pc, #88]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f58:	f7ff ff59 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	431c      	orrs	r4, r3
 8003f60:	4815      	ldr	r0, [pc, #84]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f62:	f7ff ff54 	bl	8003e0e <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4323      	orrs	r3, r4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d112      	bne.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f76:	f023 030f 	bic.w	r3, r3, #15
 8003f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f7e:	e009      	b.n	8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f92:	e000      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	377c      	adds	r7, #124	; 0x7c
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd90      	pop	{r4, r7, pc}
 8003faa:	bf00      	nop
 8003fac:	50040000 	.word	0x50040000
 8003fb0:	50040100 	.word	0x50040100
 8003fb4:	50040300 	.word	0x50040300
 8003fb8:	50040200 	.word	0x50040200

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db12      	blt.n	8004094 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	490a      	ldr	r1, [pc, #40]	; (80040a0 <__NVIC_DisableIRQ+0x44>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	3320      	adds	r3, #32
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004088:	f3bf 8f4f 	dsb	sy
}
 800408c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800408e:	f3bf 8f6f 	isb	sy
}
 8004092:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0c      	blt.n	80040d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4907      	ldr	r1, [pc, #28]	; (80040dc <__NVIC_ClearPendingIRQ+0x38>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	3360      	adds	r3, #96	; 0x60
 80040cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0a      	blt.n	800410a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	490c      	ldr	r1, [pc, #48]	; (800412c <__NVIC_SetPriority+0x4c>)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	440b      	add	r3, r1
 8004104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004108:	e00a      	b.n	8004120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4908      	ldr	r1, [pc, #32]	; (8004130 <__NVIC_SetPriority+0x50>)
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3b04      	subs	r3, #4
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	440b      	add	r3, r1
 800411e:	761a      	strb	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000e100 	.word	0xe000e100
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf28      	it	cs
 8004152:	2304      	movcs	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3304      	adds	r3, #4
 800415a:	2b06      	cmp	r3, #6
 800415c:	d902      	bls.n	8004164 <NVIC_EncodePriority+0x30>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b03      	subs	r3, #3
 8004162:	e000      	b.n	8004166 <NVIC_EncodePriority+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	401a      	ands	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	43d9      	mvns	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	4313      	orrs	r3, r2
         );
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ac:	d301      	bcc.n	80041b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00f      	b.n	80041d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <SysTick_Config+0x40>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ba:	210f      	movs	r1, #15
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f7ff ff8e 	bl	80040e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SysTick_Config+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <SysTick_Config+0x40>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000e010 	.word	0xe000e010

080041e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fee7 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4603      	mov	r3, r0
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004208:	f7ff fefc 	bl	8004004 <__NVIC_GetPriorityGrouping>
 800420c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff8e 	bl	8004134 <NVIC_EncodePriority>
 8004218:	4602      	mov	r2, r0
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff5d 	bl	80040e0 <__NVIC_SetPriority>
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff feef 	bl	8004020 <__NVIC_EnableIRQ>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff feff 	bl	800405c <__NVIC_DisableIRQ>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff94 	bl	800419c <SysTick_Config>
 8004274:	4603      	mov	r3, r0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff09 	bl	80040a4 <__NVIC_ClearPendingIRQ>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e098      	b.n	80043e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b4d      	ldr	r3, [pc, #308]	; (80043ec <HAL_DMA_Init+0x150>)
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d80f      	bhi.n	80042da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <HAL_DMA_Init+0x154>)
 80042c2:	4413      	add	r3, r2
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_DMA_Init+0x158>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	009a      	lsls	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a48      	ldr	r2, [pc, #288]	; (80043f8 <HAL_DMA_Init+0x15c>)
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
 80042d8:	e00e      	b.n	80042f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	4b46      	ldr	r3, [pc, #280]	; (80043fc <HAL_DMA_Init+0x160>)
 80042e2:	4413      	add	r3, r2
 80042e4:	4a43      	ldr	r2, [pc, #268]	; (80043f4 <HAL_DMA_Init+0x158>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	009a      	lsls	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_DMA_Init+0x164>)
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800431c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004352:	d039      	beq.n	80043c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <HAL_DMA_Init+0x15c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d11a      	bne.n	8004394 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_DMA_Init+0x168>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f003 031c 	and.w	r3, r3, #28
 800436a:	210f      	movs	r1, #15
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	4924      	ldr	r1, [pc, #144]	; (8004404 <HAL_DMA_Init+0x168>)
 8004374:	4013      	ands	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_DMA_Init+0x168>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f003 031c 	and.w	r3, r3, #28
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	491d      	ldr	r1, [pc, #116]	; (8004404 <HAL_DMA_Init+0x168>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
 8004392:	e019      	b.n	80043c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <HAL_DMA_Init+0x16c>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 031c 	and.w	r3, r3, #28
 80043a0:	210f      	movs	r1, #15
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	4917      	ldr	r1, [pc, #92]	; (8004408 <HAL_DMA_Init+0x16c>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_DMA_Init+0x16c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f003 031c 	and.w	r3, r3, #28
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	4911      	ldr	r1, [pc, #68]	; (8004408 <HAL_DMA_Init+0x16c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40020407 	.word	0x40020407
 80043f0:	bffdfff8 	.word	0xbffdfff8
 80043f4:	cccccccd 	.word	0xcccccccd
 80043f8:	40020000 	.word	0x40020000
 80043fc:	bffdfbf8 	.word	0xbffdfbf8
 8004400:	40020400 	.word	0x40020400
 8004404:	400200a8 	.word	0x400200a8
 8004408:	400204a8 	.word	0x400204a8

0800440c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_DMA_Start_IT+0x20>
 8004428:	2302      	movs	r3, #2
 800442a:	e04b      	b.n	80044c4 <HAL_DMA_Start_IT+0xb8>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d13a      	bne.n	80044b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f91e 	bl	80046a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 020e 	orr.w	r2, r2, #14
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e00f      	b.n	80044a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0204 	bic.w	r2, r2, #4
 8004492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 020a 	orr.w	r2, r2, #10
 80044a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e005      	b.n	80044c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044be:	2302      	movs	r3, #2
 80044c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d008      	beq.n	80044f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e022      	b.n	800453c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 020e 	bic.w	r2, r2, #14
 8004504:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f003 021c 	and.w	r2, r3, #28
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f003 031c 	and.w	r3, r3, #28
 8004568:	2204      	movs	r2, #4
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d026      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x7a>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d021      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f003 021c 	and.w	r2, r3, #28
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2104      	movs	r1, #4
 80045aa:	fa01 f202 	lsl.w	r2, r1, r2
 80045ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d071      	beq.n	800469c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80045c0:	e06c      	b.n	800469c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f003 031c 	and.w	r3, r3, #28
 80045ca:	2202      	movs	r2, #2
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02e      	beq.n	8004634 <HAL_DMA_IRQHandler+0xec>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d029      	beq.n	8004634 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 020a 	bic.w	r2, r2, #10
 80045fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f003 021c 	and.w	r2, r3, #28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2102      	movs	r1, #2
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d038      	beq.n	800469c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004632:	e033      	b.n	800469c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f003 031c 	and.w	r3, r3, #28
 800463c:	2208      	movs	r2, #8
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02a      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d025      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 020e 	bic.w	r2, r2, #14
 8004660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f003 021c 	and.w	r2, r3, #28
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f202 	lsl.w	r2, r1, r2
 8004674:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800469c:	bf00      	nop
 800469e:	bf00      	nop
}
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f003 021c 	and.w	r2, r3, #28
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d108      	bne.n	80046ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046e8:	e007      	b.n	80046fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	460b      	mov	r3, r1
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	605a      	str	r2, [r3, #4]
      break;
 8004724:	e002      	b.n	800472c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	bf00      	nop
  }

  return status;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e003      	b.n	8004756 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004754:	2300      	movs	r3, #0
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_EXTI_IRQHandler+0x5c>)
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4798      	blx	r3
    }
  }
}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40010414 	.word	0x40010414

080047c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d2:	e17f      	b.n	8004ad4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8171 	beq.w	8004ace <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d005      	beq.n	8004804 <HAL_GPIO_Init+0x40>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d130      	bne.n	8004866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800483a:	2201      	movs	r2, #1
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 0201 	and.w	r2, r3, #1
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b03      	cmp	r3, #3
 8004870:	d118      	bne.n	80048a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004878:	2201      	movs	r2, #1
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0201 	and.w	r2, r3, #1
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d017      	beq.n	80048e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	2203      	movs	r2, #3
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d123      	bne.n	8004934 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	08da      	lsrs	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3208      	adds	r2, #8
 80048f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	220f      	movs	r2, #15
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	08da      	lsrs	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3208      	adds	r2, #8
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0203 	and.w	r2, r3, #3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80ac 	beq.w	8004ace <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <HAL_GPIO_Init+0x330>)
 8004978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497a:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <HAL_GPIO_Init+0x330>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6613      	str	r3, [r2, #96]	; 0x60
 8004982:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <HAL_GPIO_Init+0x330>)
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800498e:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_GPIO_Init+0x334>)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	3302      	adds	r3, #2
 8004996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	220f      	movs	r2, #15
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049b8:	d025      	beq.n	8004a06 <HAL_GPIO_Init+0x242>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	; (8004afc <HAL_GPIO_Init+0x338>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <HAL_GPIO_Init+0x23e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4e      	ldr	r2, [pc, #312]	; (8004b00 <HAL_GPIO_Init+0x33c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d019      	beq.n	80049fe <HAL_GPIO_Init+0x23a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4d      	ldr	r2, [pc, #308]	; (8004b04 <HAL_GPIO_Init+0x340>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_GPIO_Init+0x236>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4c      	ldr	r2, [pc, #304]	; (8004b08 <HAL_GPIO_Init+0x344>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <HAL_GPIO_Init+0x232>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4b      	ldr	r2, [pc, #300]	; (8004b0c <HAL_GPIO_Init+0x348>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <HAL_GPIO_Init+0x22e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4a      	ldr	r2, [pc, #296]	; (8004b10 <HAL_GPIO_Init+0x34c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_GPIO_Init+0x22a>
 80049ea:	2306      	movs	r3, #6
 80049ec:	e00c      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 80049ee:	2307      	movs	r3, #7
 80049f0:	e00a      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 80049f2:	2305      	movs	r3, #5
 80049f4:	e008      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 80049f6:	2304      	movs	r3, #4
 80049f8:	e006      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 80049fa:	2303      	movs	r3, #3
 80049fc:	e004      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e002      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_GPIO_Init+0x244>
 8004a06:	2300      	movs	r3, #0
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	f002 0203 	and.w	r2, r2, #3
 8004a0e:	0092      	lsls	r2, r2, #2
 8004a10:	4093      	lsls	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a18:	4937      	ldr	r1, [pc, #220]	; (8004af8 <HAL_GPIO_Init+0x334>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a26:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a50:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a74:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ac8:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <HAL_GPIO_Init+0x350>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f47f ae78 	bne.w	80047d4 <HAL_GPIO_Init+0x10>
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40010000 	.word	0x40010000
 8004afc:	48000400 	.word	0x48000400
 8004b00:	48000800 	.word	0x48000800
 8004b04:	48000c00 	.word	0x48000c00
 8004b08:	48001000 	.word	0x48001000
 8004b0c:	48001400 	.word	0x48001400
 8004b10:	48001800 	.word	0x48001800
 8004b14:	40010400 	.word	0x40010400

08004b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b26:	e0cd      	b.n	8004cc4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b28:	2201      	movs	r2, #1
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80c0 	beq.w	8004cbe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b3e:	4a68      	ldr	r2, [pc, #416]	; (8004ce0 <HAL_GPIO_DeInit+0x1c8>)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3302      	adds	r3, #2
 8004b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b66:	d025      	beq.n	8004bb4 <HAL_GPIO_DeInit+0x9c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a5e      	ldr	r2, [pc, #376]	; (8004ce4 <HAL_GPIO_DeInit+0x1cc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01f      	beq.n	8004bb0 <HAL_GPIO_DeInit+0x98>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a5d      	ldr	r2, [pc, #372]	; (8004ce8 <HAL_GPIO_DeInit+0x1d0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d019      	beq.n	8004bac <HAL_GPIO_DeInit+0x94>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <HAL_GPIO_DeInit+0x1d4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_GPIO_DeInit+0x90>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <HAL_GPIO_DeInit+0x1d8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00d      	beq.n	8004ba4 <HAL_GPIO_DeInit+0x8c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a5a      	ldr	r2, [pc, #360]	; (8004cf4 <HAL_GPIO_DeInit+0x1dc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_GPIO_DeInit+0x88>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a59      	ldr	r2, [pc, #356]	; (8004cf8 <HAL_GPIO_DeInit+0x1e0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_GPIO_DeInit+0x84>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	e00c      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	e00a      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	e008      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	e006      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e004      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e002      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_GPIO_DeInit+0x9e>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	f002 0203 	and.w	r2, r2, #3
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	4093      	lsls	r3, r2
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d132      	bne.n	8004c2c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004bc6:	4b4d      	ldr	r3, [pc, #308]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	494b      	ldr	r1, [pc, #300]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004bd4:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	4947      	ldr	r1, [pc, #284]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004be2:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	4944      	ldr	r1, [pc, #272]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004bf0:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	4940      	ldr	r1, [pc, #256]	; (8004cfc <HAL_GPIO_DeInit+0x1e4>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c0e:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <HAL_GPIO_DeInit+0x1c8>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	4830      	ldr	r0, [pc, #192]	; (8004ce0 <HAL_GPIO_DeInit+0x1c8>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	400a      	ands	r2, r1
 8004c26:	3302      	adds	r3, #2
 8004c28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	2103      	movs	r1, #3
 8004c36:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	08da      	lsrs	r2, r3, #3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3208      	adds	r2, #8
 8004c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	220f      	movs	r2, #15
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	08d2      	lsrs	r2, r2, #3
 8004c60:	4019      	ands	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3208      	adds	r2, #8
 8004c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2103      	movs	r1, #3
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	2101      	movs	r1, #1
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	2101      	movs	r1, #1
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	401a      	ands	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f47f af2b 	bne.w	8004b28 <HAL_GPIO_DeInit+0x10>
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	48000400 	.word	0x48000400
 8004ce8:	48000800 	.word	0x48000800
 8004cec:	48000c00 	.word	0x48000c00
 8004cf0:	48001000 	.word	0x48001000
 8004cf4:	48001400 	.word	0x48001400
 8004cf8:	48001800 	.word	0x48001800
 8004cfc:	40010400 	.word	0x40010400

08004d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
 8004d1c:	e001      	b.n	8004d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d40:	787b      	ldrb	r3, [r7, #1]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d4c:	e002      	b.n	8004d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40007000 	.word	0x40007000

08004d80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40007000 	.word	0x40007000

08004d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004daa:	d130      	bne.n	8004e0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dac:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d038      	beq.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2232      	movs	r2, #50	; 0x32
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	0c9b      	lsrs	r3, r3, #18
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de0:	e002      	b.n	8004de8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d102      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f2      	bne.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d110      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e00f      	b.n	8004e2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	d007      	beq.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e24:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	20000068 	.word	0x20000068
 8004e44:	431bde83 	.word	0x431bde83

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e3ca      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b97      	ldr	r3, [pc, #604]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4b94      	ldr	r3, [pc, #592]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80e4 	beq.w	8005044 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_RCC_OscConfig+0x4a>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	f040 808b 	bne.w	8004fa0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	f040 8087 	bne.w	8004fa0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e92:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_RCC_OscConfig+0x62>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e3a2      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x7c>
 8004eba:	4b7f      	ldr	r3, [pc, #508]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCC_OscConfig+0x88>
 8004ec4:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d223      	bcs.n	8004f1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fd55 	bl	8005988 <RCC_SetFlashLatencyFromMSIRange>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e383      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee8:	4b73      	ldr	r3, [pc, #460]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a72      	ldr	r2, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004eee:	f043 0308 	orr.w	r3, r3, #8
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	496d      	ldr	r1, [pc, #436]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f06:	4b6c      	ldr	r3, [pc, #432]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	4968      	ldr	r1, [pc, #416]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
 8004f1a:	e025      	b.n	8004f68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f1c:	4b66      	ldr	r3, [pc, #408]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a65      	ldr	r2, [pc, #404]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f22:	f043 0308 	orr.w	r3, r3, #8
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b63      	ldr	r3, [pc, #396]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4960      	ldr	r1, [pc, #384]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f3a:	4b5f      	ldr	r3, [pc, #380]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	495b      	ldr	r1, [pc, #364]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fd15 	bl	8005988 <RCC_SetFlashLatencyFromMSIRange>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e343      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f68:	f000 fc4a 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b52      	ldr	r3, [pc, #328]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	4950      	ldr	r1, [pc, #320]	; (80050bc <HAL_RCC_OscConfig+0x274>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	4a4e      	ldr	r2, [pc, #312]	; (80050c0 <HAL_RCC_OscConfig+0x278>)
 8004f86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f88:	4b4e      	ldr	r3, [pc, #312]	; (80050c4 <HAL_RCC_OscConfig+0x27c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fbe3 	bl	8002758 <HAL_InitTick>
 8004f92:	4603      	mov	r3, r0
 8004f94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d052      	beq.n	8005042 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	e327      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d032      	beq.n	800500e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fa8:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a42      	ldr	r2, [pc, #264]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fb4:	f7fd fc20 	bl	80027f8 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fbc:	f7fd fc1c 	bl	80027f8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e310      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fce:	4b3a      	ldr	r3, [pc, #232]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fda:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a36      	ldr	r2, [pc, #216]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fe0:	f043 0308 	orr.w	r3, r3, #8
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	4931      	ldr	r1, [pc, #196]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff8:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	492c      	ldr	r1, [pc, #176]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
 800500c:	e01a      	b.n	8005044 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800501a:	f7fd fbed 	bl	80027f8 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005022:	f7fd fbe9 	bl	80027f8 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e2dd      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005034:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCC_OscConfig+0x1da>
 8005040:	e000      	b.n	8005044 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005042:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d074      	beq.n	800513a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x21a>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d10e      	bne.n	800507a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d10b      	bne.n	800507a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d064      	beq.n	8005138 <HAL_RCC_OscConfig+0x2f0>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d160      	bne.n	8005138 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e2ba      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005082:	d106      	bne.n	8005092 <HAL_RCC_OscConfig+0x24a>
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 800508a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e026      	b.n	80050e0 <HAL_RCC_OscConfig+0x298>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800509a:	d115      	bne.n	80050c8 <HAL_RCC_OscConfig+0x280>
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 80050a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a02      	ldr	r2, [pc, #8]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e014      	b.n	80050e0 <HAL_RCC_OscConfig+0x298>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	0800a3ac 	.word	0x0800a3ac
 80050c0:	20000068 	.word	0x20000068
 80050c4:	2000006c 	.word	0x2000006c
 80050c8:	4ba0      	ldr	r3, [pc, #640]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a9f      	ldr	r2, [pc, #636]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b9d      	ldr	r3, [pc, #628]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a9c      	ldr	r2, [pc, #624]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd fb86 	bl	80027f8 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fd fb82 	bl	80027f8 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e276      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005102:	4b92      	ldr	r3, [pc, #584]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x2a8>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fd fb72 	bl	80027f8 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fd fb6e 	bl	80027f8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e262      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800512a:	4b88      	ldr	r3, [pc, #544]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x2d0>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d060      	beq.n	8005208 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d005      	beq.n	8005158 <HAL_RCC_OscConfig+0x310>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d119      	bne.n	8005186 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d116      	bne.n	8005186 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005158:	4b7c      	ldr	r3, [pc, #496]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCC_OscConfig+0x328>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e23f      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005170:	4b76      	ldr	r3, [pc, #472]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	4973      	ldr	r1, [pc, #460]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005184:	e040      	b.n	8005208 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d023      	beq.n	80051d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518e:	4b6f      	ldr	r3, [pc, #444]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6e      	ldr	r2, [pc, #440]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fd fb2d 	bl	80027f8 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fd fb29 	bl	80027f8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e21d      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b4:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b62      	ldr	r3, [pc, #392]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	495f      	ldr	r1, [pc, #380]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
 80051d4:	e018      	b.n	8005208 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d6:	4b5d      	ldr	r3, [pc, #372]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5c      	ldr	r2, [pc, #368]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fd fb09 	bl	80027f8 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ea:	f7fd fb05 	bl	80027f8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e1f9      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051fc:	4b53      	ldr	r3, [pc, #332]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d03c      	beq.n	800528e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01c      	beq.n	8005256 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521c:	4b4b      	ldr	r3, [pc, #300]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005222:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fd fae4 	bl	80027f8 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005234:	f7fd fae0 	bl	80027f8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e1d4      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ef      	beq.n	8005234 <HAL_RCC_OscConfig+0x3ec>
 8005254:	e01b      	b.n	800528e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525c:	4a3b      	ldr	r2, [pc, #236]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd fac7 	bl	80027f8 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526e:	f7fd fac3 	bl	80027f8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1b7      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ef      	bne.n	800526e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80a6 	beq.w	80053e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	4a26      	ldr	r2, [pc, #152]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_OscConfig+0x504>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c8:	4b21      	ldr	r3, [pc, #132]	; (8005350 <HAL_RCC_OscConfig+0x508>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d118      	bne.n	8005306 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d4:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <HAL_RCC_OscConfig+0x508>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <HAL_RCC_OscConfig+0x508>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e0:	f7fd fa8a 	bl	80027f8 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e8:	f7fd fa86 	bl	80027f8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e17a      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <HAL_RCC_OscConfig+0x508>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d108      	bne.n	8005320 <HAL_RCC_OscConfig+0x4d8>
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531e:	e029      	b.n	8005374 <HAL_RCC_OscConfig+0x52c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b05      	cmp	r3, #5
 8005326:	d115      	bne.n	8005354 <HAL_RCC_OscConfig+0x50c>
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005338:	4b04      	ldr	r3, [pc, #16]	; (800534c <HAL_RCC_OscConfig+0x504>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	4a03      	ldr	r2, [pc, #12]	; (800534c <HAL_RCC_OscConfig+0x504>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005348:	e014      	b.n	8005374 <HAL_RCC_OscConfig+0x52c>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
 8005354:	4b9c      	ldr	r3, [pc, #624]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	4a9b      	ldr	r2, [pc, #620]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005364:	4b98      	ldr	r3, [pc, #608]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	4a97      	ldr	r2, [pc, #604]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d016      	beq.n	80053aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fd fa3c 	bl	80027f8 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fd fa38 	bl	80027f8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e12a      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539a:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ed      	beq.n	8005384 <HAL_RCC_OscConfig+0x53c>
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fd fa25 	bl	80027f8 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd fa21 	bl	80027f8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e113      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c8:	4b7f      	ldr	r3, [pc, #508]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ed      	bne.n	80053b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	7ffb      	ldrb	r3, [r7, #31]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	4a79      	ldr	r2, [pc, #484]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80fe 	beq.w	80055ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	f040 80d0 	bne.w	800559c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053fc:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 0203 	and.w	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	429a      	cmp	r2, r3
 800540e:	d130      	bne.n	8005472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	3b01      	subs	r3, #1
 800541c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d127      	bne.n	8005472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d11f      	bne.n	8005472 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800543c:	2a07      	cmp	r2, #7
 800543e:	bf14      	ite	ne
 8005440:	2201      	movne	r2, #1
 8005442:	2200      	moveq	r2, #0
 8005444:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005446:	4293      	cmp	r3, r2
 8005448:	d113      	bne.n	8005472 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	3b01      	subs	r3, #1
 8005458:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d109      	bne.n	8005472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d06e      	beq.n	8005550 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d069      	beq.n	800554c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005478:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0ad      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a4b      	ldr	r2, [pc, #300]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800549a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054a0:	f7fd f9aa 	bl	80027f8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a8:	f7fd f9a6 	bl	80027f8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e09a      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ba:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c6:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	4b40      	ldr	r3, [pc, #256]	; (80055cc <HAL_RCC_OscConfig+0x784>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054d6:	3a01      	subs	r2, #1
 80054d8:	0112      	lsls	r2, r2, #4
 80054da:	4311      	orrs	r1, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054e0:	0212      	lsls	r2, r2, #8
 80054e2:	4311      	orrs	r1, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054e8:	0852      	lsrs	r2, r2, #1
 80054ea:	3a01      	subs	r2, #1
 80054ec:	0552      	lsls	r2, r2, #21
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054f4:	0852      	lsrs	r2, r2, #1
 80054f6:	3a01      	subs	r2, #1
 80054f8:	0652      	lsls	r2, r2, #25
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005500:	0912      	lsrs	r2, r2, #4
 8005502:	0452      	lsls	r2, r2, #17
 8005504:	430a      	orrs	r2, r1
 8005506:	4930      	ldr	r1, [pc, #192]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005508:	4313      	orrs	r3, r2
 800550a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800550c:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2d      	ldr	r2, [pc, #180]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005516:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800551e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005524:	f7fd f968 	bl	80027f8 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552c:	f7fd f964 	bl	80027f8 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e058      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800554a:	e050      	b.n	80055ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e04f      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005550:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d148      	bne.n	80055ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005566:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 800556e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005574:	f7fd f940 	bl	80027f8 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd f93c 	bl	80027f8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e030      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x734>
 800559a:	e028      	b.n	80055ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d023      	beq.n	80055ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <HAL_RCC_OscConfig+0x780>)
 80055a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd f923 	bl	80027f8 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b4:	e00c      	b.n	80055d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b6:	f7fd f91f 	bl	80027f8 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d905      	bls.n	80055d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e013      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
 80055c8:	40021000 	.word	0x40021000
 80055cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_OscConfig+0x7b0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ec      	bne.n	80055b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_RCC_OscConfig+0x7b0>)
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4905      	ldr	r1, [pc, #20]	; (80055f8 <HAL_RCC_OscConfig+0x7b0>)
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_OscConfig+0x7b4>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60cb      	str	r3, [r1, #12]
 80055e8:	e001      	b.n	80055ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	feeefffc 	.word	0xfeeefffc

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0e7      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b75      	ldr	r3, [pc, #468]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d910      	bls.n	8005644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b72      	ldr	r3, [pc, #456]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 0207 	bic.w	r2, r3, #7
 800562a:	4970      	ldr	r1, [pc, #448]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b6e      	ldr	r3, [pc, #440]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0cf      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4b66      	ldr	r3, [pc, #408]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565c:	429a      	cmp	r2, r3
 800565e:	d908      	bls.n	8005672 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b63      	ldr	r3, [pc, #396]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4960      	ldr	r1, [pc, #384]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04c      	beq.n	8005718 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005686:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d121      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0a6      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569e:	4b54      	ldr	r3, [pc, #336]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e09a      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b6:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e08e      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c6:	4b4a      	ldr	r3, [pc, #296]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e086      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4943      	ldr	r1, [pc, #268]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e8:	f7fd f886 	bl	80027f8 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fd f882 	bl	80027f8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e06e      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	4b3a      	ldr	r3, [pc, #232]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 020c 	and.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d1eb      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005730:	429a      	cmp	r2, r3
 8005732:	d208      	bcs.n	8005746 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b2e      	ldr	r3, [pc, #184]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	492b      	ldr	r1, [pc, #172]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d210      	bcs.n	8005776 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 0207 	bic.w	r2, r3, #7
 800575c:	4923      	ldr	r1, [pc, #140]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005764:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCC_ClockConfig+0x1ec>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d001      	beq.n	8005776 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e036      	b.n	80057e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005782:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	4918      	ldr	r1, [pc, #96]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057a0:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4910      	ldr	r1, [pc, #64]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057b4:	f000 f824 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 80057b8:	4602      	mov	r2, r0
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <HAL_RCC_ClockConfig+0x1f0>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	490b      	ldr	r1, [pc, #44]	; (80057f4 <HAL_RCC_ClockConfig+0x1f4>)
 80057c6:	5ccb      	ldrb	r3, [r1, r3]
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <HAL_RCC_ClockConfig+0x1f8>)
 80057d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RCC_ClockConfig+0x1fc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fc ffbd 	bl	8002758 <HAL_InitTick>
 80057de:	4603      	mov	r3, r0
 80057e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80057e2:	7afb      	ldrb	r3, [r7, #11]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40022000 	.word	0x40022000
 80057f0:	40021000 	.word	0x40021000
 80057f4:	0800a3ac 	.word	0x0800a3ac
 80057f8:	20000068 	.word	0x20000068
 80057fc:	2000006c 	.word	0x2000006c

08005800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580e:	4b3e      	ldr	r3, [pc, #248]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005818:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x34>
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b0c      	cmp	r3, #12
 800582c:	d121      	bne.n	8005872 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d11e      	bne.n	8005872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005834:	4b34      	ldr	r3, [pc, #208]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d107      	bne.n	8005850 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 8005842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e005      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005850:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800585c:	4a2b      	ldr	r2, [pc, #172]	; (800590c <HAL_RCC_GetSysClockFreq+0x10c>)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005864:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d102      	bne.n	800587e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_RCC_GetSysClockFreq+0x110>)
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e004      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d101      	bne.n	8005888 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_RCC_GetSysClockFreq+0x114>)
 8005886:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b0c      	cmp	r3, #12
 800588c:	d134      	bne.n	80058f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800588e:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d003      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d003      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0xac>
 80058a4:	e005      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <HAL_RCC_GetSysClockFreq+0x110>)
 80058a8:	617b      	str	r3, [r7, #20]
      break;
 80058aa:	e005      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_RCC_GetSysClockFreq+0x114>)
 80058ae:	617b      	str	r3, [r7, #20]
      break;
 80058b0:	e002      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	617b      	str	r3, [r7, #20]
      break;
 80058b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058b8:	4b13      	ldr	r3, [pc, #76]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	3301      	adds	r3, #1
 80058c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	fb03 f202 	mul.w	r2, r3, r2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	0e5b      	lsrs	r3, r3, #25
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	3301      	adds	r3, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058f8:	69bb      	ldr	r3, [r7, #24]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
 800590c:	0800a3c4 	.word	0x0800a3c4
 8005910:	00f42400 	.word	0x00f42400
 8005914:	007a1200 	.word	0x007a1200

08005918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000068 	.word	0x20000068

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	0800a3bc 	.word	0x0800a3bc

0800595c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005960:	f7ff ffda 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0adb      	lsrs	r3, r3, #11
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4904      	ldr	r1, [pc, #16]	; (8005984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	0800a3bc 	.word	0x0800a3bc

08005988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005994:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059a0:	f7ff f9ee 	bl	8004d80 <HAL_PWREx_GetVoltageRange>
 80059a4:	6178      	str	r0, [r7, #20]
 80059a6:	e014      	b.n	80059d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6593      	str	r3, [r2, #88]	; 0x58
 80059b4:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059c0:	f7ff f9de 	bl	8004d80 <HAL_PWREx_GetVoltageRange>
 80059c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d10b      	bne.n	80059f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b80      	cmp	r3, #128	; 0x80
 80059de:	d919      	bls.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2ba0      	cmp	r3, #160	; 0xa0
 80059e4:	d902      	bls.n	80059ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059e6:	2302      	movs	r3, #2
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e013      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059ec:	2301      	movs	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e010      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	d902      	bls.n	80059fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059f8:	2303      	movs	r3, #3
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e00a      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d102      	bne.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a04:	2302      	movs	r3, #2
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e004      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b70      	cmp	r3, #112	; 0x70
 8005a0e:	d101      	bne.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a10:	2301      	movs	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 0207 	bic.w	r2, r3, #7
 8005a1c:	4909      	ldr	r1, [pc, #36]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40022000 	.word	0x40022000

08005a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a50:	2300      	movs	r3, #0
 8005a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a54:	2300      	movs	r3, #0
 8005a56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d041      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a6c:	d02a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a72:	d824      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a78:	d008      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a7e:	d81e      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a88:	d010      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a8a:	e018      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a8c:	4b86      	ldr	r3, [pc, #536]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a85      	ldr	r2, [pc, #532]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a98:	e015      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 facb 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aaa:	e00c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3320      	adds	r3, #32
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fbb6 	bl	8006224 <RCCEx_PLLSAI2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005acc:	4b76      	ldr	r3, [pc, #472]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ada:	4973      	ldr	r1, [pc, #460]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ae2:	e001      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d041      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005afc:	d02a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005afe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b02:	d824      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b08:	d008      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b0e:	d81e      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b18:	d010      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b1a:	e018      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b1c:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a61      	ldr	r2, [pc, #388]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b28:	e015      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fa83 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b3a:	e00c      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3320      	adds	r3, #32
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb6e 	bl	8006224 <RCCEx_PLLSAI2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	74fb      	strb	r3, [r7, #19]
      break;
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b5c:	4b52      	ldr	r3, [pc, #328]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6a:	494f      	ldr	r1, [pc, #316]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b72:	e001      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80a0 	beq.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b8a:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00d      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba0:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6593      	str	r3, [r2, #88]	; 0x58
 8005bac:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bbc:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bc8:	f7fc fe16 	bl	80027f8 <HAL_GetTick>
 8005bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bce:	e009      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd0:	f7fc fe12 	bl	80027f8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d902      	bls.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	74fb      	strb	r3, [r7, #19]
        break;
 8005be2:	e005      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005be4:	4b31      	ldr	r3, [pc, #196]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ef      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d15c      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bf6:	4b2c      	ldr	r3, [pc, #176]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01f      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d019      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c30:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c40:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fc fdd1 	bl	80027f8 <HAL_GetTick>
 8005c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c58:	e00b      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fc fdcd 	bl	80027f8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d902      	bls.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c70:	e006      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ec      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c80:	7cfb      	ldrb	r3, [r7, #19]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c96:	4904      	ldr	r1, [pc, #16]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	74bb      	strb	r3, [r7, #18]
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb4:	7c7b      	ldrb	r3, [r7, #17]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cba:	4b9e      	ldr	r3, [pc, #632]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	4a9d      	ldr	r2, [pc, #628]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cd2:	4b98      	ldr	r3, [pc, #608]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f023 0203 	bic.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	4994      	ldr	r1, [pc, #592]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cf4:	4b8f      	ldr	r3, [pc, #572]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f023 020c 	bic.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	498c      	ldr	r1, [pc, #560]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d16:	4b87      	ldr	r3, [pc, #540]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	4983      	ldr	r1, [pc, #524]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d38:	4b7e      	ldr	r3, [pc, #504]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	497b      	ldr	r1, [pc, #492]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d5a:	4b76      	ldr	r3, [pc, #472]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	4972      	ldr	r1, [pc, #456]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d7c:	4b6d      	ldr	r3, [pc, #436]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	496a      	ldr	r1, [pc, #424]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d9e:	4b65      	ldr	r3, [pc, #404]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	4961      	ldr	r1, [pc, #388]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dce:	4959      	ldr	r1, [pc, #356]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de2:	4b54      	ldr	r3, [pc, #336]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	4950      	ldr	r1, [pc, #320]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e04:	4b4b      	ldr	r3, [pc, #300]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	4948      	ldr	r1, [pc, #288]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e26:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	493f      	ldr	r1, [pc, #252]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d028      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e48:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e56:	4937      	ldr	r1, [pc, #220]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e66:	d106      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e68:	4b32      	ldr	r3, [pc, #200]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4a31      	ldr	r2, [pc, #196]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e72:	60d3      	str	r3, [r2, #12]
 8005e74:	e011      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e7e:	d10c      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f8d8 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e96:	7cfb      	ldrb	r3, [r7, #19]
 8005e98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ea6:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb4:	491f      	ldr	r1, [pc, #124]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed0:	60d3      	str	r3, [r2, #12]
 8005ed2:	e011      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 f8a9 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02b      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f22:	d109      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a02      	ldr	r2, [pc, #8]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]
 8005f30:	e014      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f32:	bf00      	nop
 8005f34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	2101      	movs	r1, #1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f877 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f52:	7cfb      	ldrb	r3, [r7, #19]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02f      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f68:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f76:	4928      	ldr	r1, [pc, #160]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f86:	d10d      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f854 	bl	800603c <RCCEx_PLLSAI1_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d014      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f9e:	7cfb      	ldrb	r3, [r7, #19]
 8005fa0:	74bb      	strb	r3, [r7, #18]
 8005fa2:	e011      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3320      	adds	r3, #32
 8005fb2:	2102      	movs	r1, #2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 f935 	bl	8006224 <RCCEx_PLLSAI2_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fbe:	7cfb      	ldrb	r3, [r7, #19]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe2:	490d      	ldr	r1, [pc, #52]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006006:	4904      	ldr	r1, [pc, #16]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800600e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000

0800601c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006026:	f043 0304 	orr.w	r3, r3, #4
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000

0800603c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800604a:	4b75      	ldr	r3, [pc, #468]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006056:	4b72      	ldr	r3, [pc, #456]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0203 	and.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d10d      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
       ||
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800606e:	4b6c      	ldr	r3, [pc, #432]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
       ||
 800607e:	429a      	cmp	r2, r3
 8006080:	d047      	beq.n	8006112 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	73fb      	strb	r3, [r7, #15]
 8006086:	e044      	b.n	8006112 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d018      	beq.n	80060c2 <RCCEx_PLLSAI1_Config+0x86>
 8006090:	2b03      	cmp	r3, #3
 8006092:	d825      	bhi.n	80060e0 <RCCEx_PLLSAI1_Config+0xa4>
 8006094:	2b01      	cmp	r3, #1
 8006096:	d002      	beq.n	800609e <RCCEx_PLLSAI1_Config+0x62>
 8006098:	2b02      	cmp	r3, #2
 800609a:	d009      	beq.n	80060b0 <RCCEx_PLLSAI1_Config+0x74>
 800609c:	e020      	b.n	80060e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800609e:	4b60      	ldr	r3, [pc, #384]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11d      	bne.n	80060e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ae:	e01a      	b.n	80060e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060b0:	4b5b      	ldr	r3, [pc, #364]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c0:	e013      	b.n	80060ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060c2:	4b57      	ldr	r3, [pc, #348]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060ce:	4b54      	ldr	r3, [pc, #336]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060de:	e006      	b.n	80060ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e004      	b.n	80060f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10d      	bne.n	8006112 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060f6:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	3b01      	subs	r3, #1
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	430b      	orrs	r3, r1
 800610c:	4944      	ldr	r1, [pc, #272]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800610e:	4313      	orrs	r3, r2
 8006110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d17d      	bne.n	8006214 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006118:	4b41      	ldr	r3, [pc, #260]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a40      	ldr	r2, [pc, #256]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800611e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006124:	f7fc fb68 	bl	80027f8 <HAL_GetTick>
 8006128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800612a:	e009      	b.n	8006140 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800612c:	f7fc fb64 	bl	80027f8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d902      	bls.n	8006140 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
        break;
 800613e:	e005      	b.n	800614c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006140:	4b37      	ldr	r3, [pc, #220]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ef      	bne.n	800612c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d160      	bne.n	8006214 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d111      	bne.n	800617c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006158:	4b31      	ldr	r3, [pc, #196]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6892      	ldr	r2, [r2, #8]
 8006168:	0211      	lsls	r1, r2, #8
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68d2      	ldr	r2, [r2, #12]
 800616e:	0912      	lsrs	r2, r2, #4
 8006170:	0452      	lsls	r2, r2, #17
 8006172:	430a      	orrs	r2, r1
 8006174:	492a      	ldr	r1, [pc, #168]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	610b      	str	r3, [r1, #16]
 800617a:	e027      	b.n	80061cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d112      	bne.n	80061a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800618a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	0211      	lsls	r1, r2, #8
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6912      	ldr	r2, [r2, #16]
 8006198:	0852      	lsrs	r2, r2, #1
 800619a:	3a01      	subs	r2, #1
 800619c:	0552      	lsls	r2, r2, #21
 800619e:	430a      	orrs	r2, r1
 80061a0:	491f      	ldr	r1, [pc, #124]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	610b      	str	r3, [r1, #16]
 80061a6:	e011      	b.n	80061cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6892      	ldr	r2, [r2, #8]
 80061b8:	0211      	lsls	r1, r2, #8
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6952      	ldr	r2, [r2, #20]
 80061be:	0852      	lsrs	r2, r2, #1
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0652      	lsls	r2, r2, #25
 80061c4:	430a      	orrs	r2, r1
 80061c6:	4916      	ldr	r1, [pc, #88]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fc fb0e 	bl	80027f8 <HAL_GetTick>
 80061dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061de:	e009      	b.n	80061f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061e0:	f7fc fb0a 	bl	80027f8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d902      	bls.n	80061f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
          break;
 80061f2:	e005      	b.n	8006200 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ef      	beq.n	80061e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	4904      	ldr	r1, [pc, #16]	; (8006220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40021000 	.word	0x40021000

08006224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006232:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d018      	beq.n	8006270 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800623e:	4b67      	ldr	r3, [pc, #412]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0203 	and.w	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d10d      	bne.n	800626a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
       ||
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006256:	4b61      	ldr	r3, [pc, #388]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
       ||
 8006266:	429a      	cmp	r2, r3
 8006268:	d047      	beq.n	80062fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	e044      	b.n	80062fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d018      	beq.n	80062aa <RCCEx_PLLSAI2_Config+0x86>
 8006278:	2b03      	cmp	r3, #3
 800627a:	d825      	bhi.n	80062c8 <RCCEx_PLLSAI2_Config+0xa4>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d002      	beq.n	8006286 <RCCEx_PLLSAI2_Config+0x62>
 8006280:	2b02      	cmp	r3, #2
 8006282:	d009      	beq.n	8006298 <RCCEx_PLLSAI2_Config+0x74>
 8006284:	e020      	b.n	80062c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006286:	4b55      	ldr	r3, [pc, #340]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d11d      	bne.n	80062ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006296:	e01a      	b.n	80062ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006298:	4b50      	ldr	r3, [pc, #320]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a8:	e013      	b.n	80062d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062aa:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062b6:	4b49      	ldr	r3, [pc, #292]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062c6:	e006      	b.n	80062d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e004      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062de:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	430b      	orrs	r3, r1
 80062f4:	4939      	ldr	r1, [pc, #228]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d167      	bne.n	80063d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a35      	ldr	r2, [pc, #212]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630c:	f7fc fa74 	bl	80027f8 <HAL_GetTick>
 8006310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006312:	e009      	b.n	8006328 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006314:	f7fc fa70 	bl	80027f8 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d902      	bls.n	8006328 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	73fb      	strb	r3, [r7, #15]
        break;
 8006326:	e005      	b.n	8006334 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006328:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ef      	bne.n	8006314 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d14a      	bne.n	80063d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d111      	bne.n	8006364 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006340:	4b26      	ldr	r3, [pc, #152]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6892      	ldr	r2, [r2, #8]
 8006350:	0211      	lsls	r1, r2, #8
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68d2      	ldr	r2, [r2, #12]
 8006356:	0912      	lsrs	r2, r2, #4
 8006358:	0452      	lsls	r2, r2, #17
 800635a:	430a      	orrs	r2, r1
 800635c:	491f      	ldr	r1, [pc, #124]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800635e:	4313      	orrs	r3, r2
 8006360:	614b      	str	r3, [r1, #20]
 8006362:	e011      	b.n	8006388 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800636c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6892      	ldr	r2, [r2, #8]
 8006374:	0211      	lsls	r1, r2, #8
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6912      	ldr	r2, [r2, #16]
 800637a:	0852      	lsrs	r2, r2, #1
 800637c:	3a01      	subs	r2, #1
 800637e:	0652      	lsls	r2, r2, #25
 8006380:	430a      	orrs	r2, r1
 8006382:	4916      	ldr	r1, [pc, #88]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006384:	4313      	orrs	r3, r2
 8006386:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006388:	4b14      	ldr	r3, [pc, #80]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800638e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006394:	f7fc fa30 	bl	80027f8 <HAL_GetTick>
 8006398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800639a:	e009      	b.n	80063b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800639c:	f7fc fa2c 	bl	80027f8 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d902      	bls.n	80063b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	73fb      	strb	r3, [r7, #15]
          break;
 80063ae:	e005      	b.n	80063bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0ef      	beq.n	800639c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	4904      	ldr	r1, [pc, #16]	; (80063dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000

080063e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e095      	b.n	800651e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d009      	beq.n	8006418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
 800640a:	e005      	b.n	8006418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f877 	bl	8006526 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006458:	d902      	bls.n	8006460 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e002      	b.n	8006466 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800646e:	d007      	beq.n	8006480 <HAL_SPI_Init+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006478:	d002      	beq.n	8006480 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	0c1b      	lsrs	r3, r3, #16
 80064dc:	f003 0204 	and.w	r2, r3, #4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064fc:	ea42 0103 	orr.w	r1, r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b08a      	sub	sp, #40	; 0x28
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006548:	2301      	movs	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x26>
 800655c:	2302      	movs	r3, #2
 800655e:	e1fb      	b.n	8006958 <HAL_SPI_TransmitReceive+0x41e>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006568:	f7fc f946 	bl	80027f8 <HAL_GetTick>
 800656c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006574:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800657c:	887b      	ldrh	r3, [r7, #2]
 800657e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006580:	887b      	ldrh	r3, [r7, #2]
 8006582:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006584:	7efb      	ldrb	r3, [r7, #27]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d00e      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x6e>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006590:	d106      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x66>
 800659a:	7efb      	ldrb	r3, [r7, #27]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d003      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065a6:	e1cd      	b.n	8006944 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x80>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x80>
 80065b4:	887b      	ldrh	r3, [r7, #2]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065c0:	e1c0      	b.n	8006944 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d003      	beq.n	80065d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2205      	movs	r2, #5
 80065d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	887a      	ldrh	r2, [r7, #2]
 80065e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	887a      	ldrh	r2, [r7, #2]
 80065ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006618:	d802      	bhi.n	8006620 <HAL_SPI_TransmitReceive+0xe6>
 800661a:	8a3b      	ldrh	r3, [r7, #16]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d908      	bls.n	8006632 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	e007      	b.n	8006642 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d007      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006668:	d97c      	bls.n	8006764 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x13e>
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d169      	bne.n	800674c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800669c:	e056      	b.n	800674c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x1aa>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x1aa>
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d113      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	881a      	ldrh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d11c      	bne.n	800672c <HAL_SPI_TransmitReceive+0x1f2>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	b292      	uxth	r2, r2
 800670a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006728:	2301      	movs	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800672c:	f7fc f864 	bl	80027f8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	429a      	cmp	r2, r3
 800673a:	d807      	bhi.n	800674c <HAL_SPI_TransmitReceive+0x212>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d003      	beq.n	800674c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800674a:	e0fb      	b.n	8006944 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1a3      	bne.n	800669e <HAL_SPI_TransmitReceive+0x164>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d19d      	bne.n	800669e <HAL_SPI_TransmitReceive+0x164>
 8006762:	e0df      	b.n	8006924 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x23a>
 800676c:	8a7b      	ldrh	r3, [r7, #18]
 800676e:	2b01      	cmp	r3, #1
 8006770:	f040 80cb 	bne.w	800690a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b01      	cmp	r3, #1
 800677c:	d912      	bls.n	80067a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	881a      	ldrh	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	1c9a      	adds	r2, r3, #2
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b02      	subs	r3, #2
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067a2:	e0b2      	b.n	800690a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	7812      	ldrb	r2, [r2, #0]
 80067b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ca:	e09e      	b.n	800690a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d134      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x30a>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02f      	beq.n	8006844 <HAL_SPI_TransmitReceive+0x30a>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d12c      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d912      	bls.n	800681a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	881a      	ldrh	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b02      	subs	r3, #2
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006818:	e012      	b.n	8006840 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d148      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x3aa>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d042      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d923      	bls.n	80068b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	b292      	uxth	r2, r2
 8006876:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	1c9a      	adds	r2, r3, #2
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b02      	subs	r3, #2
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d81f      	bhi.n	80068e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ae:	605a      	str	r2, [r3, #4]
 80068b0:	e016      	b.n	80068e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f103 020c 	add.w	r2, r3, #12
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068e4:	f7fb ff88 	bl	80027f8 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d803      	bhi.n	80068fc <HAL_SPI_TransmitReceive+0x3c2>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x3c8>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006908:	e01c      	b.n	8006944 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f af5b 	bne.w	80067cc <HAL_SPI_TransmitReceive+0x292>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f47f af54 	bne.w	80067cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f945 	bl	8006bb8 <SPI_EndRxTxTransaction>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	661a      	str	r2, [r3, #96]	; 0x60
 8006940:	e000      	b.n	8006944 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006942:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800696e:	b2db      	uxtb	r3, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800698c:	f7fb ff34 	bl	80027f8 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800699c:	f7fb ff2c 	bl	80027f8 <HAL_GetTick>
 80069a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069a2:	4b39      	ldr	r3, [pc, #228]	; (8006a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	0d1b      	lsrs	r3, r3, #20
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b2:	e054      	b.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d050      	beq.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069bc:	f7fb ff1c 	bl	80027f8 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d902      	bls.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13d      	bne.n	8006a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ea:	d111      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d004      	beq.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fe:	d107      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d10f      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e017      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d19b      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000068 	.word	0x20000068

08006a8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a9e:	f7fb feab 	bl	80027f8 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	4413      	add	r3, r2
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006aae:	f7fb fea3 	bl	80027f8 <HAL_GetTick>
 8006ab2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006abc:	4b3d      	ldr	r3, [pc, #244]	; (8006bb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00da      	lsls	r2, r3, #3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	0d1b      	lsrs	r3, r3, #20
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ad4:	e060      	b.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006adc:	d107      	bne.n	8006aee <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d050      	beq.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006af6:	f7fb fe7f 	bl	80027f8 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d902      	bls.n	8006b0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d13d      	bne.n	8006b88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b24:	d111      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2e:	d004      	beq.n	8006b3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b38:	d107      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b52:	d10f      	bne.n	8006b74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e010      	b.n	8006baa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d196      	bne.n	8006ad6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	; 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000068 	.word	0x20000068

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff ff5b 	bl	8006a8c <SPI_WaitFifoStateUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e027      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fec0 	bl	800697c <SPI_WaitFlagStateUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e014      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff ff34 	bl	8006a8c <SPI_WaitFifoStateUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2e:	f043 0220 	orr.w	r2, r3, #32
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e000      	b.n	8006c3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e040      	b.n	8006cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fb fbd2 	bl	8002410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2224      	movs	r2, #36	; 0x24
 8006c70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f8c0 	bl	8006e08 <UART_SetConfig>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e022      	b.n	8006cd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb6c 	bl	8007378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fbf3 	bl	80074bc <UART_CheckIdleState>
 8006cd6:	4603      	mov	r3, r0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	f040 8082 	bne.w	8006dfe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_UART_Transmit+0x26>
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e07a      	b.n	8006e00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_UART_Transmit+0x38>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e073      	b.n	8006e00 <HAL_UART_Transmit+0x120>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2221      	movs	r2, #33	; 0x21
 8006d2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d2e:	f7fb fd63 	bl	80027f8 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d108      	bne.n	8006d60 <HAL_UART_Transmit+0x80>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e003      	b.n	8006d68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d70:	e02d      	b.n	8006dce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fbe6 	bl	800754e <UART_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e039      	b.n	8006e00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	881a      	ldrh	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3302      	adds	r3, #2
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	e008      	b.n	8006dbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	b292      	uxth	r2, r2
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1cb      	bne.n	8006d72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2140      	movs	r1, #64	; 0x40
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fbb2 	bl	800754e <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e005      	b.n	8006e00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e000      	b.n	8006e00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b08a      	sub	sp, #40	; 0x28
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4ba4      	ldr	r3, [pc, #656]	; (80070c8 <UART_SetConfig+0x2c0>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a99      	ldr	r2, [pc, #612]	; (80070cc <UART_SetConfig+0x2c4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d004      	beq.n	8006e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e70:	4313      	orrs	r3, r2
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a90      	ldr	r2, [pc, #576]	; (80070d0 <UART_SetConfig+0x2c8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d126      	bne.n	8006ee0 <UART_SetConfig+0xd8>
 8006e92:	4b90      	ldr	r3, [pc, #576]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d81b      	bhi.n	8006ed8 <UART_SetConfig+0xd0>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0xa0>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	08006ec1 	.word	0x08006ec1
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e116      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e112      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ece:	e10e      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed6:	e10a      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ede:	e106      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a7c      	ldr	r2, [pc, #496]	; (80070d8 <UART_SetConfig+0x2d0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d138      	bne.n	8006f5c <UART_SetConfig+0x154>
 8006eea:	4b7a      	ldr	r3, [pc, #488]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b0c      	cmp	r3, #12
 8006ef6:	d82d      	bhi.n	8006f54 <UART_SetConfig+0x14c>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0xf8>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f35 	.word	0x08006f35
 8006f04:	08006f55 	.word	0x08006f55
 8006f08:	08006f55 	.word	0x08006f55
 8006f0c:	08006f55 	.word	0x08006f55
 8006f10:	08006f45 	.word	0x08006f45
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f55 	.word	0x08006f55
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006f55 	.word	0x08006f55
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	2300      	movs	r3, #0
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3a:	e0d8      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f42:	e0d4      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f44:	2304      	movs	r3, #4
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e0d0      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e0cc      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f54:	2310      	movs	r3, #16
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e0c8      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5e      	ldr	r2, [pc, #376]	; (80070dc <UART_SetConfig+0x2d4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d125      	bne.n	8006fb2 <UART_SetConfig+0x1aa>
 8006f66:	4b5b      	ldr	r3, [pc, #364]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	d016      	beq.n	8006fa2 <UART_SetConfig+0x19a>
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d818      	bhi.n	8006faa <UART_SetConfig+0x1a2>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d00a      	beq.n	8006f92 <UART_SetConfig+0x18a>
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d814      	bhi.n	8006faa <UART_SetConfig+0x1a2>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <UART_SetConfig+0x182>
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d008      	beq.n	8006f9a <UART_SetConfig+0x192>
 8006f88:	e00f      	b.n	8006faa <UART_SetConfig+0x1a2>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f90:	e0ad      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f92:	2302      	movs	r3, #2
 8006f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f98:	e0a9      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa0:	e0a5      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa8:	e0a1      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006faa:	2310      	movs	r3, #16
 8006fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb0:	e09d      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a4a      	ldr	r2, [pc, #296]	; (80070e0 <UART_SetConfig+0x2d8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d125      	bne.n	8007008 <UART_SetConfig+0x200>
 8006fbc:	4b45      	ldr	r3, [pc, #276]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006fc8:	d016      	beq.n	8006ff8 <UART_SetConfig+0x1f0>
 8006fca:	2bc0      	cmp	r3, #192	; 0xc0
 8006fcc:	d818      	bhi.n	8007000 <UART_SetConfig+0x1f8>
 8006fce:	2b80      	cmp	r3, #128	; 0x80
 8006fd0:	d00a      	beq.n	8006fe8 <UART_SetConfig+0x1e0>
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d814      	bhi.n	8007000 <UART_SetConfig+0x1f8>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <UART_SetConfig+0x1d8>
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d008      	beq.n	8006ff0 <UART_SetConfig+0x1e8>
 8006fde:	e00f      	b.n	8007000 <UART_SetConfig+0x1f8>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e082      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fee:	e07e      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e07a      	b.n	80070ee <UART_SetConfig+0x2e6>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e076      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007006:	e072      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <UART_SetConfig+0x2dc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d12a      	bne.n	8007068 <UART_SetConfig+0x260>
 8007012:	4b30      	ldr	r3, [pc, #192]	; (80070d4 <UART_SetConfig+0x2cc>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007020:	d01a      	beq.n	8007058 <UART_SetConfig+0x250>
 8007022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007026:	d81b      	bhi.n	8007060 <UART_SetConfig+0x258>
 8007028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702c:	d00c      	beq.n	8007048 <UART_SetConfig+0x240>
 800702e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007032:	d815      	bhi.n	8007060 <UART_SetConfig+0x258>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <UART_SetConfig+0x238>
 8007038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703c:	d008      	beq.n	8007050 <UART_SetConfig+0x248>
 800703e:	e00f      	b.n	8007060 <UART_SetConfig+0x258>
 8007040:	2300      	movs	r3, #0
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e052      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007048:	2302      	movs	r3, #2
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e04e      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007056:	e04a      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e046      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007066:	e042      	b.n	80070ee <UART_SetConfig+0x2e6>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <UART_SetConfig+0x2c4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d13a      	bne.n	80070e8 <UART_SetConfig+0x2e0>
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <UART_SetConfig+0x2cc>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800707c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007080:	d01a      	beq.n	80070b8 <UART_SetConfig+0x2b0>
 8007082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007086:	d81b      	bhi.n	80070c0 <UART_SetConfig+0x2b8>
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d00c      	beq.n	80070a8 <UART_SetConfig+0x2a0>
 800708e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007092:	d815      	bhi.n	80070c0 <UART_SetConfig+0x2b8>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <UART_SetConfig+0x298>
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709c:	d008      	beq.n	80070b0 <UART_SetConfig+0x2a8>
 800709e:	e00f      	b.n	80070c0 <UART_SetConfig+0x2b8>
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a6:	e022      	b.n	80070ee <UART_SetConfig+0x2e6>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ae:	e01e      	b.n	80070ee <UART_SetConfig+0x2e6>
 80070b0:	2304      	movs	r3, #4
 80070b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b6:	e01a      	b.n	80070ee <UART_SetConfig+0x2e6>
 80070b8:	2308      	movs	r3, #8
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e016      	b.n	80070ee <UART_SetConfig+0x2e6>
 80070c0:	2310      	movs	r3, #16
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e012      	b.n	80070ee <UART_SetConfig+0x2e6>
 80070c8:	efff69f3 	.word	0xefff69f3
 80070cc:	40008000 	.word	0x40008000
 80070d0:	40013800 	.word	0x40013800
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40004400 	.word	0x40004400
 80070dc:	40004800 	.word	0x40004800
 80070e0:	40004c00 	.word	0x40004c00
 80070e4:	40005000 	.word	0x40005000
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a9f      	ldr	r2, [pc, #636]	; (8007370 <UART_SetConfig+0x568>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d17a      	bne.n	80071ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d824      	bhi.n	800714a <UART_SetConfig+0x342>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x300>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800712d 	.word	0x0800712d
 800710c:	0800714b 	.word	0x0800714b
 8007110:	08007135 	.word	0x08007135
 8007114:	0800714b 	.word	0x0800714b
 8007118:	0800713b 	.word	0x0800713b
 800711c:	0800714b 	.word	0x0800714b
 8007120:	0800714b 	.word	0x0800714b
 8007124:	0800714b 	.word	0x0800714b
 8007128:	08007143 	.word	0x08007143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800712c:	f7fe fc00 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8007130:	61f8      	str	r0, [r7, #28]
        break;
 8007132:	e010      	b.n	8007156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007134:	4b8f      	ldr	r3, [pc, #572]	; (8007374 <UART_SetConfig+0x56c>)
 8007136:	61fb      	str	r3, [r7, #28]
        break;
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713a:	f7fe fb61 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 800713e:	61f8      	str	r0, [r7, #28]
        break;
 8007140:	e009      	b.n	8007156 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007146:	61fb      	str	r3, [r7, #28]
        break;
 8007148:	e005      	b.n	8007156 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80fb 	beq.w	8007354 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4413      	add	r3, r2
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	429a      	cmp	r2, r3
 800716c:	d305      	bcc.n	800717a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	429a      	cmp	r2, r3
 8007178:	d903      	bls.n	8007182 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007180:	e0e8      	b.n	8007354 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2200      	movs	r2, #0
 8007186:	461c      	mov	r4, r3
 8007188:	4615      	mov	r5, r2
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	022b      	lsls	r3, r5, #8
 8007194:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007198:	0222      	lsls	r2, r4, #8
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	6849      	ldr	r1, [r1, #4]
 800719e:	0849      	lsrs	r1, r1, #1
 80071a0:	2000      	movs	r0, #0
 80071a2:	4688      	mov	r8, r1
 80071a4:	4681      	mov	r9, r0
 80071a6:	eb12 0a08 	adds.w	sl, r2, r8
 80071aa:	eb43 0b09 	adc.w	fp, r3, r9
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071bc:	4650      	mov	r0, sl
 80071be:	4659      	mov	r1, fp
 80071c0:	f7f9 f85e 	bl	8000280 <__aeabi_uldivmod>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4613      	mov	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d2:	d308      	bcc.n	80071e6 <UART_SetConfig+0x3de>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071da:	d204      	bcs.n	80071e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	60da      	str	r2, [r3, #12]
 80071e4:	e0b6      	b.n	8007354 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071ec:	e0b2      	b.n	8007354 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f6:	d15e      	bne.n	80072b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d828      	bhi.n	8007252 <UART_SetConfig+0x44a>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0x400>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800722d 	.word	0x0800722d
 800720c:	08007235 	.word	0x08007235
 8007210:	0800723d 	.word	0x0800723d
 8007214:	08007253 	.word	0x08007253
 8007218:	08007243 	.word	0x08007243
 800721c:	08007253 	.word	0x08007253
 8007220:	08007253 	.word	0x08007253
 8007224:	08007253 	.word	0x08007253
 8007228:	0800724b 	.word	0x0800724b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800722c:	f7fe fb80 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8007230:	61f8      	str	r0, [r7, #28]
        break;
 8007232:	e014      	b.n	800725e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007234:	f7fe fb92 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 8007238:	61f8      	str	r0, [r7, #28]
        break;
 800723a:	e010      	b.n	800725e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800723c:	4b4d      	ldr	r3, [pc, #308]	; (8007374 <UART_SetConfig+0x56c>)
 800723e:	61fb      	str	r3, [r7, #28]
        break;
 8007240:	e00d      	b.n	800725e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007242:	f7fe fadd 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 8007246:	61f8      	str	r0, [r7, #28]
        break;
 8007248:	e009      	b.n	800725e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724e:	61fb      	str	r3, [r7, #28]
        break;
 8007250:	e005      	b.n	800725e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800725c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d077      	beq.n	8007354 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	005a      	lsls	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	441a      	add	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b0f      	cmp	r3, #15
 800727e:	d916      	bls.n	80072ae <UART_SetConfig+0x4a6>
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d212      	bcs.n	80072ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f023 030f 	bic.w	r3, r3, #15
 8007290:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	b29b      	uxth	r3, r3
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	b29a      	uxth	r2, r3
 800729e:	8afb      	ldrh	r3, [r7, #22]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	8afa      	ldrh	r2, [r7, #22]
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	e052      	b.n	8007354 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072b4:	e04e      	b.n	8007354 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d827      	bhi.n	800730e <UART_SetConfig+0x506>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x4bc>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	080072f1 	.word	0x080072f1
 80072cc:	080072f9 	.word	0x080072f9
 80072d0:	0800730f 	.word	0x0800730f
 80072d4:	080072ff 	.word	0x080072ff
 80072d8:	0800730f 	.word	0x0800730f
 80072dc:	0800730f 	.word	0x0800730f
 80072e0:	0800730f 	.word	0x0800730f
 80072e4:	08007307 	.word	0x08007307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7fe fb22 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 80072ec:	61f8      	str	r0, [r7, #28]
        break;
 80072ee:	e014      	b.n	800731a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f0:	f7fe fb34 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 80072f4:	61f8      	str	r0, [r7, #28]
        break;
 80072f6:	e010      	b.n	800731a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <UART_SetConfig+0x56c>)
 80072fa:	61fb      	str	r3, [r7, #28]
        break;
 80072fc:	e00d      	b.n	800731a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fe:	f7fe fa7f 	bl	8005800 <HAL_RCC_GetSysClockFreq>
 8007302:	61f8      	str	r0, [r7, #28]
        break;
 8007304:	e009      	b.n	800731a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730a:	61fb      	str	r3, [r7, #28]
        break;
 800730c:	e005      	b.n	800731a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007318:	bf00      	nop
    }

    if (pclk != 0U)
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d019      	beq.n	8007354 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	085a      	lsrs	r2, r3, #1
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	441a      	add	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007332:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b0f      	cmp	r3, #15
 8007338:	d909      	bls.n	800734e <UART_SetConfig+0x546>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d205      	bcs.n	800734e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	e002      	b.n	8007354 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007364:	4618      	mov	r0, r3
 8007366:	3728      	adds	r7, #40	; 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800736e:	bf00      	nop
 8007370:	40008000 	.word	0x40008000
 8007374:	00f42400 	.word	0x00f42400

08007378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01a      	beq.n	800748e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007476:	d10a      	bne.n	800748e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074cc:	f7fb f994 	bl	80027f8 <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d10e      	bne.n	80074fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f82d 	bl	800754e <UART_WaitOnFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e023      	b.n	8007546 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b04      	cmp	r3, #4
 800750a:	d10e      	bne.n	800752a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f817 	bl	800754e <UART_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e00d      	b.n	8007546 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b09c      	sub	sp, #112	; 0x70
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800755e:	e0a5      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	f000 80a1 	beq.w	80076ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7fb f945 	bl	80027f8 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <UART_WaitOnFlagUntilTimeout+0x32>
 800757a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757c:	2b00      	cmp	r3, #0
 800757e:	d13e      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007594:	667b      	str	r3, [r7, #100]	; 0x64
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800759e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e6      	bne.n	8007580 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	663b      	str	r3, [r7, #96]	; 0x60
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80075d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e5      	bne.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e067      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d04f      	beq.n	80076ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761a:	d147      	bne.n	80076ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007624:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800763a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
 8007646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800764a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	613b      	str	r3, [r7, #16]
   return(result);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007678:	623a      	str	r2, [r7, #32]
 800767a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	69f9      	ldr	r1, [r7, #28]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	61bb      	str	r3, [r7, #24]
   return(result);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e5      	bne.n	8007658 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e010      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4013      	ands	r3, r2
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	f43f af4a 	beq.w	8007560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3770      	adds	r7, #112	; 0x70
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b08c      	sub	sp, #48	; 0x30
 80076da:	af00      	add	r7, sp, #0
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	4603      	mov	r3, r0
 80076e0:	71fb      	strb	r3, [r7, #7]
 80076e2:	460b      	mov	r3, r1
 80076e4:	71bb      	strb	r3, [r7, #6]
 80076e6:	4613      	mov	r3, r2
 80076e8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80076ee:	79bb      	ldrb	r3, [r7, #6]
 80076f0:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80076f2:	797b      	ldrb	r3, [r7, #5]
 80076f4:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80076f6:	f107 030c 	add.w	r3, r7, #12
 80076fa:	2207      	movs	r2, #7
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fb56 	bl	8008db0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007704:	f107 0318 	add.w	r3, r7, #24
 8007708:	2218      	movs	r2, #24
 800770a:	2100      	movs	r1, #0
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fb4f 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007712:	233f      	movs	r3, #63	; 0x3f
 8007714:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007716:	238a      	movs	r3, #138	; 0x8a
 8007718:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800771a:	f107 0314 	add.w	r3, r7, #20
 800771e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007720:	2303      	movs	r3, #3
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800772a:	2307      	movs	r3, #7
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800772e:	f107 0318 	add.w	r3, r7, #24
 8007732:	2100      	movs	r1, #0
 8007734:	4618      	mov	r0, r3
 8007736:	f001 f857 	bl	80087e8 <hci_send_req>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	da01      	bge.n	8007744 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007740:	23ff      	movs	r3, #255	; 0xff
 8007742:	e014      	b.n	800776e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007744:	7b3b      	ldrb	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800774a:	7b3b      	ldrb	r3, [r7, #12]
 800774c:	e00f      	b.n	800776e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800774e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007752:	b29a      	uxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007758:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800775c:	b29a      	uxth	r2, r3
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007762:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007766:	b29a      	uxth	r2, r3
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3730      	adds	r7, #48	; 0x30
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007776:	b590      	push	{r4, r7, lr}
 8007778:	b095      	sub	sp, #84	; 0x54
 800777a:	af00      	add	r7, sp, #0
 800777c:	4604      	mov	r4, r0
 800777e:	4608      	mov	r0, r1
 8007780:	4611      	mov	r1, r2
 8007782:	461a      	mov	r2, r3
 8007784:	4623      	mov	r3, r4
 8007786:	71fb      	strb	r3, [r7, #7]
 8007788:	4603      	mov	r3, r0
 800778a:	80bb      	strh	r3, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	807b      	strh	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800779a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800779e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80077a2:	4413      	add	r3, r2
 80077a4:	330e      	adds	r3, #14
 80077a6:	2b28      	cmp	r3, #40	; 0x28
 80077a8:	d901      	bls.n	80077ae <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80077aa:	2342      	movs	r3, #66	; 0x42
 80077ac:	e0c9      	b.n	8007942 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80077ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077b2:	3350      	adds	r3, #80	; 0x50
 80077b4:	443b      	add	r3, r7
 80077b6:	79fa      	ldrb	r2, [r7, #7]
 80077b8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80077bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077c0:	3301      	adds	r3, #1
 80077c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80077ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077ce:	f107 0208 	add.w	r2, r7, #8
 80077d2:	4413      	add	r3, r2
 80077d4:	88ba      	ldrh	r2, [r7, #4]
 80077d6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80077d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077dc:	3302      	adds	r3, #2
 80077de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80077e2:	887b      	ldrh	r3, [r7, #2]
 80077e4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80077e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4413      	add	r3, r2
 80077f0:	887a      	ldrh	r2, [r7, #2]
 80077f2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80077f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077f8:	3302      	adds	r3, #2
 80077fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80077fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007802:	3350      	adds	r3, #80	; 0x50
 8007804:	443b      	add	r3, r7
 8007806:	79ba      	ldrb	r2, [r7, #6]
 8007808:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800780c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007810:	3301      	adds	r3, #1
 8007812:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8007816:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800781a:	3350      	adds	r3, #80	; 0x50
 800781c:	443b      	add	r3, r7
 800781e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007822:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007826:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800782a:	3301      	adds	r3, #1
 800782c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8007830:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007834:	3350      	adds	r3, #80	; 0x50
 8007836:	443b      	add	r3, r7
 8007838:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800783c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007844:	3301      	adds	r3, #1
 8007846:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800784a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	4413      	add	r3, r2
 8007854:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007858:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fa9a 	bl	8008d94 <memcpy>
  indx +=  LocalNameLen;
 8007860:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007864:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8007868:	4413      	add	r3, r2
 800786a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800786e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007872:	3350      	adds	r3, #80	; 0x50
 8007874:	443b      	add	r3, r7
 8007876:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800787a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800787e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007882:	3301      	adds	r3, #1
 8007884:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8007888:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800788c:	f107 0208 	add.w	r2, r7, #8
 8007890:	4413      	add	r3, r2
 8007892:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8007896:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fa7b 	bl	8008d94 <memcpy>
  indx +=  ServiceUUIDLen;  
 800789e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80078a2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80078a6:	4413      	add	r3, r2
 80078a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80078ac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80078b0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80078b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078b8:	f107 0208 	add.w	r2, r7, #8
 80078bc:	4413      	add	r3, r2
 80078be:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80078c2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80078c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078c8:	3302      	adds	r3, #2
 80078ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80078ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80078d2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80078d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078da:	f107 0208 	add.w	r2, r7, #8
 80078de:	4413      	add	r3, r2
 80078e0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80078e4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80078e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078ea:	3302      	adds	r3, #2
 80078ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80078f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80078f4:	2218      	movs	r2, #24
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 fa59 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80078fe:	233f      	movs	r3, #63	; 0x3f
 8007900:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8007902:	2383      	movs	r3, #131	; 0x83
 8007904:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8007906:	f107 0308 	add.w	r3, r7, #8
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800790c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007910:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8007912:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8007916:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8007918:	2301      	movs	r3, #1
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800791c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f000 ff60 	bl	80087e8 <hci_send_req>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	da01      	bge.n	8007932 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800792e:	23ff      	movs	r3, #255	; 0xff
 8007930:	e007      	b.n	8007942 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8007932:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <aci_gap_set_discoverable+0x1ca>
    return status;
 800793a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800793e:	e000      	b.n	8007942 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3754      	adds	r7, #84	; 0x54
 8007946:	46bd      	mov	sp, r7
 8007948:	bd90      	pop	{r4, r7, pc}

0800794a <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b08a      	sub	sp, #40	; 0x28
 800794e:	af00      	add	r7, sp, #0
 8007950:	4603      	mov	r3, r0
 8007952:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	733b      	strb	r3, [r7, #12]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	2218      	movs	r2, #24
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fa25 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007966:	233f      	movs	r3, #63	; 0x3f
 8007968:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
 800796a:	2385      	movs	r3, #133	; 0x85
 800796c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800796e:	f107 030c 	add.w	r3, r7, #12
 8007972:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 8007974:	2301      	movs	r3, #1
 8007976:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8007978:	f107 030f 	add.w	r3, r7, #15
 800797c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
    
  if (hci_send_req(&rq, FALSE) < 0)
 8007982:	f107 0310 	add.w	r3, r7, #16
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f000 ff2d 	bl	80087e8 <hci_send_req>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	da01      	bge.n	8007998 <aci_gap_set_io_capability+0x4e>
    return BLE_STATUS_TIMEOUT;
 8007994:	23ff      	movs	r3, #255	; 0xff
 8007996:	e000      	b.n	800799a <aci_gap_set_io_capability+0x50>
    
  return status;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3728      	adds	r7, #40	; 0x28
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80079a2:	b590      	push	{r4, r7, lr}
 80079a4:	b091      	sub	sp, #68	; 0x44
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	603a      	str	r2, [r7, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	4603      	mov	r3, r0
 80079ae:	71fb      	strb	r3, [r7, #7]
 80079b0:	460b      	mov	r3, r1
 80079b2:	71bb      	strb	r3, [r7, #6]
 80079b4:	4613      	mov	r3, r2
 80079b6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80079bc:	79bb      	ldrb	r3, [r7, #6]
 80079be:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80079c0:	79bb      	ldrb	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	f107 030e 	add.w	r3, r7, #14
 80079cc:	6814      	ldr	r4, [r2, #0]
 80079ce:	6850      	ldr	r0, [r2, #4]
 80079d0:	6891      	ldr	r1, [r2, #8]
 80079d2:	68d2      	ldr	r2, [r2, #12]
 80079d4:	601c      	str	r4, [r3, #0]
 80079d6:	6058      	str	r0, [r3, #4]
 80079d8:	6099      	str	r1, [r3, #8]
 80079da:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80079dc:	797b      	ldrb	r3, [r7, #5]
 80079de:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80079e0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80079e4:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80079e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80079ea:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80079ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80079f4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80079f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80079fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a00:	2218      	movs	r2, #24
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f9d3 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a0a:	233f      	movs	r3, #63	; 0x3f
 8007a0c:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8007a0e:	2386      	movs	r3, #134	; 0x86
 8007a10:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8007a12:	f107 030c 	add.w	r3, r7, #12
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8007a18:	231a      	movs	r3, #26
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8007a1c:	f107 030b 	add.w	r3, r7, #11
 8007a20:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8007a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fedb 	bl	80087e8 <hci_send_req>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da01      	bge.n	8007a3c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8007a38:	23ff      	movs	r3, #255	; 0xff
 8007a3a:	e005      	b.n	8007a48 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	e000      	b.n	8007a48 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3744      	adds	r7, #68	; 0x44
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd90      	pop	{r4, r7, pc}

08007a50 <aci_gap_slave_security_request>:
  
  return status;
}

tBleStatus aci_gap_slave_security_request(uint16_t conn_handle, uint8_t bonding, uint8_t mitm_protection)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	; 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	80fb      	strh	r3, [r7, #6]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	717b      	strb	r3, [r7, #5]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gap_slave_security_request_cp cp;
  uint8_t status;

  cp.conn_handle = htobs(conn_handle);
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	81bb      	strh	r3, [r7, #12]
  cp.bonding = bonding;
 8007a66:	797b      	ldrb	r3, [r7, #5]
 8007a68:	73bb      	strb	r3, [r7, #14]
  cp.mitm_protection = mitm_protection;
 8007a6a:	793b      	ldrb	r3, [r7, #4]
 8007a6c:	73fb      	strb	r3, [r7, #15]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a6e:	f107 0310 	add.w	r3, r7, #16
 8007a72:	2218      	movs	r2, #24
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 f99a 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a7c:	233f      	movs	r3, #63	; 0x3f
 8007a7e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_SLAVE_SECURITY_REQUEST;
 8007a80:	238d      	movs	r3, #141	; 0x8d
 8007a82:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8007a84:	f107 030c 	add.w	r3, r7, #12
 8007a88:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	61fb      	str	r3, [r7, #28]
  rq.event = EVT_CMD_STATUS;
 8007a8e:	230f      	movs	r3, #15
 8007a90:	617b      	str	r3, [r7, #20]
  rq.rparam = &status;
 8007a92:	f107 030b 	add.w	r3, r7, #11
 8007a96:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007a9c:	f107 0310 	add.w	r3, r7, #16
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fea0 	bl	80087e8 <hci_send_req>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	da01      	bge.n	8007ab2 <aci_gap_slave_security_request+0x62>
    return BLE_STATUS_TIMEOUT;
 8007aae:	23ff      	movs	r3, #255	; 0xff
 8007ab0:	e000      	b.n	8007ab4 <aci_gap_slave_security_request+0x64>

  return status;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]

}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3728      	adds	r7, #40	; 0x28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	2218      	movs	r2, #24
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 f970 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007ad0:	233f      	movs	r3, #63	; 0x3f
 8007ad2:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8007ad4:	f240 1301 	movw	r3, #257	; 0x101
 8007ad8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ada:	1dfb      	adds	r3, r7, #7
 8007adc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fe7d 	bl	80087e8 <hci_send_req>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da01      	bge.n	8007af8 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8007af4:	23ff      	movs	r3, #255	; 0xff
 8007af6:	e000      	b.n	8007afa <aci_gatt_init+0x3e>

  return status;
 8007af8:	79fb      	ldrb	r3, [r7, #7]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b090      	sub	sp, #64	; 0x40
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
 8007b12:	460b      	mov	r3, r1
 8007b14:	71bb      	strb	r3, [r7, #6]
 8007b16:	4613      	mov	r3, r2
 8007b18:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8007b20:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b24:	3340      	adds	r3, #64	; 0x40
 8007b26:	443b      	add	r3, r7
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007b2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b32:	3301      	adds	r3, #1
 8007b34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d103      	bne.n	8007b46 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007b44:	e002      	b.n	8007b4c <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8007b46:	2310      	movs	r3, #16
 8007b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8007b4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b50:	f107 020c 	add.w	r2, r7, #12
 8007b54:	4413      	add	r3, r2
 8007b56:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f919 	bl	8008d94 <memcpy>
  indx +=  uuid_len;
 8007b62:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8007b70:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b74:	3340      	adds	r3, #64	; 0x40
 8007b76:	443b      	add	r3, r7
 8007b78:	79ba      	ldrb	r2, [r7, #6]
 8007b7a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007b7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b82:	3301      	adds	r3, #1
 8007b84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8007b88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b8c:	3340      	adds	r3, #64	; 0x40
 8007b8e:	443b      	add	r3, r7
 8007b90:	797a      	ldrb	r2, [r7, #5]
 8007b92:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007b96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007ba0:	f107 0320 	add.w	r3, r7, #32
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f901 	bl	8008db0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb2:	2218      	movs	r2, #24
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 f8fa 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007bbc:	233f      	movs	r3, #63	; 0x3f
 8007bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8007bc0:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8007bcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007bd0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8007bd2:	f107 0320 	add.w	r3, r7, #32
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8007bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be0:	2100      	movs	r1, #0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fe00 	bl	80087e8 <hci_send_req>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da01      	bge.n	8007bf2 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8007bee:	23ff      	movs	r3, #255	; 0xff
 8007bf0:	e00c      	b.n	8007c0c <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8007bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8007bfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bfe:	e005      	b.n	8007c0c <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8007c00:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c08:	801a      	strh	r2, [r3, #0]

  return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3740      	adds	r7, #64	; 0x40
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b092      	sub	sp, #72	; 0x48
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	603a      	str	r2, [r7, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	80fb      	strh	r3, [r7, #6]
 8007c22:	460b      	mov	r3, r1
 8007c24:	717b      	strb	r3, [r7, #5]
 8007c26:	4613      	mov	r3, r2
 8007c28:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8007c30:	88fb      	ldrh	r3, [r7, #6]
 8007c32:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8007c34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c38:	f107 020c 	add.w	r2, r7, #12
 8007c3c:	4413      	add	r3, r2
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007c42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c46:	3302      	adds	r3, #2
 8007c48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8007c4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c50:	3348      	adds	r3, #72	; 0x48
 8007c52:	443b      	add	r3, r7
 8007c54:	797a      	ldrb	r2, [r7, #5]
 8007c56:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007c5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c5e:	3301      	adds	r3, #1
 8007c60:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8007c64:	797b      	ldrb	r3, [r7, #5]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d103      	bne.n	8007c72 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c70:	e002      	b.n	8007c78 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8007c72:	2310      	movs	r3, #16
 8007c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8007c78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c7c:	f107 020c 	add.w	r2, r7, #12
 8007c80:	4413      	add	r3, r2
 8007c82:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 f883 	bl	8008d94 <memcpy>
  indx +=  uuid_len;
 8007c8e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007c92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007c96:	4413      	add	r3, r2
 8007c98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8007c9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ca0:	3348      	adds	r3, #72	; 0x48
 8007ca2:	443b      	add	r3, r7
 8007ca4:	793a      	ldrb	r2, [r7, #4]
 8007ca6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007caa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cae:	3301      	adds	r3, #1
 8007cb0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8007cb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cb8:	3348      	adds	r3, #72	; 0x48
 8007cba:	443b      	add	r3, r7
 8007cbc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007cc0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8007cce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cd2:	3348      	adds	r3, #72	; 0x48
 8007cd4:	443b      	add	r3, r7
 8007cd6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8007cda:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8007ce8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cec:	3348      	adds	r3, #72	; 0x48
 8007cee:	443b      	add	r3, r7
 8007cf0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8007cf4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8007d02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d06:	3348      	adds	r3, #72	; 0x48
 8007d08:	443b      	add	r3, r7
 8007d0a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8007d0e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007d12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d16:	3301      	adds	r3, #1
 8007d18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8007d1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d20:	3348      	adds	r3, #72	; 0x48
 8007d22:	443b      	add	r3, r7
 8007d24:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007d28:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007d2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d30:	3301      	adds	r3, #1
 8007d32:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f836 	bl	8008db0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d48:	2218      	movs	r2, #24
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 f82f 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007d52:	233f      	movs	r3, #63	; 0x3f
 8007d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8007d56:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8007d62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8007d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8007d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fd35 	bl	80087e8 <hci_send_req>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	da01      	bge.n	8007d88 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8007d84:	23ff      	movs	r3, #255	; 0xff
 8007d86:	e00c      	b.n	8007da2 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8007d88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <aci_gatt_add_char+0x182>
    return resp.status;
 8007d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d94:	e005      	b.n	8007da2 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8007d96:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	801a      	strh	r2, [r3, #0]

  return 0;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3748      	adds	r7, #72	; 0x48
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <aci_gatt_add_char_desc>:
                                  uint8_t accPermissions,
                                  uint8_t gattEvtMask,
                                  uint8_t encryKeySize,
                                  uint8_t isVariable,
                                  uint16_t* descHandle)                     
{
 8007daa:	b590      	push	{r4, r7, lr}
 8007dac:	b0cd      	sub	sp, #308	; 0x134
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4604      	mov	r4, r0
 8007db2:	4608      	mov	r0, r1
 8007db4:	4611      	mov	r1, r2
 8007db6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007dc8:	4622      	mov	r2, r4
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ddc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007de0:	460a      	mov	r2, r1
 8007de2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_char_desc_rp resp;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  serviceHandle = htobs(serviceHandle);
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007df2:	881a      	ldrh	r2, [r3, #0]
 8007df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007dfc:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8007dfe:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e02:	f107 0210 	add.w	r2, r7, #16
 8007e06:	4413      	add	r3, r2
 8007e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e0c:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8007e10:	8812      	ldrh	r2, [r2, #0]
 8007e12:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007e14:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e18:	3302      	adds	r3, #2
 8007e1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  charHandle = htobs(charHandle);
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e30:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8007e32:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e36:	f107 0210 	add.w	r2, r7, #16
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e40:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8007e44:	8812      	ldrh	r2, [r2, #0]
 8007e46:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007e48:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descUuidType;
 8007e52:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e5a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007e5e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8007e62:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 8007e66:	7809      	ldrb	r1, [r1, #0]
 8007e68:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007e6a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  if(descUuidType == UUID_TYPE_16){
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d103      	bne.n	8007e8a <aci_gatt_add_char_desc+0xe0>
    uuid_len = 2;
 8007e82:	2302      	movs	r3, #2
 8007e84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8007e88:	e002      	b.n	8007e90 <aci_gatt_add_char_desc+0xe6>
  }
  else {
    uuid_len = 16;
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }        
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 8007e90:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e94:	f107 0210 	add.w	r2, r7, #16
 8007e98:	18d0      	adds	r0, r2, r3
 8007e9a:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea6:	6819      	ldr	r1, [r3, #0]
 8007ea8:	f000 ff74 	bl	8008d94 <memcpy>
  indx +=  uuid_len;
 8007eac:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8007eb0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descValueMaxLen;
 8007eba:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007ebe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ec2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007ec6:	f897 1140 	ldrb.w	r1, [r7, #320]	; 0x140
 8007eca:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007ecc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descValueLen;
 8007ed6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007eda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ede:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007ee2:	f897 1144 	ldrb.w	r1, [r7, #324]	; 0x144
 8007ee6:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007ee8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007eec:	3301      	adds	r3, #1
 8007eee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 8007ef2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007ef6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007efa:	4413      	add	r3, r2
 8007efc:	2bfb      	cmp	r3, #251	; 0xfb
 8007efe:	dd01      	ble.n	8007f04 <aci_gatt_add_char_desc+0x15a>
    return BLE_STATUS_INVALID_PARAMS;
 8007f00:	2342      	movs	r3, #66	; 0x42
 8007f02:	e095      	b.n	8008030 <aci_gatt_add_char_desc+0x286>
  
  BLUENRG_memcpy(buffer + indx, descValue, descValueLen);
 8007f04:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f08:	f107 0210 	add.w	r2, r7, #16
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007f12:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 ff3c 	bl	8008d94 <memcpy>
  indx += descValueLen;
 8007f1c:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8007f20:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8007f24:	4413      	add	r3, r2
 8007f26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = secPermissions;
 8007f2a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f32:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f36:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
 8007f3a:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f3c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f40:	3301      	adds	r3, #1
 8007f42:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = accPermissions;
 8007f46:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f4e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f52:	f897 1150 	ldrb.w	r1, [r7, #336]	; 0x150
 8007f56:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f58:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = gattEvtMask;
 8007f62:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f6a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f6e:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
 8007f72:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f74:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = encryKeySize;
 8007f7e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f86:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f8a:	f897 1158 	ldrb.w	r1, [r7, #344]	; 0x158
 8007f8e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f90:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f94:	3301      	adds	r3, #1
 8007f96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = isVariable;
 8007f9a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fa2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007fa6:	f897 115c 	ldrb.w	r1, [r7, #348]	; 0x15c
 8007faa:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007fac:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fba:	2203      	movs	r2, #3
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fef6 	bl	8008db0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fc4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007fc8:	2218      	movs	r2, #24
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 feef 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007fd2:	233f      	movs	r3, #63	; 0x3f
 8007fd4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = OCF_GATT_ADD_CHAR_DESC;
 8007fd8:	f240 1305 	movw	r3, #261	; 0x105
 8007fdc:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.cparam = (void *)buffer;
 8007fe0:	f107 0310 	add.w	r3, r7, #16
 8007fe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = indx;
 8007fe8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007fec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &resp;
 8007ff0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  if (hci_send_req(&rq, FALSE) < 0)
 8007ffe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fbef 	bl	80087e8 <hci_send_req>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	da01      	bge.n	8008014 <aci_gatt_add_char_desc+0x26a>
    return BLE_STATUS_TIMEOUT;
 8008010:	23ff      	movs	r3, #255	; 0xff
 8008012:	e00d      	b.n	8008030 <aci_gatt_add_char_desc+0x286>

  if (resp.status) {
 8008014:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <aci_gatt_add_char_desc+0x278>
    return resp.status;
 800801c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8008020:	e006      	b.n	8008030 <aci_gatt_add_char_desc+0x286>
  }
    
  *descHandle = btohs(resp.handle);
 8008022:	f8b7 3111 	ldrh.w	r3, [r7, #273]	; 0x111
 8008026:	b29a      	uxth	r2, r3
 8008028:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800802c:	801a      	strh	r2, [r3, #0]

  return 0;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}

0800803a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800803a:	b5b0      	push	{r4, r5, r7, lr}
 800803c:	b0ca      	sub	sp, #296	; 0x128
 800803e:	af00      	add	r7, sp, #0
 8008040:	4605      	mov	r5, r0
 8008042:	460c      	mov	r4, r1
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800804c:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8008050:	462a      	mov	r2, r5
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008058:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800805c:	4622      	mov	r2, r4
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008064:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008068:	4602      	mov	r2, r0
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008070:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008074:	460a      	mov	r2, r1
 8008076:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800807e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008082:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2bfa      	cmp	r3, #250	; 0xfa
 800808a:	d901      	bls.n	8008090 <aci_gatt_update_char_value+0x56>
    return BLE_STATUS_INVALID_PARAMS;
 800808c:	2342      	movs	r3, #66	; 0x42
 800808e:	e09e      	b.n	80081ce <aci_gatt_update_char_value+0x194>

  servHandle = htobs(servHandle);
 8008090:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008094:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8008098:	881a      	ldrh	r2, [r3, #0]
 800809a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800809e:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80080a2:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80080a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	4413      	add	r3, r2
 80080ae:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80080b2:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 80080b6:	8812      	ldrh	r2, [r2, #0]
 80080b8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80080ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080be:	3302      	adds	r3, #2
 80080c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  charHandle = htobs(charHandle);
 80080c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080cc:	881a      	ldrh	r2, [r3, #0]
 80080ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080d6:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80080d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080dc:	f107 0208 	add.w	r2, r7, #8
 80080e0:	4413      	add	r3, r2
 80080e2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80080e6:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80080ea:	8812      	ldrh	r2, [r2, #0]
 80080ec:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f2:	3302      	adds	r3, #2
 80080f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValOffset;
 80080f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008100:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008104:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8008108:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 800810c:	7809      	ldrb	r1, [r1, #0]
 800810e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008114:	3301      	adds	r3, #1
 8008116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValueLen;
 800811a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800811e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008122:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008126:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800812a:	f5a1 7193 	sub.w	r1, r1, #294	; 0x126
 800812e:	7809      	ldrb	r1, [r1, #0]
 8008130:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008136:	3301      	adds	r3, #1
 8008138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800813c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008140:	f107 0208 	add.w	r2, r7, #8
 8008144:	18d0      	adds	r0, r2, r3
 8008146:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800814a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8008156:	f000 fe1d 	bl	8008d94 <memcpy>
  indx +=  charValueLen;
 800815a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800815e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008162:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4413      	add	r3, r2
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800816e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008172:	2218      	movs	r2, #24
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fe1a 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800817c:	233f      	movs	r3, #63	; 0x3f
 800817e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008182:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008186:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008196:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 800819a:	f207 130b 	addw	r3, r7, #267	; 0x10b
 800819e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 80081a8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fb1a 	bl	80087e8 <hci_send_req>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da01      	bge.n	80081be <aci_gatt_update_char_value+0x184>
    return BLE_STATUS_TIMEOUT;
 80081ba:	23ff      	movs	r3, #255	; 0xff
 80081bc:	e007      	b.n	80081ce <aci_gatt_update_char_value+0x194>

  if (status) {
 80081be:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <aci_gatt_update_char_value+0x192>
    return status;
 80081c6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80081ca:	e000      	b.n	80081ce <aci_gatt_update_char_value+0x194>
  }

  return 0;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bdb0      	pop	{r4, r5, r7, pc}

080081d8 <aci_gatt_update_char_value_ext_IDB05A1>:

tBleStatus aci_gatt_update_char_value_ext_IDB05A1(uint16_t service_handle, uint16_t char_handle,
                                                  uint8_t update_type, uint16_t char_length,
                                                  uint16_t value_offset, uint8_t value_length,
                                                  const uint8_t* value)
{
 80081d8:	b5b0      	push	{r4, r5, r7, lr}
 80081da:	b0ca      	sub	sp, #296	; 0x128
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4605      	mov	r5, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	4610      	mov	r0, r2
 80081e4:	4619      	mov	r1, r3
 80081e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081ea:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80081ee:	462a      	mov	r2, r5
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80081fa:	4622      	mov	r2, r4
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008202:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008206:	4602      	mov	r2, r0
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800820e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008212:	460a      	mov	r2, r1
 8008214:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  gatt_upd_char_val_ext_cp cp;
  
  if(value_length > sizeof(cp.value))
 8008216:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800821a:	2bf6      	cmp	r3, #246	; 0xf6
 800821c:	d901      	bls.n	8008222 <aci_gatt_update_char_value_ext_IDB05A1+0x4a>
    return BLE_STATUS_INVALID_PARAMS;
 800821e:	2342      	movs	r3, #66	; 0x42
 8008220:	e06c      	b.n	80082fc <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  cp.service_handle = htobs(service_handle);
 8008222:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008226:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800822a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800822e:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8008232:	8812      	ldrh	r2, [r2, #0]
 8008234:	801a      	strh	r2, [r3, #0]
  cp.char_handle = htobs(char_handle);
 8008236:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800823a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800823e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008242:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8008246:	8812      	ldrh	r2, [r2, #0]
 8008248:	805a      	strh	r2, [r3, #2]
  cp.update_type = update_type;
 800824a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800824e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008252:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008256:	f2a2 1225 	subw	r2, r2, #293	; 0x125
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	711a      	strb	r2, [r3, #4]
  cp.char_length = htobs(char_length);
 800825e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008262:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008266:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800826a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800826e:	8812      	ldrh	r2, [r2, #0]
 8008270:	f8a3 2005 	strh.w	r2, [r3, #5]
  cp.value_offset = htobs(value_offset);
 8008274:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800827c:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8008280:	f8a3 2007 	strh.w	r2, [r3, #7]
  cp.value_length = value_length;
 8008284:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008288:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800828c:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8008290:	725a      	strb	r2, [r3, #9]
  BLUENRG_memcpy(cp.value, value, value_length);
 8008292:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	330a      	adds	r3, #10
 800829c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd77 	bl	8008d94 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082aa:	2218      	movs	r2, #24
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fd7e 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082b4:	233f      	movs	r3, #63	; 0x3f
 80082b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = OCF_GATT_UPD_CHAR_VAL_EXT;
 80082ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80082be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = &cp;
 80082c2:	f107 030c 	add.w	r3, r7, #12
 80082c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = GATT_UPD_CHAR_VAL_EXT_CP_SIZE + value_length;
 80082ca:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 80082ce:	330a      	adds	r3, #10
 80082d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082d4:	f207 130f 	addw	r3, r7, #271	; 0x10f
 80082d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082dc:	2301      	movs	r3, #1
 80082de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  if (hci_send_req(&rq, FALSE) < 0)
 80082e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fa7d 	bl	80087e8 <hci_send_req>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da01      	bge.n	80082f8 <aci_gatt_update_char_value_ext_IDB05A1+0x120>
    return BLE_STATUS_TIMEOUT;
 80082f4:	23ff      	movs	r3, #255	; 0xff
 80082f6:	e001      	b.n	80082fc <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  return status;
 80082f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008302:	46bd      	mov	sp, r7
 8008304:	bdb0      	pop	{r4, r5, r7, pc}

08008306 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b0ca      	sub	sp, #296	; 0x128
 800830a:	af00      	add	r7, sp, #0
 800830c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008310:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800831a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800831e:	4602      	mov	r2, r0
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008326:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800832a:	460a      	mov	r2, r1
 800832c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8008334:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008338:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2bff      	cmp	r3, #255	; 0xff
 8008340:	d101      	bne.n	8008346 <aci_hal_write_config_data+0x40>
    return BLE_STATUS_INVALID_PARAMS;
 8008342:	2342      	movs	r3, #66	; 0x42
 8008344:	e065      	b.n	8008412 <aci_hal_write_config_data+0x10c>

  buffer[indx] = offset;
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800834a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800834e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008352:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8008356:	f2a1 1121 	subw	r1, r1, #289	; 0x121
 800835a:	7809      	ldrb	r1, [r1, #0]
 800835c:	54d1      	strb	r1, [r2, r3]
  indx++;
 800835e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008362:	3301      	adds	r3, #1
 8008364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 8008368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800836c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008370:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008374:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8008378:	f5a1 7191 	sub.w	r1, r1, #290	; 0x122
 800837c:	7809      	ldrb	r1, [r1, #0]
 800837e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008384:	3301      	adds	r3, #1
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800838a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800838e:	f107 0208 	add.w	r2, r7, #8
 8008392:	18d0      	adds	r0, r2, r3
 8008394:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008398:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80083a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083a6:	6819      	ldr	r1, [r3, #0]
 80083a8:	f000 fcf4 	bl	8008d94 <memcpy>
  indx +=  len;
 80083ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80083b0:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80083b4:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	4413      	add	r3, r2
 80083bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80083c4:	2218      	movs	r2, #24
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fcf1 	bl	8008db0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80083ce:	233f      	movs	r3, #63	; 0x3f
 80083d0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80083d4:	230c      	movs	r3, #12
 80083d6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 80083da:	f107 0308 	add.w	r3, r7, #8
 80083de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 80083e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 80083ea:	f207 130b 	addw	r3, r7, #267	; 0x10b
 80083ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 80083f8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80083fc:	2100      	movs	r1, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f9f2 	bl	80087e8 <hci_send_req>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	da01      	bge.n	800840e <aci_hal_write_config_data+0x108>
    return BLE_STATUS_TIMEOUT;
 800840a:	23ff      	movs	r3, #255	; 0xff
 800840c:	e001      	b.n	8008412 <aci_hal_write_config_data+0x10c>

  return status;
 800840e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 8008412:	4618      	mov	r0, r3
 8008414:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b089      	sub	sp, #36	; 0x24
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008426:	f107 0410 	add.w	r4, r7, #16
 800842a:	f107 0215 	add.w	r2, r7, #21
 800842e:	f107 0112 	add.w	r1, r7, #18
 8008432:	f107 0016 	add.w	r0, r7, #22
 8008436:	f107 030e 	add.w	r3, r7, #14
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4623      	mov	r3, r4
 800843e:	f000 f853 	bl	80084e8 <hci_le_read_local_version>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d126      	bne.n	800849a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800844c:	8a7b      	ldrh	r3, [r7, #18]
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	b29b      	uxth	r3, r3
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008458:	8a7b      	ldrh	r3, [r7, #18]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b29a      	uxth	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b21a      	sxth	r2, r3
 8008468:	89fb      	ldrh	r3, [r7, #14]
 800846a:	091b      	lsrs	r3, r3, #4
 800846c:	b29b      	uxth	r3, r3
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	b21b      	sxth	r3, r3
 8008472:	b2db      	uxtb	r3, r3
 8008474:	b21b      	sxth	r3, r3
 8008476:	4313      	orrs	r3, r2
 8008478:	b21b      	sxth	r3, r3
 800847a:	b29a      	uxth	r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b21a      	sxth	r2, r3
 8008486:	89fb      	ldrh	r3, [r7, #14]
 8008488:	b21b      	sxth	r3, r3
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	b21b      	sxth	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	b21b      	sxth	r3, r3
 8008494:	b29a      	uxth	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}

080084a4 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	2218      	movs	r2, #24
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fc7c 	bl	8008db0 <memset>
  rq.ogf = OGF_HOST_CTL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80084bc:	2303      	movs	r3, #3
 80084be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80084c0:	1dfb      	adds	r3, r7, #7
 80084c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80084c4:	2301      	movs	r3, #1
 80084c6:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f98a 	bl	80087e8 <hci_send_req>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da01      	bge.n	80084de <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80084da:	23ff      	movs	r3, #255	; 0xff
 80084dc:	e000      	b.n	80084e0 <hci_reset+0x3c>
  
  return status;  
 80084de:	79fb      	ldrb	r3, [r7, #7]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	2209      	movs	r2, #9
 80084fc:	2100      	movs	r1, #0
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fc56 	bl	8008db0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008504:	f107 0320 	add.w	r3, r7, #32
 8008508:	2218      	movs	r2, #24
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fc4f 	bl	8008db0 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008512:	2304      	movs	r3, #4
 8008514:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008516:	2301      	movs	r3, #1
 8008518:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008528:	2309      	movs	r3, #9
 800852a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800852c:	f107 0320 	add.w	r3, r7, #32
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f958 	bl	80087e8 <hci_send_req>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	da01      	bge.n	8008542 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800853e:	23ff      	movs	r3, #255	; 0xff
 8008540:	e018      	b.n	8008574 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008542:	7d3b      	ldrb	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <hci_le_read_local_version+0x64>
    return resp.status;
 8008548:	7d3b      	ldrb	r3, [r7, #20]
 800854a:	e013      	b.n	8008574 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800854c:	7d7a      	ldrb	r2, [r7, #21]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008552:	8afa      	ldrh	r2, [r7, #22]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008558:	7e3a      	ldrb	r2, [r7, #24]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800855e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008562:	b29a      	uxth	r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008568:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800856c:	b29a      	uxth	r2, r3
 800856e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008570:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3738      	adds	r7, #56	; 0x38
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3308      	adds	r3, #8
 8008588:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b04      	cmp	r3, #4
 8008590:	d001      	beq.n	8008596 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008592:	2301      	movs	r3, #1
 8008594:	e00c      	b.n	80085b0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3302      	adds	r3, #2
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80085a4:	3b03      	subs	r3, #3
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d001      	beq.n	80085ae <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80085aa:	2302      	movs	r3, #2
 80085ac:	e000      	b.n	80085b0 <verify_packet+0x34>
  
  return 0;      
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80085bc:	b590      	push	{r4, r7, lr}
 80085be:	b0c7      	sub	sp, #284	; 0x11c
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80085cc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085d6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80085da:	4622      	mov	r2, r4
 80085dc:	801a      	strh	r2, [r3, #0]
 80085de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085e6:	4602      	mov	r2, r0
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085ee:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80085f2:	460a      	mov	r2, r1
 80085f4:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80085f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008606:	b21a      	sxth	r2, r3
 8008608:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800860c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	b21b      	sxth	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b21b      	sxth	r3, r3
 800861a:	b29a      	uxth	r2, r3
 800861c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008624:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8008626:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800862a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008632:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 800863a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800863e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008642:	2201      	movs	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	3301      	adds	r3, #1
 800864c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008650:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8008654:	8811      	ldrh	r1, [r2, #0]
 8008656:	7892      	ldrb	r2, [r2, #2]
 8008658:	8019      	strh	r1, [r3, #0]
 800865a:	709a      	strb	r2, [r3, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800865c:	f107 0318 	add.w	r3, r7, #24
 8008660:	3304      	adds	r3, #4
 8008662:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008666:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008670:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8008674:	6809      	ldr	r1, [r1, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fb8c 	bl	8008d94 <memcpy>
  
  if (hciContext.io.Send)
 800867c:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <send_cmd+0xf0>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00d      	beq.n	80086a0 <send_cmd+0xe4>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <send_cmd+0xf0>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800868c:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	b292      	uxth	r2, r2
 8008694:	3204      	adds	r2, #4
 8008696:	b291      	uxth	r1, r2
 8008698:	f107 0218 	add.w	r2, r7, #24
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
  }
}
 80086a0:	bf00      	nop
 80086a2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd90      	pop	{r4, r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000abc 	.word	0x20000abc

080086b0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80086ba:	e00a      	b.n	80086d2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4619      	mov	r1, r3
 80086c2:	6838      	ldr	r0, [r7, #0]
 80086c4:	f000 faec 	bl	8008ca0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa53 	bl	8008b78 <list_insert_head>
  while (!list_is_empty(src_list))
 80086d2:	6838      	ldr	r0, [r7, #0]
 80086d4:	f000 fa2e 	bl	8008b34 <list_is_empty>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ee      	beq.n	80086bc <move_list+0xc>
  }
}
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80086ee:	e009      	b.n	8008704 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <free_event_list+0x34>)
 80086f6:	f000 faac 	bl	8008c52 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4619      	mov	r1, r3
 80086fe:	4808      	ldr	r0, [pc, #32]	; (8008720 <free_event_list+0x38>)
 8008700:	f000 fa60 	bl	8008bc4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008704:	4806      	ldr	r0, [pc, #24]	; (8008720 <free_event_list+0x38>)
 8008706:	f000 faf2 	bl	8008cee <list_get_size>
 800870a:	4603      	mov	r3, r0
 800870c:	2b01      	cmp	r3, #1
 800870e:	ddef      	ble.n	80086f0 <free_event_list+0x8>
  }
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000578 	.word	0x20000578
 8008720:	20000570 	.word	0x20000570

08008724 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008734:	4a18      	ldr	r2, [pc, #96]	; (8008798 <hci_init+0x74>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800873a:	4818      	ldr	r0, [pc, #96]	; (800879c <hci_init+0x78>)
 800873c:	f000 f9ea 	bl	8008b14 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008740:	4817      	ldr	r0, [pc, #92]	; (80087a0 <hci_init+0x7c>)
 8008742:	f000 f9e7 	bl	8008b14 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008746:	f7f8 f863 	bl	8000810 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
 800874e:	e00d      	b.n	800876c <hci_init+0x48>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	4a12      	ldr	r2, [pc, #72]	; (80087a4 <hci_init+0x80>)
 800875c:	4413      	add	r3, r2
 800875e:	4619      	mov	r1, r3
 8008760:	480e      	ldr	r0, [pc, #56]	; (800879c <hci_init+0x78>)
 8008762:	f000 fa2f 	bl	8008bc4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	3301      	adds	r3, #1
 800876a:	73fb      	strb	r3, [r7, #15]
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b04      	cmp	r3, #4
 8008770:	d9ee      	bls.n	8008750 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <hci_init+0x74>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <hci_init+0x5e>
 800877a:	4b07      	ldr	r3, [pc, #28]	; (8008798 <hci_init+0x74>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2000      	movs	r0, #0
 8008780:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <hci_init+0x74>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <hci_init+0x6c>
 800878a:	4b03      	ldr	r3, [pc, #12]	; (8008798 <hci_init+0x74>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4798      	blx	r3
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000abc 	.word	0x20000abc
 800879c:	20000570 	.word	0x20000570
 80087a0:	20000578 	.word	0x20000578
 80087a4:	20000580 	.word	0x20000580

080087a8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a0b      	ldr	r2, [pc, #44]	; (80087e4 <hci_register_io_bus+0x3c>)
 80087b6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <hci_register_io_bus+0x3c>)
 80087be:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <hci_register_io_bus+0x3c>)
 80087c6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	4a05      	ldr	r2, [pc, #20]	; (80087e4 <hci_register_io_bus+0x3c>)
 80087ce:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <hci_register_io_bus+0x3c>)
 80087d6:	6093      	str	r3, [r2, #8]
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	20000abc 	.word	0x20000abc

080087e8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08e      	sub	sp, #56	; 0x38
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087fe:	b21a      	sxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	029b      	lsls	r3, r3, #10
 8008806:	b21b      	sxth	r3, r3
 8008808:	4313      	orrs	r3, r2
 800880a:	b21b      	sxth	r3, r3
 800880c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008812:	f107 0308 	add.w	r3, r7, #8
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f97c 	bl	8008b14 <list_init_head>

  free_event_list();
 800881c:	f7ff ff64 	bl	80086e8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	8818      	ldrh	r0, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8859      	ldrh	r1, [r3, #2]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f7ff fec3 	bl	80085bc <send_cmd>
  
  if (async)
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <hci_send_req+0x58>
  {
    return 0;
 800883c:	2300      	movs	r3, #0
 800883e:	e0e5      	b.n	8008a0c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008840:	f7f9 ffda 	bl	80027f8 <HAL_GetTick>
 8008844:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008846:	f7f9 ffd7 	bl	80027f8 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008854:	f200 80b6 	bhi.w	80089c4 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008858:	486e      	ldr	r0, [pc, #440]	; (8008a14 <hci_send_req+0x22c>)
 800885a:	f000 f96b 	bl	8008b34 <list_is_empty>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d000      	beq.n	8008866 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008864:	e7ef      	b.n	8008846 <hci_send_req+0x5e>
      {
        break;
 8008866:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008868:	f107 0310 	add.w	r3, r7, #16
 800886c:	4619      	mov	r1, r3
 800886e:	4869      	ldr	r0, [pc, #420]	; (8008a14 <hci_send_req+0x22c>)
 8008870:	f000 f9ef 	bl	8008c52 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	3308      	adds	r3, #8
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b04      	cmp	r3, #4
 8008880:	d17b      	bne.n	800897a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	3301      	adds	r3, #1
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3308      	adds	r3, #8
 800888c:	3303      	adds	r3, #3
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8008896:	3b03      	subs	r3, #3
 8008898:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b3e      	cmp	r3, #62	; 0x3e
 80088a0:	d04d      	beq.n	800893e <hci_send_req+0x156>
 80088a2:	2b3e      	cmp	r3, #62	; 0x3e
 80088a4:	dc6b      	bgt.n	800897e <hci_send_req+0x196>
 80088a6:	2b10      	cmp	r3, #16
 80088a8:	f000 808e 	beq.w	80089c8 <hci_send_req+0x1e0>
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	dc66      	bgt.n	800897e <hci_send_req+0x196>
 80088b0:	2b0e      	cmp	r3, #14
 80088b2:	d024      	beq.n	80088fe <hci_send_req+0x116>
 80088b4:	2b0f      	cmp	r3, #15
 80088b6:	d162      	bne.n	800897e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	885b      	ldrh	r3, [r3, #2]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088c4:	429a      	cmp	r2, r3
 80088c6:	f040 8081 	bne.w	80089cc <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d004      	beq.n	80088dc <hci_send_req+0xf4>
          if (cs->status) {
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d053      	beq.n	8008982 <hci_send_req+0x19a>
            goto failed;
 80088da:	e07a      	b.n	80089d2 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	695a      	ldr	r2, [r3, #20]
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	bf28      	it	cs
 80088e6:	461a      	movcs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6918      	ldr	r0, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f8:	f000 fa4c 	bl	8008d94 <memcpy>
        goto done;
 80088fc:	e07a      	b.n	80089f4 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008908:	b29b      	uxth	r3, r3
 800890a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800890c:	429a      	cmp	r2, r3
 800890e:	d15f      	bne.n	80089d0 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	3303      	adds	r3, #3
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	3b03      	subs	r3, #3
 800891a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	429a      	cmp	r2, r3
 8008924:	bf28      	it	cs
 8008926:	461a      	movcs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6918      	ldr	r0, [r3, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	461a      	mov	r2, r3
 8008936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008938:	f000 fa2c 	bl	8008d94 <memcpy>
        goto done;
 800893c:	e05a      	b.n	80089f4 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d11a      	bne.n	8008986 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	3b01      	subs	r3, #1
 8008954:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695a      	ldr	r2, [r3, #20]
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	429a      	cmp	r2, r3
 800895e:	bf28      	it	cs
 8008960:	461a      	movcs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	1c59      	adds	r1, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	461a      	mov	r2, r3
 8008974:	f000 fa0e 	bl	8008d94 <memcpy>
        goto done;
 8008978:	e03c      	b.n	80089f4 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800897a:	bf00      	nop
 800897c:	e004      	b.n	8008988 <hci_send_req+0x1a0>
        break;
 800897e:	bf00      	nop
 8008980:	e002      	b.n	8008988 <hci_send_req+0x1a0>
          break;
 8008982:	bf00      	nop
 8008984:	e000      	b.n	8008988 <hci_send_req+0x1a0>
          break;
 8008986:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008988:	4823      	ldr	r0, [pc, #140]	; (8008a18 <hci_send_req+0x230>)
 800898a:	f000 f8d3 	bl	8008b34 <list_is_empty>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00d      	beq.n	80089b0 <hci_send_req+0x1c8>
 8008994:	481f      	ldr	r0, [pc, #124]	; (8008a14 <hci_send_req+0x22c>)
 8008996:	f000 f8cd 	bl	8008b34 <list_is_empty>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4619      	mov	r1, r3
 80089a4:	481c      	ldr	r0, [pc, #112]	; (8008a18 <hci_send_req+0x230>)
 80089a6:	f000 f90d 	bl	8008bc4 <list_insert_tail>
      hciReadPacket=NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	e008      	b.n	80089c2 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f903 	bl	8008bc4 <list_insert_tail>
      hciReadPacket=NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	613b      	str	r3, [r7, #16]
  {
 80089c2:	e73d      	b.n	8008840 <hci_send_req+0x58>
        goto failed;
 80089c4:	bf00      	nop
 80089c6:	e004      	b.n	80089d2 <hci_send_req+0x1ea>
        goto failed;
 80089c8:	bf00      	nop
 80089ca:	e002      	b.n	80089d2 <hci_send_req+0x1ea>
          goto failed;
 80089cc:	bf00      	nop
 80089ce:	e000      	b.n	80089d2 <hci_send_req+0x1ea>
          goto failed;
 80089d0:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4619      	mov	r1, r3
 80089dc:	480e      	ldr	r0, [pc, #56]	; (8008a18 <hci_send_req+0x230>)
 80089de:	f000 f8cb 	bl	8008b78 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80089e2:	f107 0308 	add.w	r3, r7, #8
 80089e6:	4619      	mov	r1, r3
 80089e8:	480a      	ldr	r0, [pc, #40]	; (8008a14 <hci_send_req+0x22c>)
 80089ea:	f7ff fe61 	bl	80086b0 <move_list>

  return -1;
 80089ee:	f04f 33ff 	mov.w	r3, #4294967295
 80089f2:	e00b      	b.n	8008a0c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4619      	mov	r1, r3
 80089f8:	4807      	ldr	r0, [pc, #28]	; (8008a18 <hci_send_req+0x230>)
 80089fa:	f000 f8bd 	bl	8008b78 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	4619      	mov	r1, r3
 8008a04:	4803      	ldr	r0, [pc, #12]	; (8008a14 <hci_send_req+0x22c>)
 8008a06:	f7ff fe53 	bl	80086b0 <move_list>

  return 0;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3738      	adds	r7, #56	; 0x38
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000578 	.word	0x20000578
 8008a18:	20000570 	.word	0x20000570

08008a1c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008a26:	e013      	b.n	8008a50 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008a28:	1d3b      	adds	r3, r7, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	480e      	ldr	r0, [pc, #56]	; (8008a68 <hci_user_evt_proc+0x4c>)
 8008a2e:	f000 f910 	bl	8008c52 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <hci_user_evt_proc+0x50>)
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <hci_user_evt_proc+0x50>)
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	3208      	adds	r2, #8
 8008a42:	4610      	mov	r0, r2
 8008a44:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4809      	ldr	r0, [pc, #36]	; (8008a70 <hci_user_evt_proc+0x54>)
 8008a4c:	f000 f8ba 	bl	8008bc4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008a50:	4805      	ldr	r0, [pc, #20]	; (8008a68 <hci_user_evt_proc+0x4c>)
 8008a52:	f000 f86f 	bl	8008b34 <list_is_empty>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0e5      	beq.n	8008a28 <hci_user_evt_proc+0xc>
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000578 	.word	0x20000578
 8008a6c:	20000abc 	.word	0x20000abc
 8008a70:	20000570 	.word	0x20000570

08008a74 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008a84:	4820      	ldr	r0, [pc, #128]	; (8008b08 <hci_notify_asynch_evt+0x94>)
 8008a86:	f000 f855 	bl	8008b34 <list_is_empty>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d133      	bne.n	8008af8 <hci_notify_asynch_evt+0x84>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4619      	mov	r1, r3
 8008a96:	481c      	ldr	r0, [pc, #112]	; (8008b08 <hci_notify_asynch_evt+0x94>)
 8008a98:	f000 f8db 	bl	8008c52 <list_remove_head>
    
    if (hciContext.io.Receive)
 8008a9c:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <hci_notify_asynch_evt+0x98>)
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d02b      	beq.n	8008afc <hci_notify_asynch_evt+0x88>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008aa4:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <hci_notify_asynch_evt+0x98>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	3208      	adds	r2, #8
 8008aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008ab8:	7cfb      	ldrb	r3, [r7, #19]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d016      	beq.n	8008aec <hci_notify_asynch_evt+0x78>
      {                    
        hciReadPacket->data_len = data_len;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	7cfa      	ldrb	r2, [r7, #19]
 8008ac2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (verify_packet(hciReadPacket) == 0)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff fd57 	bl	800857c <verify_packet>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <hci_notify_asynch_evt+0x6c>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	480d      	ldr	r0, [pc, #52]	; (8008b10 <hci_notify_asynch_evt+0x9c>)
 8008ada:	f000 f873 	bl	8008bc4 <list_insert_tail>
 8008ade:	e00d      	b.n	8008afc <hci_notify_asynch_evt+0x88>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4808      	ldr	r0, [pc, #32]	; (8008b08 <hci_notify_asynch_evt+0x94>)
 8008ae6:	f000 f847 	bl	8008b78 <list_insert_head>
 8008aea:	e007      	b.n	8008afc <hci_notify_asynch_evt+0x88>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4619      	mov	r1, r3
 8008af0:	4805      	ldr	r0, [pc, #20]	; (8008b08 <hci_notify_asynch_evt+0x94>)
 8008af2:	f000 f841 	bl	8008b78 <list_insert_head>
 8008af6:	e001      	b.n	8008afc <hci_notify_asynch_evt+0x88>
      }
    }
  }
  else 
  {
    ret = 1;
 8008af8:	2301      	movs	r3, #1
 8008afa:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008afc:	697b      	ldr	r3, [r7, #20]

}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000570 	.word	0x20000570
 8008b0c:	20000abc 	.word	0x20000abc
 8008b10:	20000578 	.word	0x20000578

08008b14 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	605a      	str	r2, [r3, #4]
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b42:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b46:	b672      	cpsid	i
}
 8008b48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d102      	bne.n	8008b5a <list_is_empty+0x26>
  {
    return_value = 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	e001      	b.n	8008b5e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f383 8810 	msr	PRIMASK, r3
}
 8008b68:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b82:	f3ef 8310 	mrs	r3, PRIMASK
 8008b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b88:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b8c:	b672      	cpsid	i
}
 8008b8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	605a      	str	r2, [r3, #4]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f383 8810 	msr	PRIMASK, r3
}
 8008bb6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008bb8:	bf00      	nop
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bce:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd8:	b672      	cpsid	i
}
 8008bda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f383 8810 	msr	PRIMASK, r3
}
 8008c02:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c04:	bf00      	nop
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c18:	f3ef 8310 	mrs	r3, PRIMASK
 8008c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c22:	b672      	cpsid	i
}
 8008c24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6812      	ldr	r2, [r2, #0]
 8008c2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6852      	ldr	r2, [r2, #4]
 8008c38:	605a      	str	r2, [r3, #4]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f383 8810 	msr	PRIMASK, r3
}
 8008c44:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c62:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c66:	b672      	cpsid	i
}
 8008c68:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff ffca 	bl	8008c10 <list_remove_node>
  (*node)->next = NULL;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	605a      	str	r2, [r3, #4]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f383 8810 	msr	PRIMASK, r3
}
 8008c96:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c98:	bf00      	nop
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008caa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cb4:	b672      	cpsid	i
}
 8008cb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff ffa3 	bl	8008c10 <list_remove_node>
  (*node)->next = NULL;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f383 8810 	msr	PRIMASK, r3
}
 8008ce4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008ce6:	bf00      	nop
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b089      	sub	sp, #36	; 0x24
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfe:	613b      	str	r3, [r7, #16]
  return(result);
 8008d00:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d04:	b672      	cpsid	i
}
 8008d06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008d0e:	e005      	b.n	8008d1c <list_get_size+0x2e>
  {
    size++;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d1f5      	bne.n	8008d10 <list_get_size+0x22>
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f383 8810 	msr	PRIMASK, r3
}
 8008d2e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008d30:	69fb      	ldr	r3, [r7, #28]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3724      	adds	r7, #36	; 0x24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <__errno>:
 8008d40:	4b01      	ldr	r3, [pc, #4]	; (8008d48 <__errno+0x8>)
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	20000074 	.word	0x20000074

08008d4c <__libc_init_array>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	4d0d      	ldr	r5, [pc, #52]	; (8008d84 <__libc_init_array+0x38>)
 8008d50:	4c0d      	ldr	r4, [pc, #52]	; (8008d88 <__libc_init_array+0x3c>)
 8008d52:	1b64      	subs	r4, r4, r5
 8008d54:	10a4      	asrs	r4, r4, #2
 8008d56:	2600      	movs	r6, #0
 8008d58:	42a6      	cmp	r6, r4
 8008d5a:	d109      	bne.n	8008d70 <__libc_init_array+0x24>
 8008d5c:	4d0b      	ldr	r5, [pc, #44]	; (8008d8c <__libc_init_array+0x40>)
 8008d5e:	4c0c      	ldr	r4, [pc, #48]	; (8008d90 <__libc_init_array+0x44>)
 8008d60:	f001 f832 	bl	8009dc8 <_init>
 8008d64:	1b64      	subs	r4, r4, r5
 8008d66:	10a4      	asrs	r4, r4, #2
 8008d68:	2600      	movs	r6, #0
 8008d6a:	42a6      	cmp	r6, r4
 8008d6c:	d105      	bne.n	8008d7a <__libc_init_array+0x2e>
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d74:	4798      	blx	r3
 8008d76:	3601      	adds	r6, #1
 8008d78:	e7ee      	b.n	8008d58 <__libc_init_array+0xc>
 8008d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7e:	4798      	blx	r3
 8008d80:	3601      	adds	r6, #1
 8008d82:	e7f2      	b.n	8008d6a <__libc_init_array+0x1e>
 8008d84:	0800a494 	.word	0x0800a494
 8008d88:	0800a494 	.word	0x0800a494
 8008d8c:	0800a494 	.word	0x0800a494
 8008d90:	0800a498 	.word	0x0800a498

08008d94 <memcpy>:
 8008d94:	440a      	add	r2, r1
 8008d96:	4291      	cmp	r1, r2
 8008d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d9c:	d100      	bne.n	8008da0 <memcpy+0xc>
 8008d9e:	4770      	bx	lr
 8008da0:	b510      	push	{r4, lr}
 8008da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008daa:	4291      	cmp	r1, r2
 8008dac:	d1f9      	bne.n	8008da2 <memcpy+0xe>
 8008dae:	bd10      	pop	{r4, pc}

08008db0 <memset>:
 8008db0:	4402      	add	r2, r0
 8008db2:	4603      	mov	r3, r0
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d100      	bne.n	8008dba <memset+0xa>
 8008db8:	4770      	bx	lr
 8008dba:	f803 1b01 	strb.w	r1, [r3], #1
 8008dbe:	e7f9      	b.n	8008db4 <memset+0x4>

08008dc0 <iprintf>:
 8008dc0:	b40f      	push	{r0, r1, r2, r3}
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <iprintf+0x2c>)
 8008dc4:	b513      	push	{r0, r1, r4, lr}
 8008dc6:	681c      	ldr	r4, [r3, #0]
 8008dc8:	b124      	cbz	r4, 8008dd4 <iprintf+0x14>
 8008dca:	69a3      	ldr	r3, [r4, #24]
 8008dcc:	b913      	cbnz	r3, 8008dd4 <iprintf+0x14>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fa5e 	bl	8009290 <__sinit>
 8008dd4:	ab05      	add	r3, sp, #20
 8008dd6:	9a04      	ldr	r2, [sp, #16]
 8008dd8:	68a1      	ldr	r1, [r4, #8]
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 fc67 	bl	80096b0 <_vfiprintf_r>
 8008de2:	b002      	add	sp, #8
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	b004      	add	sp, #16
 8008dea:	4770      	bx	lr
 8008dec:	20000074 	.word	0x20000074

08008df0 <_puts_r>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	460e      	mov	r6, r1
 8008df4:	4605      	mov	r5, r0
 8008df6:	b118      	cbz	r0, 8008e00 <_puts_r+0x10>
 8008df8:	6983      	ldr	r3, [r0, #24]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <_puts_r+0x10>
 8008dfc:	f000 fa48 	bl	8009290 <__sinit>
 8008e00:	69ab      	ldr	r3, [r5, #24]
 8008e02:	68ac      	ldr	r4, [r5, #8]
 8008e04:	b913      	cbnz	r3, 8008e0c <_puts_r+0x1c>
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fa42 	bl	8009290 <__sinit>
 8008e0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ec0 <_puts_r+0xd0>)
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	d120      	bne.n	8008e54 <_puts_r+0x64>
 8008e12:	686c      	ldr	r4, [r5, #4]
 8008e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e16:	07db      	lsls	r3, r3, #31
 8008e18:	d405      	bmi.n	8008e26 <_puts_r+0x36>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	0598      	lsls	r0, r3, #22
 8008e1e:	d402      	bmi.n	8008e26 <_puts_r+0x36>
 8008e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e22:	f000 fad3 	bl	80093cc <__retarget_lock_acquire_recursive>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	d51d      	bpl.n	8008e68 <_puts_r+0x78>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	b1db      	cbz	r3, 8008e68 <_puts_r+0x78>
 8008e30:	3e01      	subs	r6, #1
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	60a3      	str	r3, [r4, #8]
 8008e3c:	bb39      	cbnz	r1, 8008e8e <_puts_r+0x9e>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da38      	bge.n	8008eb4 <_puts_r+0xc4>
 8008e42:	4622      	mov	r2, r4
 8008e44:	210a      	movs	r1, #10
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 f848 	bl	8008edc <__swbuf_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d011      	beq.n	8008e74 <_puts_r+0x84>
 8008e50:	250a      	movs	r5, #10
 8008e52:	e011      	b.n	8008e78 <_puts_r+0x88>
 8008e54:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <_puts_r+0xd4>)
 8008e56:	429c      	cmp	r4, r3
 8008e58:	d101      	bne.n	8008e5e <_puts_r+0x6e>
 8008e5a:	68ac      	ldr	r4, [r5, #8]
 8008e5c:	e7da      	b.n	8008e14 <_puts_r+0x24>
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <_puts_r+0xd8>)
 8008e60:	429c      	cmp	r4, r3
 8008e62:	bf08      	it	eq
 8008e64:	68ec      	ldreq	r4, [r5, #12]
 8008e66:	e7d5      	b.n	8008e14 <_puts_r+0x24>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f888 	bl	8008f80 <__swsetup_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0dd      	beq.n	8008e30 <_puts_r+0x40>
 8008e74:	f04f 35ff 	mov.w	r5, #4294967295
 8008e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e7a:	07da      	lsls	r2, r3, #31
 8008e7c:	d405      	bmi.n	8008e8a <_puts_r+0x9a>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	059b      	lsls	r3, r3, #22
 8008e82:	d402      	bmi.n	8008e8a <_puts_r+0x9a>
 8008e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e86:	f000 faa2 	bl	80093ce <__retarget_lock_release_recursive>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da04      	bge.n	8008e9c <_puts_r+0xac>
 8008e92:	69a2      	ldr	r2, [r4, #24]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	dc06      	bgt.n	8008ea6 <_puts_r+0xb6>
 8008e98:	290a      	cmp	r1, #10
 8008e9a:	d004      	beq.n	8008ea6 <_puts_r+0xb6>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	7019      	strb	r1, [r3, #0]
 8008ea4:	e7c5      	b.n	8008e32 <_puts_r+0x42>
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 f817 	bl	8008edc <__swbuf_r>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d1bf      	bne.n	8008e32 <_puts_r+0x42>
 8008eb2:	e7df      	b.n	8008e74 <_puts_r+0x84>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	250a      	movs	r5, #10
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	701d      	strb	r5, [r3, #0]
 8008ebe:	e7db      	b.n	8008e78 <_puts_r+0x88>
 8008ec0:	0800a418 	.word	0x0800a418
 8008ec4:	0800a438 	.word	0x0800a438
 8008ec8:	0800a3f8 	.word	0x0800a3f8

08008ecc <puts>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <puts+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f7ff bf8d 	b.w	8008df0 <_puts_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000074 	.word	0x20000074

08008edc <__swbuf_r>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	460e      	mov	r6, r1
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	b118      	cbz	r0, 8008eee <__swbuf_r+0x12>
 8008ee6:	6983      	ldr	r3, [r0, #24]
 8008ee8:	b90b      	cbnz	r3, 8008eee <__swbuf_r+0x12>
 8008eea:	f000 f9d1 	bl	8009290 <__sinit>
 8008eee:	4b21      	ldr	r3, [pc, #132]	; (8008f74 <__swbuf_r+0x98>)
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	d12b      	bne.n	8008f4c <__swbuf_r+0x70>
 8008ef4:	686c      	ldr	r4, [r5, #4]
 8008ef6:	69a3      	ldr	r3, [r4, #24]
 8008ef8:	60a3      	str	r3, [r4, #8]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	071a      	lsls	r2, r3, #28
 8008efe:	d52f      	bpl.n	8008f60 <__swbuf_r+0x84>
 8008f00:	6923      	ldr	r3, [r4, #16]
 8008f02:	b36b      	cbz	r3, 8008f60 <__swbuf_r+0x84>
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	1ac0      	subs	r0, r0, r3
 8008f0a:	6963      	ldr	r3, [r4, #20]
 8008f0c:	b2f6      	uxtb	r6, r6
 8008f0e:	4283      	cmp	r3, r0
 8008f10:	4637      	mov	r7, r6
 8008f12:	dc04      	bgt.n	8008f1e <__swbuf_r+0x42>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 f926 	bl	8009168 <_fflush_r>
 8008f1c:	bb30      	cbnz	r0, 8008f6c <__swbuf_r+0x90>
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	60a3      	str	r3, [r4, #8]
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	701e      	strb	r6, [r3, #0]
 8008f2c:	6963      	ldr	r3, [r4, #20]
 8008f2e:	3001      	adds	r0, #1
 8008f30:	4283      	cmp	r3, r0
 8008f32:	d004      	beq.n	8008f3e <__swbuf_r+0x62>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d506      	bpl.n	8008f48 <__swbuf_r+0x6c>
 8008f3a:	2e0a      	cmp	r6, #10
 8008f3c:	d104      	bne.n	8008f48 <__swbuf_r+0x6c>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	f000 f911 	bl	8009168 <_fflush_r>
 8008f46:	b988      	cbnz	r0, 8008f6c <__swbuf_r+0x90>
 8008f48:	4638      	mov	r0, r7
 8008f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <__swbuf_r+0x9c>)
 8008f4e:	429c      	cmp	r4, r3
 8008f50:	d101      	bne.n	8008f56 <__swbuf_r+0x7a>
 8008f52:	68ac      	ldr	r4, [r5, #8]
 8008f54:	e7cf      	b.n	8008ef6 <__swbuf_r+0x1a>
 8008f56:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <__swbuf_r+0xa0>)
 8008f58:	429c      	cmp	r4, r3
 8008f5a:	bf08      	it	eq
 8008f5c:	68ec      	ldreq	r4, [r5, #12]
 8008f5e:	e7ca      	b.n	8008ef6 <__swbuf_r+0x1a>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f80c 	bl	8008f80 <__swsetup_r>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d0cb      	beq.n	8008f04 <__swbuf_r+0x28>
 8008f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f70:	e7ea      	b.n	8008f48 <__swbuf_r+0x6c>
 8008f72:	bf00      	nop
 8008f74:	0800a418 	.word	0x0800a418
 8008f78:	0800a438 	.word	0x0800a438
 8008f7c:	0800a3f8 	.word	0x0800a3f8

08008f80 <__swsetup_r>:
 8008f80:	4b32      	ldr	r3, [pc, #200]	; (800904c <__swsetup_r+0xcc>)
 8008f82:	b570      	push	{r4, r5, r6, lr}
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	4606      	mov	r6, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	b125      	cbz	r5, 8008f96 <__swsetup_r+0x16>
 8008f8c:	69ab      	ldr	r3, [r5, #24]
 8008f8e:	b913      	cbnz	r3, 8008f96 <__swsetup_r+0x16>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f97d 	bl	8009290 <__sinit>
 8008f96:	4b2e      	ldr	r3, [pc, #184]	; (8009050 <__swsetup_r+0xd0>)
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	d10f      	bne.n	8008fbc <__swsetup_r+0x3c>
 8008f9c:	686c      	ldr	r4, [r5, #4]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa4:	0719      	lsls	r1, r3, #28
 8008fa6:	d42c      	bmi.n	8009002 <__swsetup_r+0x82>
 8008fa8:	06dd      	lsls	r5, r3, #27
 8008faa:	d411      	bmi.n	8008fd0 <__swsetup_r+0x50>
 8008fac:	2309      	movs	r3, #9
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	e03e      	b.n	800903a <__swsetup_r+0xba>
 8008fbc:	4b25      	ldr	r3, [pc, #148]	; (8009054 <__swsetup_r+0xd4>)
 8008fbe:	429c      	cmp	r4, r3
 8008fc0:	d101      	bne.n	8008fc6 <__swsetup_r+0x46>
 8008fc2:	68ac      	ldr	r4, [r5, #8]
 8008fc4:	e7eb      	b.n	8008f9e <__swsetup_r+0x1e>
 8008fc6:	4b24      	ldr	r3, [pc, #144]	; (8009058 <__swsetup_r+0xd8>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	bf08      	it	eq
 8008fcc:	68ec      	ldreq	r4, [r5, #12]
 8008fce:	e7e6      	b.n	8008f9e <__swsetup_r+0x1e>
 8008fd0:	0758      	lsls	r0, r3, #29
 8008fd2:	d512      	bpl.n	8008ffa <__swsetup_r+0x7a>
 8008fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd6:	b141      	cbz	r1, 8008fea <__swsetup_r+0x6a>
 8008fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <__swsetup_r+0x66>
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 fa5b 	bl	800949c <_free_r>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	6063      	str	r3, [r4, #4]
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f043 0308 	orr.w	r3, r3, #8
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	b94b      	cbnz	r3, 800901a <__swsetup_r+0x9a>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009010:	d003      	beq.n	800901a <__swsetup_r+0x9a>
 8009012:	4621      	mov	r1, r4
 8009014:	4630      	mov	r0, r6
 8009016:	f000 fa01 	bl	800941c <__smakebuf_r>
 800901a:	89a0      	ldrh	r0, [r4, #12]
 800901c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009020:	f010 0301 	ands.w	r3, r0, #1
 8009024:	d00a      	beq.n	800903c <__swsetup_r+0xbc>
 8009026:	2300      	movs	r3, #0
 8009028:	60a3      	str	r3, [r4, #8]
 800902a:	6963      	ldr	r3, [r4, #20]
 800902c:	425b      	negs	r3, r3
 800902e:	61a3      	str	r3, [r4, #24]
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	b943      	cbnz	r3, 8009046 <__swsetup_r+0xc6>
 8009034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009038:	d1ba      	bne.n	8008fb0 <__swsetup_r+0x30>
 800903a:	bd70      	pop	{r4, r5, r6, pc}
 800903c:	0781      	lsls	r1, r0, #30
 800903e:	bf58      	it	pl
 8009040:	6963      	ldrpl	r3, [r4, #20]
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	e7f4      	b.n	8009030 <__swsetup_r+0xb0>
 8009046:	2000      	movs	r0, #0
 8009048:	e7f7      	b.n	800903a <__swsetup_r+0xba>
 800904a:	bf00      	nop
 800904c:	20000074 	.word	0x20000074
 8009050:	0800a418 	.word	0x0800a418
 8009054:	0800a438 	.word	0x0800a438
 8009058:	0800a3f8 	.word	0x0800a3f8

0800905c <__sflush_r>:
 800905c:	898a      	ldrh	r2, [r1, #12]
 800905e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	0710      	lsls	r0, r2, #28
 8009066:	460c      	mov	r4, r1
 8009068:	d458      	bmi.n	800911c <__sflush_r+0xc0>
 800906a:	684b      	ldr	r3, [r1, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc05      	bgt.n	800907c <__sflush_r+0x20>
 8009070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	dc02      	bgt.n	800907c <__sflush_r+0x20>
 8009076:	2000      	movs	r0, #0
 8009078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800907c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800907e:	2e00      	cmp	r6, #0
 8009080:	d0f9      	beq.n	8009076 <__sflush_r+0x1a>
 8009082:	2300      	movs	r3, #0
 8009084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009088:	682f      	ldr	r7, [r5, #0]
 800908a:	602b      	str	r3, [r5, #0]
 800908c:	d032      	beq.n	80090f4 <__sflush_r+0x98>
 800908e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	075a      	lsls	r2, r3, #29
 8009094:	d505      	bpl.n	80090a2 <__sflush_r+0x46>
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	1ac0      	subs	r0, r0, r3
 800909a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800909c:	b10b      	cbz	r3, 80090a2 <__sflush_r+0x46>
 800909e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090a0:	1ac0      	subs	r0, r0, r3
 80090a2:	2300      	movs	r3, #0
 80090a4:	4602      	mov	r2, r0
 80090a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a8:	6a21      	ldr	r1, [r4, #32]
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b0      	blx	r6
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	d106      	bne.n	80090c2 <__sflush_r+0x66>
 80090b4:	6829      	ldr	r1, [r5, #0]
 80090b6:	291d      	cmp	r1, #29
 80090b8:	d82c      	bhi.n	8009114 <__sflush_r+0xb8>
 80090ba:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <__sflush_r+0x108>)
 80090bc:	40ca      	lsrs	r2, r1
 80090be:	07d6      	lsls	r6, r2, #31
 80090c0:	d528      	bpl.n	8009114 <__sflush_r+0xb8>
 80090c2:	2200      	movs	r2, #0
 80090c4:	6062      	str	r2, [r4, #4]
 80090c6:	04d9      	lsls	r1, r3, #19
 80090c8:	6922      	ldr	r2, [r4, #16]
 80090ca:	6022      	str	r2, [r4, #0]
 80090cc:	d504      	bpl.n	80090d8 <__sflush_r+0x7c>
 80090ce:	1c42      	adds	r2, r0, #1
 80090d0:	d101      	bne.n	80090d6 <__sflush_r+0x7a>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	b903      	cbnz	r3, 80090d8 <__sflush_r+0x7c>
 80090d6:	6560      	str	r0, [r4, #84]	; 0x54
 80090d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090da:	602f      	str	r7, [r5, #0]
 80090dc:	2900      	cmp	r1, #0
 80090de:	d0ca      	beq.n	8009076 <__sflush_r+0x1a>
 80090e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090e4:	4299      	cmp	r1, r3
 80090e6:	d002      	beq.n	80090ee <__sflush_r+0x92>
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 f9d7 	bl	800949c <_free_r>
 80090ee:	2000      	movs	r0, #0
 80090f0:	6360      	str	r0, [r4, #52]	; 0x34
 80090f2:	e7c1      	b.n	8009078 <__sflush_r+0x1c>
 80090f4:	6a21      	ldr	r1, [r4, #32]
 80090f6:	2301      	movs	r3, #1
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b0      	blx	r6
 80090fc:	1c41      	adds	r1, r0, #1
 80090fe:	d1c7      	bne.n	8009090 <__sflush_r+0x34>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0c4      	beq.n	8009090 <__sflush_r+0x34>
 8009106:	2b1d      	cmp	r3, #29
 8009108:	d001      	beq.n	800910e <__sflush_r+0xb2>
 800910a:	2b16      	cmp	r3, #22
 800910c:	d101      	bne.n	8009112 <__sflush_r+0xb6>
 800910e:	602f      	str	r7, [r5, #0]
 8009110:	e7b1      	b.n	8009076 <__sflush_r+0x1a>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	e7ad      	b.n	8009078 <__sflush_r+0x1c>
 800911c:	690f      	ldr	r7, [r1, #16]
 800911e:	2f00      	cmp	r7, #0
 8009120:	d0a9      	beq.n	8009076 <__sflush_r+0x1a>
 8009122:	0793      	lsls	r3, r2, #30
 8009124:	680e      	ldr	r6, [r1, #0]
 8009126:	bf08      	it	eq
 8009128:	694b      	ldreq	r3, [r1, #20]
 800912a:	600f      	str	r7, [r1, #0]
 800912c:	bf18      	it	ne
 800912e:	2300      	movne	r3, #0
 8009130:	eba6 0807 	sub.w	r8, r6, r7
 8009134:	608b      	str	r3, [r1, #8]
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	dd9c      	ble.n	8009076 <__sflush_r+0x1a>
 800913c:	6a21      	ldr	r1, [r4, #32]
 800913e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009140:	4643      	mov	r3, r8
 8009142:	463a      	mov	r2, r7
 8009144:	4628      	mov	r0, r5
 8009146:	47b0      	blx	r6
 8009148:	2800      	cmp	r0, #0
 800914a:	dc06      	bgt.n	800915a <__sflush_r+0xfe>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	e78e      	b.n	8009078 <__sflush_r+0x1c>
 800915a:	4407      	add	r7, r0
 800915c:	eba8 0800 	sub.w	r8, r8, r0
 8009160:	e7e9      	b.n	8009136 <__sflush_r+0xda>
 8009162:	bf00      	nop
 8009164:	20400001 	.word	0x20400001

08009168 <_fflush_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	690b      	ldr	r3, [r1, #16]
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	b913      	cbnz	r3, 8009178 <_fflush_r+0x10>
 8009172:	2500      	movs	r5, #0
 8009174:	4628      	mov	r0, r5
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	b118      	cbz	r0, 8009182 <_fflush_r+0x1a>
 800917a:	6983      	ldr	r3, [r0, #24]
 800917c:	b90b      	cbnz	r3, 8009182 <_fflush_r+0x1a>
 800917e:	f000 f887 	bl	8009290 <__sinit>
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <_fflush_r+0x6c>)
 8009184:	429c      	cmp	r4, r3
 8009186:	d11b      	bne.n	80091c0 <_fflush_r+0x58>
 8009188:	686c      	ldr	r4, [r5, #4]
 800918a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0ef      	beq.n	8009172 <_fflush_r+0xa>
 8009192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009194:	07d0      	lsls	r0, r2, #31
 8009196:	d404      	bmi.n	80091a2 <_fflush_r+0x3a>
 8009198:	0599      	lsls	r1, r3, #22
 800919a:	d402      	bmi.n	80091a2 <_fflush_r+0x3a>
 800919c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800919e:	f000 f915 	bl	80093cc <__retarget_lock_acquire_recursive>
 80091a2:	4628      	mov	r0, r5
 80091a4:	4621      	mov	r1, r4
 80091a6:	f7ff ff59 	bl	800905c <__sflush_r>
 80091aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091ac:	07da      	lsls	r2, r3, #31
 80091ae:	4605      	mov	r5, r0
 80091b0:	d4e0      	bmi.n	8009174 <_fflush_r+0xc>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	059b      	lsls	r3, r3, #22
 80091b6:	d4dd      	bmi.n	8009174 <_fflush_r+0xc>
 80091b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ba:	f000 f908 	bl	80093ce <__retarget_lock_release_recursive>
 80091be:	e7d9      	b.n	8009174 <_fflush_r+0xc>
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <_fflush_r+0x70>)
 80091c2:	429c      	cmp	r4, r3
 80091c4:	d101      	bne.n	80091ca <_fflush_r+0x62>
 80091c6:	68ac      	ldr	r4, [r5, #8]
 80091c8:	e7df      	b.n	800918a <_fflush_r+0x22>
 80091ca:	4b04      	ldr	r3, [pc, #16]	; (80091dc <_fflush_r+0x74>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	bf08      	it	eq
 80091d0:	68ec      	ldreq	r4, [r5, #12]
 80091d2:	e7da      	b.n	800918a <_fflush_r+0x22>
 80091d4:	0800a418 	.word	0x0800a418
 80091d8:	0800a438 	.word	0x0800a438
 80091dc:	0800a3f8 	.word	0x0800a3f8

080091e0 <std>:
 80091e0:	2300      	movs	r3, #0
 80091e2:	b510      	push	{r4, lr}
 80091e4:	4604      	mov	r4, r0
 80091e6:	e9c0 3300 	strd	r3, r3, [r0]
 80091ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ee:	6083      	str	r3, [r0, #8]
 80091f0:	8181      	strh	r1, [r0, #12]
 80091f2:	6643      	str	r3, [r0, #100]	; 0x64
 80091f4:	81c2      	strh	r2, [r0, #14]
 80091f6:	6183      	str	r3, [r0, #24]
 80091f8:	4619      	mov	r1, r3
 80091fa:	2208      	movs	r2, #8
 80091fc:	305c      	adds	r0, #92	; 0x5c
 80091fe:	f7ff fdd7 	bl	8008db0 <memset>
 8009202:	4b05      	ldr	r3, [pc, #20]	; (8009218 <std+0x38>)
 8009204:	6263      	str	r3, [r4, #36]	; 0x24
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <std+0x3c>)
 8009208:	62a3      	str	r3, [r4, #40]	; 0x28
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <std+0x40>)
 800920c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <std+0x44>)
 8009210:	6224      	str	r4, [r4, #32]
 8009212:	6323      	str	r3, [r4, #48]	; 0x30
 8009214:	bd10      	pop	{r4, pc}
 8009216:	bf00      	nop
 8009218:	08009c59 	.word	0x08009c59
 800921c:	08009c7b 	.word	0x08009c7b
 8009220:	08009cb3 	.word	0x08009cb3
 8009224:	08009cd7 	.word	0x08009cd7

08009228 <_cleanup_r>:
 8009228:	4901      	ldr	r1, [pc, #4]	; (8009230 <_cleanup_r+0x8>)
 800922a:	f000 b8af 	b.w	800938c <_fwalk_reent>
 800922e:	bf00      	nop
 8009230:	08009169 	.word	0x08009169

08009234 <__sfmoreglue>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	2268      	movs	r2, #104	; 0x68
 8009238:	1e4d      	subs	r5, r1, #1
 800923a:	4355      	muls	r5, r2
 800923c:	460e      	mov	r6, r1
 800923e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009242:	f000 f997 	bl	8009574 <_malloc_r>
 8009246:	4604      	mov	r4, r0
 8009248:	b140      	cbz	r0, 800925c <__sfmoreglue+0x28>
 800924a:	2100      	movs	r1, #0
 800924c:	e9c0 1600 	strd	r1, r6, [r0]
 8009250:	300c      	adds	r0, #12
 8009252:	60a0      	str	r0, [r4, #8]
 8009254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009258:	f7ff fdaa 	bl	8008db0 <memset>
 800925c:	4620      	mov	r0, r4
 800925e:	bd70      	pop	{r4, r5, r6, pc}

08009260 <__sfp_lock_acquire>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__sfp_lock_acquire+0x8>)
 8009262:	f000 b8b3 	b.w	80093cc <__retarget_lock_acquire_recursive>
 8009266:	bf00      	nop
 8009268:	20000add 	.word	0x20000add

0800926c <__sfp_lock_release>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__sfp_lock_release+0x8>)
 800926e:	f000 b8ae 	b.w	80093ce <__retarget_lock_release_recursive>
 8009272:	bf00      	nop
 8009274:	20000add 	.word	0x20000add

08009278 <__sinit_lock_acquire>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__sinit_lock_acquire+0x8>)
 800927a:	f000 b8a7 	b.w	80093cc <__retarget_lock_acquire_recursive>
 800927e:	bf00      	nop
 8009280:	20000ade 	.word	0x20000ade

08009284 <__sinit_lock_release>:
 8009284:	4801      	ldr	r0, [pc, #4]	; (800928c <__sinit_lock_release+0x8>)
 8009286:	f000 b8a2 	b.w	80093ce <__retarget_lock_release_recursive>
 800928a:	bf00      	nop
 800928c:	20000ade 	.word	0x20000ade

08009290 <__sinit>:
 8009290:	b510      	push	{r4, lr}
 8009292:	4604      	mov	r4, r0
 8009294:	f7ff fff0 	bl	8009278 <__sinit_lock_acquire>
 8009298:	69a3      	ldr	r3, [r4, #24]
 800929a:	b11b      	cbz	r3, 80092a4 <__sinit+0x14>
 800929c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a0:	f7ff bff0 	b.w	8009284 <__sinit_lock_release>
 80092a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092a8:	6523      	str	r3, [r4, #80]	; 0x50
 80092aa:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <__sinit+0x68>)
 80092ac:	4a13      	ldr	r2, [pc, #76]	; (80092fc <__sinit+0x6c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80092b2:	42a3      	cmp	r3, r4
 80092b4:	bf04      	itt	eq
 80092b6:	2301      	moveq	r3, #1
 80092b8:	61a3      	streq	r3, [r4, #24]
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 f820 	bl	8009300 <__sfp>
 80092c0:	6060      	str	r0, [r4, #4]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 f81c 	bl	8009300 <__sfp>
 80092c8:	60a0      	str	r0, [r4, #8]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f818 	bl	8009300 <__sfp>
 80092d0:	2200      	movs	r2, #0
 80092d2:	60e0      	str	r0, [r4, #12]
 80092d4:	2104      	movs	r1, #4
 80092d6:	6860      	ldr	r0, [r4, #4]
 80092d8:	f7ff ff82 	bl	80091e0 <std>
 80092dc:	68a0      	ldr	r0, [r4, #8]
 80092de:	2201      	movs	r2, #1
 80092e0:	2109      	movs	r1, #9
 80092e2:	f7ff ff7d 	bl	80091e0 <std>
 80092e6:	68e0      	ldr	r0, [r4, #12]
 80092e8:	2202      	movs	r2, #2
 80092ea:	2112      	movs	r1, #18
 80092ec:	f7ff ff78 	bl	80091e0 <std>
 80092f0:	2301      	movs	r3, #1
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	e7d2      	b.n	800929c <__sinit+0xc>
 80092f6:	bf00      	nop
 80092f8:	0800a3f4 	.word	0x0800a3f4
 80092fc:	08009229 	.word	0x08009229

08009300 <__sfp>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	4607      	mov	r7, r0
 8009304:	f7ff ffac 	bl	8009260 <__sfp_lock_acquire>
 8009308:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <__sfp+0x84>)
 800930a:	681e      	ldr	r6, [r3, #0]
 800930c:	69b3      	ldr	r3, [r6, #24]
 800930e:	b913      	cbnz	r3, 8009316 <__sfp+0x16>
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff ffbd 	bl	8009290 <__sinit>
 8009316:	3648      	adds	r6, #72	; 0x48
 8009318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800931c:	3b01      	subs	r3, #1
 800931e:	d503      	bpl.n	8009328 <__sfp+0x28>
 8009320:	6833      	ldr	r3, [r6, #0]
 8009322:	b30b      	cbz	r3, 8009368 <__sfp+0x68>
 8009324:	6836      	ldr	r6, [r6, #0]
 8009326:	e7f7      	b.n	8009318 <__sfp+0x18>
 8009328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800932c:	b9d5      	cbnz	r5, 8009364 <__sfp+0x64>
 800932e:	4b16      	ldr	r3, [pc, #88]	; (8009388 <__sfp+0x88>)
 8009330:	60e3      	str	r3, [r4, #12]
 8009332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009336:	6665      	str	r5, [r4, #100]	; 0x64
 8009338:	f000 f847 	bl	80093ca <__retarget_lock_init_recursive>
 800933c:	f7ff ff96 	bl	800926c <__sfp_lock_release>
 8009340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009348:	6025      	str	r5, [r4, #0]
 800934a:	61a5      	str	r5, [r4, #24]
 800934c:	2208      	movs	r2, #8
 800934e:	4629      	mov	r1, r5
 8009350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009354:	f7ff fd2c 	bl	8008db0 <memset>
 8009358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800935c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009360:	4620      	mov	r0, r4
 8009362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009364:	3468      	adds	r4, #104	; 0x68
 8009366:	e7d9      	b.n	800931c <__sfp+0x1c>
 8009368:	2104      	movs	r1, #4
 800936a:	4638      	mov	r0, r7
 800936c:	f7ff ff62 	bl	8009234 <__sfmoreglue>
 8009370:	4604      	mov	r4, r0
 8009372:	6030      	str	r0, [r6, #0]
 8009374:	2800      	cmp	r0, #0
 8009376:	d1d5      	bne.n	8009324 <__sfp+0x24>
 8009378:	f7ff ff78 	bl	800926c <__sfp_lock_release>
 800937c:	230c      	movs	r3, #12
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	e7ee      	b.n	8009360 <__sfp+0x60>
 8009382:	bf00      	nop
 8009384:	0800a3f4 	.word	0x0800a3f4
 8009388:	ffff0001 	.word	0xffff0001

0800938c <_fwalk_reent>:
 800938c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009390:	4606      	mov	r6, r0
 8009392:	4688      	mov	r8, r1
 8009394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009398:	2700      	movs	r7, #0
 800939a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800939e:	f1b9 0901 	subs.w	r9, r9, #1
 80093a2:	d505      	bpl.n	80093b0 <_fwalk_reent+0x24>
 80093a4:	6824      	ldr	r4, [r4, #0]
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d1f7      	bne.n	800939a <_fwalk_reent+0xe>
 80093aa:	4638      	mov	r0, r7
 80093ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b0:	89ab      	ldrh	r3, [r5, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d907      	bls.n	80093c6 <_fwalk_reent+0x3a>
 80093b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ba:	3301      	adds	r3, #1
 80093bc:	d003      	beq.n	80093c6 <_fwalk_reent+0x3a>
 80093be:	4629      	mov	r1, r5
 80093c0:	4630      	mov	r0, r6
 80093c2:	47c0      	blx	r8
 80093c4:	4307      	orrs	r7, r0
 80093c6:	3568      	adds	r5, #104	; 0x68
 80093c8:	e7e9      	b.n	800939e <_fwalk_reent+0x12>

080093ca <__retarget_lock_init_recursive>:
 80093ca:	4770      	bx	lr

080093cc <__retarget_lock_acquire_recursive>:
 80093cc:	4770      	bx	lr

080093ce <__retarget_lock_release_recursive>:
 80093ce:	4770      	bx	lr

080093d0 <__swhatbuf_r>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d8:	2900      	cmp	r1, #0
 80093da:	b096      	sub	sp, #88	; 0x58
 80093dc:	4614      	mov	r4, r2
 80093de:	461d      	mov	r5, r3
 80093e0:	da08      	bge.n	80093f4 <__swhatbuf_r+0x24>
 80093e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	061a      	lsls	r2, r3, #24
 80093ec:	d410      	bmi.n	8009410 <__swhatbuf_r+0x40>
 80093ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f2:	e00e      	b.n	8009412 <__swhatbuf_r+0x42>
 80093f4:	466a      	mov	r2, sp
 80093f6:	f000 fc95 	bl	8009d24 <_fstat_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	dbf1      	blt.n	80093e2 <__swhatbuf_r+0x12>
 80093fe:	9a01      	ldr	r2, [sp, #4]
 8009400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009408:	425a      	negs	r2, r3
 800940a:	415a      	adcs	r2, r3
 800940c:	602a      	str	r2, [r5, #0]
 800940e:	e7ee      	b.n	80093ee <__swhatbuf_r+0x1e>
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	2000      	movs	r0, #0
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	b016      	add	sp, #88	; 0x58
 8009418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800941c <__smakebuf_r>:
 800941c:	898b      	ldrh	r3, [r1, #12]
 800941e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009420:	079d      	lsls	r5, r3, #30
 8009422:	4606      	mov	r6, r0
 8009424:	460c      	mov	r4, r1
 8009426:	d507      	bpl.n	8009438 <__smakebuf_r+0x1c>
 8009428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	2301      	movs	r3, #1
 8009432:	6163      	str	r3, [r4, #20]
 8009434:	b002      	add	sp, #8
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	ab01      	add	r3, sp, #4
 800943a:	466a      	mov	r2, sp
 800943c:	f7ff ffc8 	bl	80093d0 <__swhatbuf_r>
 8009440:	9900      	ldr	r1, [sp, #0]
 8009442:	4605      	mov	r5, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f000 f895 	bl	8009574 <_malloc_r>
 800944a:	b948      	cbnz	r0, 8009460 <__smakebuf_r+0x44>
 800944c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009450:	059a      	lsls	r2, r3, #22
 8009452:	d4ef      	bmi.n	8009434 <__smakebuf_r+0x18>
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	f043 0302 	orr.w	r3, r3, #2
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	e7e3      	b.n	8009428 <__smakebuf_r+0xc>
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <__smakebuf_r+0x7c>)
 8009462:	62b3      	str	r3, [r6, #40]	; 0x28
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	6163      	str	r3, [r4, #20]
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	6120      	str	r0, [r4, #16]
 8009476:	b15b      	cbz	r3, 8009490 <__smakebuf_r+0x74>
 8009478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800947c:	4630      	mov	r0, r6
 800947e:	f000 fc63 	bl	8009d48 <_isatty_r>
 8009482:	b128      	cbz	r0, 8009490 <__smakebuf_r+0x74>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f023 0303 	bic.w	r3, r3, #3
 800948a:	f043 0301 	orr.w	r3, r3, #1
 800948e:	81a3      	strh	r3, [r4, #12]
 8009490:	89a0      	ldrh	r0, [r4, #12]
 8009492:	4305      	orrs	r5, r0
 8009494:	81a5      	strh	r5, [r4, #12]
 8009496:	e7cd      	b.n	8009434 <__smakebuf_r+0x18>
 8009498:	08009229 	.word	0x08009229

0800949c <_free_r>:
 800949c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800949e:	2900      	cmp	r1, #0
 80094a0:	d044      	beq.n	800952c <_free_r+0x90>
 80094a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a6:	9001      	str	r0, [sp, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f1a1 0404 	sub.w	r4, r1, #4
 80094ae:	bfb8      	it	lt
 80094b0:	18e4      	addlt	r4, r4, r3
 80094b2:	f000 fc6b 	bl	8009d8c <__malloc_lock>
 80094b6:	4a1e      	ldr	r2, [pc, #120]	; (8009530 <_free_r+0x94>)
 80094b8:	9801      	ldr	r0, [sp, #4]
 80094ba:	6813      	ldr	r3, [r2, #0]
 80094bc:	b933      	cbnz	r3, 80094cc <_free_r+0x30>
 80094be:	6063      	str	r3, [r4, #4]
 80094c0:	6014      	str	r4, [r2, #0]
 80094c2:	b003      	add	sp, #12
 80094c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c8:	f000 bc66 	b.w	8009d98 <__malloc_unlock>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d908      	bls.n	80094e2 <_free_r+0x46>
 80094d0:	6825      	ldr	r5, [r4, #0]
 80094d2:	1961      	adds	r1, r4, r5
 80094d4:	428b      	cmp	r3, r1
 80094d6:	bf01      	itttt	eq
 80094d8:	6819      	ldreq	r1, [r3, #0]
 80094da:	685b      	ldreq	r3, [r3, #4]
 80094dc:	1949      	addeq	r1, r1, r5
 80094de:	6021      	streq	r1, [r4, #0]
 80094e0:	e7ed      	b.n	80094be <_free_r+0x22>
 80094e2:	461a      	mov	r2, r3
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	b10b      	cbz	r3, 80094ec <_free_r+0x50>
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d9fa      	bls.n	80094e2 <_free_r+0x46>
 80094ec:	6811      	ldr	r1, [r2, #0]
 80094ee:	1855      	adds	r5, r2, r1
 80094f0:	42a5      	cmp	r5, r4
 80094f2:	d10b      	bne.n	800950c <_free_r+0x70>
 80094f4:	6824      	ldr	r4, [r4, #0]
 80094f6:	4421      	add	r1, r4
 80094f8:	1854      	adds	r4, r2, r1
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	6011      	str	r1, [r2, #0]
 80094fe:	d1e0      	bne.n	80094c2 <_free_r+0x26>
 8009500:	681c      	ldr	r4, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	6053      	str	r3, [r2, #4]
 8009506:	4421      	add	r1, r4
 8009508:	6011      	str	r1, [r2, #0]
 800950a:	e7da      	b.n	80094c2 <_free_r+0x26>
 800950c:	d902      	bls.n	8009514 <_free_r+0x78>
 800950e:	230c      	movs	r3, #12
 8009510:	6003      	str	r3, [r0, #0]
 8009512:	e7d6      	b.n	80094c2 <_free_r+0x26>
 8009514:	6825      	ldr	r5, [r4, #0]
 8009516:	1961      	adds	r1, r4, r5
 8009518:	428b      	cmp	r3, r1
 800951a:	bf04      	itt	eq
 800951c:	6819      	ldreq	r1, [r3, #0]
 800951e:	685b      	ldreq	r3, [r3, #4]
 8009520:	6063      	str	r3, [r4, #4]
 8009522:	bf04      	itt	eq
 8009524:	1949      	addeq	r1, r1, r5
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	6054      	str	r4, [r2, #4]
 800952a:	e7ca      	b.n	80094c2 <_free_r+0x26>
 800952c:	b003      	add	sp, #12
 800952e:	bd30      	pop	{r4, r5, pc}
 8009530:	20000ae0 	.word	0x20000ae0

08009534 <sbrk_aligned>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4e0e      	ldr	r6, [pc, #56]	; (8009570 <sbrk_aligned+0x3c>)
 8009538:	460c      	mov	r4, r1
 800953a:	6831      	ldr	r1, [r6, #0]
 800953c:	4605      	mov	r5, r0
 800953e:	b911      	cbnz	r1, 8009546 <sbrk_aligned+0x12>
 8009540:	f000 fb7a 	bl	8009c38 <_sbrk_r>
 8009544:	6030      	str	r0, [r6, #0]
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	f000 fb75 	bl	8009c38 <_sbrk_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d00a      	beq.n	8009568 <sbrk_aligned+0x34>
 8009552:	1cc4      	adds	r4, r0, #3
 8009554:	f024 0403 	bic.w	r4, r4, #3
 8009558:	42a0      	cmp	r0, r4
 800955a:	d007      	beq.n	800956c <sbrk_aligned+0x38>
 800955c:	1a21      	subs	r1, r4, r0
 800955e:	4628      	mov	r0, r5
 8009560:	f000 fb6a 	bl	8009c38 <_sbrk_r>
 8009564:	3001      	adds	r0, #1
 8009566:	d101      	bne.n	800956c <sbrk_aligned+0x38>
 8009568:	f04f 34ff 	mov.w	r4, #4294967295
 800956c:	4620      	mov	r0, r4
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	20000ae4 	.word	0x20000ae4

08009574 <_malloc_r>:
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	1ccd      	adds	r5, r1, #3
 800957a:	f025 0503 	bic.w	r5, r5, #3
 800957e:	3508      	adds	r5, #8
 8009580:	2d0c      	cmp	r5, #12
 8009582:	bf38      	it	cc
 8009584:	250c      	movcc	r5, #12
 8009586:	2d00      	cmp	r5, #0
 8009588:	4607      	mov	r7, r0
 800958a:	db01      	blt.n	8009590 <_malloc_r+0x1c>
 800958c:	42a9      	cmp	r1, r5
 800958e:	d905      	bls.n	800959c <_malloc_r+0x28>
 8009590:	230c      	movs	r3, #12
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	2600      	movs	r6, #0
 8009596:	4630      	mov	r0, r6
 8009598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959c:	4e2e      	ldr	r6, [pc, #184]	; (8009658 <_malloc_r+0xe4>)
 800959e:	f000 fbf5 	bl	8009d8c <__malloc_lock>
 80095a2:	6833      	ldr	r3, [r6, #0]
 80095a4:	461c      	mov	r4, r3
 80095a6:	bb34      	cbnz	r4, 80095f6 <_malloc_r+0x82>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff ffc2 	bl	8009534 <sbrk_aligned>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	4604      	mov	r4, r0
 80095b4:	d14d      	bne.n	8009652 <_malloc_r+0xde>
 80095b6:	6834      	ldr	r4, [r6, #0]
 80095b8:	4626      	mov	r6, r4
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d140      	bne.n	8009640 <_malloc_r+0xcc>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	4631      	mov	r1, r6
 80095c2:	4638      	mov	r0, r7
 80095c4:	eb04 0803 	add.w	r8, r4, r3
 80095c8:	f000 fb36 	bl	8009c38 <_sbrk_r>
 80095cc:	4580      	cmp	r8, r0
 80095ce:	d13a      	bne.n	8009646 <_malloc_r+0xd2>
 80095d0:	6821      	ldr	r1, [r4, #0]
 80095d2:	3503      	adds	r5, #3
 80095d4:	1a6d      	subs	r5, r5, r1
 80095d6:	f025 0503 	bic.w	r5, r5, #3
 80095da:	3508      	adds	r5, #8
 80095dc:	2d0c      	cmp	r5, #12
 80095de:	bf38      	it	cc
 80095e0:	250c      	movcc	r5, #12
 80095e2:	4629      	mov	r1, r5
 80095e4:	4638      	mov	r0, r7
 80095e6:	f7ff ffa5 	bl	8009534 <sbrk_aligned>
 80095ea:	3001      	adds	r0, #1
 80095ec:	d02b      	beq.n	8009646 <_malloc_r+0xd2>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	442b      	add	r3, r5
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	e00e      	b.n	8009614 <_malloc_r+0xa0>
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	1b52      	subs	r2, r2, r5
 80095fa:	d41e      	bmi.n	800963a <_malloc_r+0xc6>
 80095fc:	2a0b      	cmp	r2, #11
 80095fe:	d916      	bls.n	800962e <_malloc_r+0xba>
 8009600:	1961      	adds	r1, r4, r5
 8009602:	42a3      	cmp	r3, r4
 8009604:	6025      	str	r5, [r4, #0]
 8009606:	bf18      	it	ne
 8009608:	6059      	strne	r1, [r3, #4]
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	bf08      	it	eq
 800960e:	6031      	streq	r1, [r6, #0]
 8009610:	5162      	str	r2, [r4, r5]
 8009612:	604b      	str	r3, [r1, #4]
 8009614:	4638      	mov	r0, r7
 8009616:	f104 060b 	add.w	r6, r4, #11
 800961a:	f000 fbbd 	bl	8009d98 <__malloc_unlock>
 800961e:	f026 0607 	bic.w	r6, r6, #7
 8009622:	1d23      	adds	r3, r4, #4
 8009624:	1af2      	subs	r2, r6, r3
 8009626:	d0b6      	beq.n	8009596 <_malloc_r+0x22>
 8009628:	1b9b      	subs	r3, r3, r6
 800962a:	50a3      	str	r3, [r4, r2]
 800962c:	e7b3      	b.n	8009596 <_malloc_r+0x22>
 800962e:	6862      	ldr	r2, [r4, #4]
 8009630:	42a3      	cmp	r3, r4
 8009632:	bf0c      	ite	eq
 8009634:	6032      	streq	r2, [r6, #0]
 8009636:	605a      	strne	r2, [r3, #4]
 8009638:	e7ec      	b.n	8009614 <_malloc_r+0xa0>
 800963a:	4623      	mov	r3, r4
 800963c:	6864      	ldr	r4, [r4, #4]
 800963e:	e7b2      	b.n	80095a6 <_malloc_r+0x32>
 8009640:	4634      	mov	r4, r6
 8009642:	6876      	ldr	r6, [r6, #4]
 8009644:	e7b9      	b.n	80095ba <_malloc_r+0x46>
 8009646:	230c      	movs	r3, #12
 8009648:	603b      	str	r3, [r7, #0]
 800964a:	4638      	mov	r0, r7
 800964c:	f000 fba4 	bl	8009d98 <__malloc_unlock>
 8009650:	e7a1      	b.n	8009596 <_malloc_r+0x22>
 8009652:	6025      	str	r5, [r4, #0]
 8009654:	e7de      	b.n	8009614 <_malloc_r+0xa0>
 8009656:	bf00      	nop
 8009658:	20000ae0 	.word	0x20000ae0

0800965c <__sfputc_r>:
 800965c:	6893      	ldr	r3, [r2, #8]
 800965e:	3b01      	subs	r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	b410      	push	{r4}
 8009664:	6093      	str	r3, [r2, #8]
 8009666:	da08      	bge.n	800967a <__sfputc_r+0x1e>
 8009668:	6994      	ldr	r4, [r2, #24]
 800966a:	42a3      	cmp	r3, r4
 800966c:	db01      	blt.n	8009672 <__sfputc_r+0x16>
 800966e:	290a      	cmp	r1, #10
 8009670:	d103      	bne.n	800967a <__sfputc_r+0x1e>
 8009672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009676:	f7ff bc31 	b.w	8008edc <__swbuf_r>
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	1c58      	adds	r0, r3, #1
 800967e:	6010      	str	r0, [r2, #0]
 8009680:	7019      	strb	r1, [r3, #0]
 8009682:	4608      	mov	r0, r1
 8009684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009688:	4770      	bx	lr

0800968a <__sfputs_r>:
 800968a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	4614      	mov	r4, r2
 8009692:	18d5      	adds	r5, r2, r3
 8009694:	42ac      	cmp	r4, r5
 8009696:	d101      	bne.n	800969c <__sfputs_r+0x12>
 8009698:	2000      	movs	r0, #0
 800969a:	e007      	b.n	80096ac <__sfputs_r+0x22>
 800969c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a0:	463a      	mov	r2, r7
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ffda 	bl	800965c <__sfputc_r>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d1f3      	bne.n	8009694 <__sfputs_r+0xa>
 80096ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096b0 <_vfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	460d      	mov	r5, r1
 80096b6:	b09d      	sub	sp, #116	; 0x74
 80096b8:	4614      	mov	r4, r2
 80096ba:	4698      	mov	r8, r3
 80096bc:	4606      	mov	r6, r0
 80096be:	b118      	cbz	r0, 80096c8 <_vfiprintf_r+0x18>
 80096c0:	6983      	ldr	r3, [r0, #24]
 80096c2:	b90b      	cbnz	r3, 80096c8 <_vfiprintf_r+0x18>
 80096c4:	f7ff fde4 	bl	8009290 <__sinit>
 80096c8:	4b89      	ldr	r3, [pc, #548]	; (80098f0 <_vfiprintf_r+0x240>)
 80096ca:	429d      	cmp	r5, r3
 80096cc:	d11b      	bne.n	8009706 <_vfiprintf_r+0x56>
 80096ce:	6875      	ldr	r5, [r6, #4]
 80096d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_vfiprintf_r+0x32>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_vfiprintf_r+0x32>
 80096dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096de:	f7ff fe75 	bl	80093cc <__retarget_lock_acquire_recursive>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	071b      	lsls	r3, r3, #28
 80096e6:	d501      	bpl.n	80096ec <_vfiprintf_r+0x3c>
 80096e8:	692b      	ldr	r3, [r5, #16]
 80096ea:	b9eb      	cbnz	r3, 8009728 <_vfiprintf_r+0x78>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff fc46 	bl	8008f80 <__swsetup_r>
 80096f4:	b1c0      	cbz	r0, 8009728 <_vfiprintf_r+0x78>
 80096f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f8:	07dc      	lsls	r4, r3, #31
 80096fa:	d50e      	bpl.n	800971a <_vfiprintf_r+0x6a>
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	b01d      	add	sp, #116	; 0x74
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	4b7b      	ldr	r3, [pc, #492]	; (80098f4 <_vfiprintf_r+0x244>)
 8009708:	429d      	cmp	r5, r3
 800970a:	d101      	bne.n	8009710 <_vfiprintf_r+0x60>
 800970c:	68b5      	ldr	r5, [r6, #8]
 800970e:	e7df      	b.n	80096d0 <_vfiprintf_r+0x20>
 8009710:	4b79      	ldr	r3, [pc, #484]	; (80098f8 <_vfiprintf_r+0x248>)
 8009712:	429d      	cmp	r5, r3
 8009714:	bf08      	it	eq
 8009716:	68f5      	ldreq	r5, [r6, #12]
 8009718:	e7da      	b.n	80096d0 <_vfiprintf_r+0x20>
 800971a:	89ab      	ldrh	r3, [r5, #12]
 800971c:	0598      	lsls	r0, r3, #22
 800971e:	d4ed      	bmi.n	80096fc <_vfiprintf_r+0x4c>
 8009720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009722:	f7ff fe54 	bl	80093ce <__retarget_lock_release_recursive>
 8009726:	e7e9      	b.n	80096fc <_vfiprintf_r+0x4c>
 8009728:	2300      	movs	r3, #0
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	2320      	movs	r3, #32
 800972e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009732:	f8cd 800c 	str.w	r8, [sp, #12]
 8009736:	2330      	movs	r3, #48	; 0x30
 8009738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098fc <_vfiprintf_r+0x24c>
 800973c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009740:	f04f 0901 	mov.w	r9, #1
 8009744:	4623      	mov	r3, r4
 8009746:	469a      	mov	sl, r3
 8009748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974c:	b10a      	cbz	r2, 8009752 <_vfiprintf_r+0xa2>
 800974e:	2a25      	cmp	r2, #37	; 0x25
 8009750:	d1f9      	bne.n	8009746 <_vfiprintf_r+0x96>
 8009752:	ebba 0b04 	subs.w	fp, sl, r4
 8009756:	d00b      	beq.n	8009770 <_vfiprintf_r+0xc0>
 8009758:	465b      	mov	r3, fp
 800975a:	4622      	mov	r2, r4
 800975c:	4629      	mov	r1, r5
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff ff93 	bl	800968a <__sfputs_r>
 8009764:	3001      	adds	r0, #1
 8009766:	f000 80aa 	beq.w	80098be <_vfiprintf_r+0x20e>
 800976a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976c:	445a      	add	r2, fp
 800976e:	9209      	str	r2, [sp, #36]	; 0x24
 8009770:	f89a 3000 	ldrb.w	r3, [sl]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80a2 	beq.w	80098be <_vfiprintf_r+0x20e>
 800977a:	2300      	movs	r3, #0
 800977c:	f04f 32ff 	mov.w	r2, #4294967295
 8009780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009784:	f10a 0a01 	add.w	sl, sl, #1
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009790:	931a      	str	r3, [sp, #104]	; 0x68
 8009792:	4654      	mov	r4, sl
 8009794:	2205      	movs	r2, #5
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	4858      	ldr	r0, [pc, #352]	; (80098fc <_vfiprintf_r+0x24c>)
 800979c:	f7f6 fd20 	bl	80001e0 <memchr>
 80097a0:	9a04      	ldr	r2, [sp, #16]
 80097a2:	b9d8      	cbnz	r0, 80097dc <_vfiprintf_r+0x12c>
 80097a4:	06d1      	lsls	r1, r2, #27
 80097a6:	bf44      	itt	mi
 80097a8:	2320      	movmi	r3, #32
 80097aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ae:	0713      	lsls	r3, r2, #28
 80097b0:	bf44      	itt	mi
 80097b2:	232b      	movmi	r3, #43	; 0x2b
 80097b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b8:	f89a 3000 	ldrb.w	r3, [sl]
 80097bc:	2b2a      	cmp	r3, #42	; 0x2a
 80097be:	d015      	beq.n	80097ec <_vfiprintf_r+0x13c>
 80097c0:	9a07      	ldr	r2, [sp, #28]
 80097c2:	4654      	mov	r4, sl
 80097c4:	2000      	movs	r0, #0
 80097c6:	f04f 0c0a 	mov.w	ip, #10
 80097ca:	4621      	mov	r1, r4
 80097cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d0:	3b30      	subs	r3, #48	; 0x30
 80097d2:	2b09      	cmp	r3, #9
 80097d4:	d94e      	bls.n	8009874 <_vfiprintf_r+0x1c4>
 80097d6:	b1b0      	cbz	r0, 8009806 <_vfiprintf_r+0x156>
 80097d8:	9207      	str	r2, [sp, #28]
 80097da:	e014      	b.n	8009806 <_vfiprintf_r+0x156>
 80097dc:	eba0 0308 	sub.w	r3, r0, r8
 80097e0:	fa09 f303 	lsl.w	r3, r9, r3
 80097e4:	4313      	orrs	r3, r2
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	46a2      	mov	sl, r4
 80097ea:	e7d2      	b.n	8009792 <_vfiprintf_r+0xe2>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	1d19      	adds	r1, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	9103      	str	r1, [sp, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfbb      	ittet	lt
 80097f8:	425b      	neglt	r3, r3
 80097fa:	f042 0202 	orrlt.w	r2, r2, #2
 80097fe:	9307      	strge	r3, [sp, #28]
 8009800:	9307      	strlt	r3, [sp, #28]
 8009802:	bfb8      	it	lt
 8009804:	9204      	strlt	r2, [sp, #16]
 8009806:	7823      	ldrb	r3, [r4, #0]
 8009808:	2b2e      	cmp	r3, #46	; 0x2e
 800980a:	d10c      	bne.n	8009826 <_vfiprintf_r+0x176>
 800980c:	7863      	ldrb	r3, [r4, #1]
 800980e:	2b2a      	cmp	r3, #42	; 0x2a
 8009810:	d135      	bne.n	800987e <_vfiprintf_r+0x1ce>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	1d1a      	adds	r2, r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9203      	str	r2, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfb8      	it	lt
 800981e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009822:	3402      	adds	r4, #2
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800990c <_vfiprintf_r+0x25c>
 800982a:	7821      	ldrb	r1, [r4, #0]
 800982c:	2203      	movs	r2, #3
 800982e:	4650      	mov	r0, sl
 8009830:	f7f6 fcd6 	bl	80001e0 <memchr>
 8009834:	b140      	cbz	r0, 8009848 <_vfiprintf_r+0x198>
 8009836:	2340      	movs	r3, #64	; 0x40
 8009838:	eba0 000a 	sub.w	r0, r0, sl
 800983c:	fa03 f000 	lsl.w	r0, r3, r0
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	4303      	orrs	r3, r0
 8009844:	3401      	adds	r4, #1
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984c:	482c      	ldr	r0, [pc, #176]	; (8009900 <_vfiprintf_r+0x250>)
 800984e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009852:	2206      	movs	r2, #6
 8009854:	f7f6 fcc4 	bl	80001e0 <memchr>
 8009858:	2800      	cmp	r0, #0
 800985a:	d03f      	beq.n	80098dc <_vfiprintf_r+0x22c>
 800985c:	4b29      	ldr	r3, [pc, #164]	; (8009904 <_vfiprintf_r+0x254>)
 800985e:	bb1b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x1f8>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	3307      	adds	r3, #7
 8009864:	f023 0307 	bic.w	r3, r3, #7
 8009868:	3308      	adds	r3, #8
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986e:	443b      	add	r3, r7
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	e767      	b.n	8009744 <_vfiprintf_r+0x94>
 8009874:	fb0c 3202 	mla	r2, ip, r2, r3
 8009878:	460c      	mov	r4, r1
 800987a:	2001      	movs	r0, #1
 800987c:	e7a5      	b.n	80097ca <_vfiprintf_r+0x11a>
 800987e:	2300      	movs	r3, #0
 8009880:	3401      	adds	r4, #1
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	4619      	mov	r1, r3
 8009886:	f04f 0c0a 	mov.w	ip, #10
 800988a:	4620      	mov	r0, r4
 800988c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009890:	3a30      	subs	r2, #48	; 0x30
 8009892:	2a09      	cmp	r2, #9
 8009894:	d903      	bls.n	800989e <_vfiprintf_r+0x1ee>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0c5      	beq.n	8009826 <_vfiprintf_r+0x176>
 800989a:	9105      	str	r1, [sp, #20]
 800989c:	e7c3      	b.n	8009826 <_vfiprintf_r+0x176>
 800989e:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a2:	4604      	mov	r4, r0
 80098a4:	2301      	movs	r3, #1
 80098a6:	e7f0      	b.n	800988a <_vfiprintf_r+0x1da>
 80098a8:	ab03      	add	r3, sp, #12
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	462a      	mov	r2, r5
 80098ae:	4b16      	ldr	r3, [pc, #88]	; (8009908 <_vfiprintf_r+0x258>)
 80098b0:	a904      	add	r1, sp, #16
 80098b2:	4630      	mov	r0, r6
 80098b4:	f3af 8000 	nop.w
 80098b8:	4607      	mov	r7, r0
 80098ba:	1c78      	adds	r0, r7, #1
 80098bc:	d1d6      	bne.n	800986c <_vfiprintf_r+0x1bc>
 80098be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	d405      	bmi.n	80098d0 <_vfiprintf_r+0x220>
 80098c4:	89ab      	ldrh	r3, [r5, #12]
 80098c6:	059a      	lsls	r2, r3, #22
 80098c8:	d402      	bmi.n	80098d0 <_vfiprintf_r+0x220>
 80098ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098cc:	f7ff fd7f 	bl	80093ce <__retarget_lock_release_recursive>
 80098d0:	89ab      	ldrh	r3, [r5, #12]
 80098d2:	065b      	lsls	r3, r3, #25
 80098d4:	f53f af12 	bmi.w	80096fc <_vfiprintf_r+0x4c>
 80098d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098da:	e711      	b.n	8009700 <_vfiprintf_r+0x50>
 80098dc:	ab03      	add	r3, sp, #12
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	462a      	mov	r2, r5
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <_vfiprintf_r+0x258>)
 80098e4:	a904      	add	r1, sp, #16
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 f880 	bl	80099ec <_printf_i>
 80098ec:	e7e4      	b.n	80098b8 <_vfiprintf_r+0x208>
 80098ee:	bf00      	nop
 80098f0:	0800a418 	.word	0x0800a418
 80098f4:	0800a438 	.word	0x0800a438
 80098f8:	0800a3f8 	.word	0x0800a3f8
 80098fc:	0800a458 	.word	0x0800a458
 8009900:	0800a462 	.word	0x0800a462
 8009904:	00000000 	.word	0x00000000
 8009908:	0800968b 	.word	0x0800968b
 800990c:	0800a45e 	.word	0x0800a45e

08009910 <_printf_common>:
 8009910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009914:	4616      	mov	r6, r2
 8009916:	4699      	mov	r9, r3
 8009918:	688a      	ldr	r2, [r1, #8]
 800991a:	690b      	ldr	r3, [r1, #16]
 800991c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009920:	4293      	cmp	r3, r2
 8009922:	bfb8      	it	lt
 8009924:	4613      	movlt	r3, r2
 8009926:	6033      	str	r3, [r6, #0]
 8009928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800992c:	4607      	mov	r7, r0
 800992e:	460c      	mov	r4, r1
 8009930:	b10a      	cbz	r2, 8009936 <_printf_common+0x26>
 8009932:	3301      	adds	r3, #1
 8009934:	6033      	str	r3, [r6, #0]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	0699      	lsls	r1, r3, #26
 800993a:	bf42      	ittt	mi
 800993c:	6833      	ldrmi	r3, [r6, #0]
 800993e:	3302      	addmi	r3, #2
 8009940:	6033      	strmi	r3, [r6, #0]
 8009942:	6825      	ldr	r5, [r4, #0]
 8009944:	f015 0506 	ands.w	r5, r5, #6
 8009948:	d106      	bne.n	8009958 <_printf_common+0x48>
 800994a:	f104 0a19 	add.w	sl, r4, #25
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	6832      	ldr	r2, [r6, #0]
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	42ab      	cmp	r3, r5
 8009956:	dc26      	bgt.n	80099a6 <_printf_common+0x96>
 8009958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800995c:	1e13      	subs	r3, r2, #0
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	bf18      	it	ne
 8009962:	2301      	movne	r3, #1
 8009964:	0692      	lsls	r2, r2, #26
 8009966:	d42b      	bmi.n	80099c0 <_printf_common+0xb0>
 8009968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800996c:	4649      	mov	r1, r9
 800996e:	4638      	mov	r0, r7
 8009970:	47c0      	blx	r8
 8009972:	3001      	adds	r0, #1
 8009974:	d01e      	beq.n	80099b4 <_printf_common+0xa4>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	68e5      	ldr	r5, [r4, #12]
 800997a:	6832      	ldr	r2, [r6, #0]
 800997c:	f003 0306 	and.w	r3, r3, #6
 8009980:	2b04      	cmp	r3, #4
 8009982:	bf08      	it	eq
 8009984:	1aad      	subeq	r5, r5, r2
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	6922      	ldr	r2, [r4, #16]
 800998a:	bf0c      	ite	eq
 800998c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009990:	2500      	movne	r5, #0
 8009992:	4293      	cmp	r3, r2
 8009994:	bfc4      	itt	gt
 8009996:	1a9b      	subgt	r3, r3, r2
 8009998:	18ed      	addgt	r5, r5, r3
 800999a:	2600      	movs	r6, #0
 800999c:	341a      	adds	r4, #26
 800999e:	42b5      	cmp	r5, r6
 80099a0:	d11a      	bne.n	80099d8 <_printf_common+0xc8>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e008      	b.n	80099b8 <_printf_common+0xa8>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4652      	mov	r2, sl
 80099aa:	4649      	mov	r1, r9
 80099ac:	4638      	mov	r0, r7
 80099ae:	47c0      	blx	r8
 80099b0:	3001      	adds	r0, #1
 80099b2:	d103      	bne.n	80099bc <_printf_common+0xac>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	3501      	adds	r5, #1
 80099be:	e7c6      	b.n	800994e <_printf_common+0x3e>
 80099c0:	18e1      	adds	r1, r4, r3
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	2030      	movs	r0, #48	; 0x30
 80099c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ca:	4422      	add	r2, r4
 80099cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d4:	3302      	adds	r3, #2
 80099d6:	e7c7      	b.n	8009968 <_printf_common+0x58>
 80099d8:	2301      	movs	r3, #1
 80099da:	4622      	mov	r2, r4
 80099dc:	4649      	mov	r1, r9
 80099de:	4638      	mov	r0, r7
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d0e6      	beq.n	80099b4 <_printf_common+0xa4>
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7d9      	b.n	800999e <_printf_common+0x8e>
	...

080099ec <_printf_i>:
 80099ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	7e0f      	ldrb	r7, [r1, #24]
 80099f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f4:	2f78      	cmp	r7, #120	; 0x78
 80099f6:	4691      	mov	r9, r2
 80099f8:	4680      	mov	r8, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	469a      	mov	sl, r3
 80099fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a02:	d807      	bhi.n	8009a14 <_printf_i+0x28>
 8009a04:	2f62      	cmp	r7, #98	; 0x62
 8009a06:	d80a      	bhi.n	8009a1e <_printf_i+0x32>
 8009a08:	2f00      	cmp	r7, #0
 8009a0a:	f000 80d8 	beq.w	8009bbe <_printf_i+0x1d2>
 8009a0e:	2f58      	cmp	r7, #88	; 0x58
 8009a10:	f000 80a3 	beq.w	8009b5a <_printf_i+0x16e>
 8009a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a1c:	e03a      	b.n	8009a94 <_printf_i+0xa8>
 8009a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a22:	2b15      	cmp	r3, #21
 8009a24:	d8f6      	bhi.n	8009a14 <_printf_i+0x28>
 8009a26:	a101      	add	r1, pc, #4	; (adr r1, 8009a2c <_printf_i+0x40>)
 8009a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a2c:	08009a85 	.word	0x08009a85
 8009a30:	08009a99 	.word	0x08009a99
 8009a34:	08009a15 	.word	0x08009a15
 8009a38:	08009a15 	.word	0x08009a15
 8009a3c:	08009a15 	.word	0x08009a15
 8009a40:	08009a15 	.word	0x08009a15
 8009a44:	08009a99 	.word	0x08009a99
 8009a48:	08009a15 	.word	0x08009a15
 8009a4c:	08009a15 	.word	0x08009a15
 8009a50:	08009a15 	.word	0x08009a15
 8009a54:	08009a15 	.word	0x08009a15
 8009a58:	08009ba5 	.word	0x08009ba5
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009b87 	.word	0x08009b87
 8009a64:	08009a15 	.word	0x08009a15
 8009a68:	08009a15 	.word	0x08009a15
 8009a6c:	08009bc7 	.word	0x08009bc7
 8009a70:	08009a15 	.word	0x08009a15
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009a15 	.word	0x08009a15
 8009a7c:	08009a15 	.word	0x08009a15
 8009a80:	08009b8f 	.word	0x08009b8f
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	602a      	str	r2, [r5, #0]
 8009a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a94:	2301      	movs	r3, #1
 8009a96:	e0a3      	b.n	8009be0 <_printf_i+0x1f4>
 8009a98:	6820      	ldr	r0, [r4, #0]
 8009a9a:	6829      	ldr	r1, [r5, #0]
 8009a9c:	0606      	lsls	r6, r0, #24
 8009a9e:	f101 0304 	add.w	r3, r1, #4
 8009aa2:	d50a      	bpl.n	8009aba <_printf_i+0xce>
 8009aa4:	680e      	ldr	r6, [r1, #0]
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	2e00      	cmp	r6, #0
 8009aaa:	da03      	bge.n	8009ab4 <_printf_i+0xc8>
 8009aac:	232d      	movs	r3, #45	; 0x2d
 8009aae:	4276      	negs	r6, r6
 8009ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab4:	485e      	ldr	r0, [pc, #376]	; (8009c30 <_printf_i+0x244>)
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	e019      	b.n	8009aee <_printf_i+0x102>
 8009aba:	680e      	ldr	r6, [r1, #0]
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ac2:	bf18      	it	ne
 8009ac4:	b236      	sxthne	r6, r6
 8009ac6:	e7ef      	b.n	8009aa8 <_printf_i+0xbc>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	1d19      	adds	r1, r3, #4
 8009ace:	6029      	str	r1, [r5, #0]
 8009ad0:	0601      	lsls	r1, r0, #24
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0xec>
 8009ad4:	681e      	ldr	r6, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <_printf_i+0xf2>
 8009ad8:	0646      	lsls	r6, r0, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0xe8>
 8009adc:	881e      	ldrh	r6, [r3, #0]
 8009ade:	4854      	ldr	r0, [pc, #336]	; (8009c30 <_printf_i+0x244>)
 8009ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2308      	moveq	r3, #8
 8009ae6:	230a      	movne	r3, #10
 8009ae8:	2100      	movs	r1, #0
 8009aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aee:	6865      	ldr	r5, [r4, #4]
 8009af0:	60a5      	str	r5, [r4, #8]
 8009af2:	2d00      	cmp	r5, #0
 8009af4:	bfa2      	ittt	ge
 8009af6:	6821      	ldrge	r1, [r4, #0]
 8009af8:	f021 0104 	bicge.w	r1, r1, #4
 8009afc:	6021      	strge	r1, [r4, #0]
 8009afe:	b90e      	cbnz	r6, 8009b04 <_printf_i+0x118>
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	d04d      	beq.n	8009ba0 <_printf_i+0x1b4>
 8009b04:	4615      	mov	r5, r2
 8009b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009b0e:	5dc7      	ldrb	r7, [r0, r7]
 8009b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b14:	4637      	mov	r7, r6
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	460e      	mov	r6, r1
 8009b1a:	d9f4      	bls.n	8009b06 <_printf_i+0x11a>
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d10b      	bne.n	8009b38 <_printf_i+0x14c>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07de      	lsls	r6, r3, #31
 8009b24:	d508      	bpl.n	8009b38 <_printf_i+0x14c>
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	bfde      	ittt	le
 8009b2e:	2330      	movle	r3, #48	; 0x30
 8009b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b38:	1b52      	subs	r2, r2, r5
 8009b3a:	6122      	str	r2, [r4, #16]
 8009b3c:	f8cd a000 	str.w	sl, [sp]
 8009b40:	464b      	mov	r3, r9
 8009b42:	aa03      	add	r2, sp, #12
 8009b44:	4621      	mov	r1, r4
 8009b46:	4640      	mov	r0, r8
 8009b48:	f7ff fee2 	bl	8009910 <_printf_common>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d14c      	bne.n	8009bea <_printf_i+0x1fe>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	b004      	add	sp, #16
 8009b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5a:	4835      	ldr	r0, [pc, #212]	; (8009c30 <_printf_i+0x244>)
 8009b5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b60:	6829      	ldr	r1, [r5, #0]
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b68:	6029      	str	r1, [r5, #0]
 8009b6a:	061d      	lsls	r5, r3, #24
 8009b6c:	d514      	bpl.n	8009b98 <_printf_i+0x1ac>
 8009b6e:	07df      	lsls	r7, r3, #31
 8009b70:	bf44      	itt	mi
 8009b72:	f043 0320 	orrmi.w	r3, r3, #32
 8009b76:	6023      	strmi	r3, [r4, #0]
 8009b78:	b91e      	cbnz	r6, 8009b82 <_printf_i+0x196>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	f023 0320 	bic.w	r3, r3, #32
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	2310      	movs	r3, #16
 8009b84:	e7b0      	b.n	8009ae8 <_printf_i+0xfc>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f043 0320 	orr.w	r3, r3, #32
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	2378      	movs	r3, #120	; 0x78
 8009b90:	4828      	ldr	r0, [pc, #160]	; (8009c34 <_printf_i+0x248>)
 8009b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b96:	e7e3      	b.n	8009b60 <_printf_i+0x174>
 8009b98:	0659      	lsls	r1, r3, #25
 8009b9a:	bf48      	it	mi
 8009b9c:	b2b6      	uxthmi	r6, r6
 8009b9e:	e7e6      	b.n	8009b6e <_printf_i+0x182>
 8009ba0:	4615      	mov	r5, r2
 8009ba2:	e7bb      	b.n	8009b1c <_printf_i+0x130>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	6826      	ldr	r6, [r4, #0]
 8009ba8:	6961      	ldr	r1, [r4, #20]
 8009baa:	1d18      	adds	r0, r3, #4
 8009bac:	6028      	str	r0, [r5, #0]
 8009bae:	0635      	lsls	r5, r6, #24
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_i+0x1cc>
 8009bb4:	6019      	str	r1, [r3, #0]
 8009bb6:	e002      	b.n	8009bbe <_printf_i+0x1d2>
 8009bb8:	0670      	lsls	r0, r6, #25
 8009bba:	d5fb      	bpl.n	8009bb4 <_printf_i+0x1c8>
 8009bbc:	8019      	strh	r1, [r3, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	4615      	mov	r5, r2
 8009bc4:	e7ba      	b.n	8009b3c <_printf_i+0x150>
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	1d1a      	adds	r2, r3, #4
 8009bca:	602a      	str	r2, [r5, #0]
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	6862      	ldr	r2, [r4, #4]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f7f6 fb04 	bl	80001e0 <memchr>
 8009bd8:	b108      	cbz	r0, 8009bde <_printf_i+0x1f2>
 8009bda:	1b40      	subs	r0, r0, r5
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be8:	e7a8      	b.n	8009b3c <_printf_i+0x150>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	47d0      	blx	sl
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d0ab      	beq.n	8009b50 <_printf_i+0x164>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	079b      	lsls	r3, r3, #30
 8009bfc:	d413      	bmi.n	8009c26 <_printf_i+0x23a>
 8009bfe:	68e0      	ldr	r0, [r4, #12]
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	4298      	cmp	r0, r3
 8009c04:	bfb8      	it	lt
 8009c06:	4618      	movlt	r0, r3
 8009c08:	e7a4      	b.n	8009b54 <_printf_i+0x168>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4640      	mov	r0, r8
 8009c12:	47d0      	blx	sl
 8009c14:	3001      	adds	r0, #1
 8009c16:	d09b      	beq.n	8009b50 <_printf_i+0x164>
 8009c18:	3501      	adds	r5, #1
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	9903      	ldr	r1, [sp, #12]
 8009c1e:	1a5b      	subs	r3, r3, r1
 8009c20:	42ab      	cmp	r3, r5
 8009c22:	dcf2      	bgt.n	8009c0a <_printf_i+0x21e>
 8009c24:	e7eb      	b.n	8009bfe <_printf_i+0x212>
 8009c26:	2500      	movs	r5, #0
 8009c28:	f104 0619 	add.w	r6, r4, #25
 8009c2c:	e7f5      	b.n	8009c1a <_printf_i+0x22e>
 8009c2e:	bf00      	nop
 8009c30:	0800a469 	.word	0x0800a469
 8009c34:	0800a47a 	.word	0x0800a47a

08009c38 <_sbrk_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	; (8009c54 <_sbrk_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f8 fb6c 	bl	8002320 <_sbrk>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_sbrk_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_sbrk_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20000ae8 	.word	0x20000ae8

08009c58 <__sread>:
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c60:	f000 f8a0 	bl	8009da4 <_read_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	bfab      	itete	ge
 8009c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c6c:	181b      	addge	r3, r3, r0
 8009c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c72:	bfac      	ite	ge
 8009c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c76:	81a3      	strhlt	r3, [r4, #12]
 8009c78:	bd10      	pop	{r4, pc}

08009c7a <__swrite>:
 8009c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7e:	461f      	mov	r7, r3
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	05db      	lsls	r3, r3, #23
 8009c84:	4605      	mov	r5, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	4616      	mov	r6, r2
 8009c8a:	d505      	bpl.n	8009c98 <__swrite+0x1e>
 8009c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c90:	2302      	movs	r3, #2
 8009c92:	2200      	movs	r2, #0
 8009c94:	f000 f868 	bl	8009d68 <_lseek_r>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cae:	f000 b817 	b.w	8009ce0 <_write_r>

08009cb2 <__sseek>:
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cba:	f000 f855 	bl	8009d68 <_lseek_r>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	bf15      	itete	ne
 8009cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cce:	81a3      	strheq	r3, [r4, #12]
 8009cd0:	bf18      	it	ne
 8009cd2:	81a3      	strhne	r3, [r4, #12]
 8009cd4:	bd10      	pop	{r4, pc}

08009cd6 <__sclose>:
 8009cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cda:	f000 b813 	b.w	8009d04 <_close_r>
	...

08009ce0 <_write_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	; (8009d00 <_write_r+0x20>)
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7f8 fac5 	bl	800227e <_write>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_write_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_write_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20000ae8 	.word	0x20000ae8

08009d04 <_close_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d06      	ldr	r5, [pc, #24]	; (8009d20 <_close_r+0x1c>)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	f7f8 fad1 	bl	80022b6 <_close>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_close_r+0x1a>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_close_r+0x1a>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	20000ae8 	.word	0x20000ae8

08009d24 <_fstat_r>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	4d07      	ldr	r5, [pc, #28]	; (8009d44 <_fstat_r+0x20>)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	4608      	mov	r0, r1
 8009d2e:	4611      	mov	r1, r2
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	f7f8 facc 	bl	80022ce <_fstat>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d102      	bne.n	8009d40 <_fstat_r+0x1c>
 8009d3a:	682b      	ldr	r3, [r5, #0]
 8009d3c:	b103      	cbz	r3, 8009d40 <_fstat_r+0x1c>
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
 8009d42:	bf00      	nop
 8009d44:	20000ae8 	.word	0x20000ae8

08009d48 <_isatty_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d06      	ldr	r5, [pc, #24]	; (8009d64 <_isatty_r+0x1c>)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	f7f8 facb 	bl	80022ee <_isatty>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_isatty_r+0x1a>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_isatty_r+0x1a>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	20000ae8 	.word	0x20000ae8

08009d68 <_lseek_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	; (8009d88 <_lseek_r+0x20>)
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	4608      	mov	r0, r1
 8009d70:	4611      	mov	r1, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f8 fac4 	bl	8002304 <_lseek>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_lseek_r+0x1e>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_lseek_r+0x1e>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20000ae8 	.word	0x20000ae8

08009d8c <__malloc_lock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_lock+0x8>)
 8009d8e:	f7ff bb1d 	b.w	80093cc <__retarget_lock_acquire_recursive>
 8009d92:	bf00      	nop
 8009d94:	20000adc 	.word	0x20000adc

08009d98 <__malloc_unlock>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__malloc_unlock+0x8>)
 8009d9a:	f7ff bb18 	b.w	80093ce <__retarget_lock_release_recursive>
 8009d9e:	bf00      	nop
 8009da0:	20000adc 	.word	0x20000adc

08009da4 <_read_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_read_r+0x20>)
 8009da8:	4604      	mov	r4, r0
 8009daa:	4608      	mov	r0, r1
 8009dac:	4611      	mov	r1, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f8 fa46 	bl	8002244 <_read>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_read_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_read_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000ae8 	.word	0x20000ae8

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
