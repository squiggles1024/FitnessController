
FitnessController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007738  08007738  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007740  08007740  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08007748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  200000e4  0800782c  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  0800782c  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e2b  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ef  00000000  00000000  00037f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7f4  00000000  00000000  0003dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b642  00000000  00000000  0006a45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a37  00000000  00000000  00085a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d4d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005570  00000000  00000000  0017d528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800716c 	.word	0x0800716c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	0800716c 	.word	0x0800716c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HCI_TL_SPI_Init+0x88>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <HCI_TL_SPI_Init+0x8c>)
 80005ba:	f001 fcb1 	bl	8001f20 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f001 fca1 	bl	8001f20 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <HCI_TL_SPI_Init+0x90>)
 80005f8:	f001 fc92 	bl	8001f20 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80005fc:	f001 f996 	bl	800192c <BSP_SPI3_Init>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000
 8000614:	48000c00 	.word	0x48000c00

08000618 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HCI_TL_SPI_DeInit+0x28>)
 8000620:	f001 fe28 	bl	8002274 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HCI_TL_SPI_DeInit+0x2c>)
 800062a:	f001 fe23 	bl	8002274 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f001 fe1d 	bl	8002274 <HAL_GPIO_DeInit>
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48001000 	.word	0x48001000
 8000644:	48000c00 	.word	0x48000c00

08000648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <HCI_TL_SPI_Reset+0x40>)
 8000654:	f001 ff1a 	bl	800248c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f001 ff13 	bl	800248c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000666:	2005      	movs	r0, #5
 8000668:	f001 fac6 	bl	8001bf8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 ff09 	bl	800248c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f001 fabc 	bl	8001bf8 <HAL_Delay>
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000c00 	.word	0x48000c00

0800068c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800069c:	23ff      	movs	r3, #255	; 0xff
 800069e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <HCI_TL_SPI_Receive+0xb0>)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4822      	ldr	r0, [pc, #136]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 80006b8:	f001 fee8 	bl	800248c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2205      	movs	r2, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f960 	bl	800198c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d129      	bne.n	8000726 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d2:	7c3b      	ldrb	r3, [r7, #16]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006e2:	8bfb      	ldrh	r3, [r7, #30]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01e      	beq.n	8000726 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006e8:	8bfa      	ldrh	r2, [r7, #30]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d901      	bls.n	80006f4 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	777b      	strb	r3, [r7, #29]
 80006f8:	e010      	b.n	800071c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006fa:	f107 011b 	add.w	r1, r7, #27
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2201      	movs	r2, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f941 	bl	800198c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800070a:	7f7b      	ldrb	r3, [r7, #29]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	7efa      	ldrb	r2, [r7, #27]
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	3301      	adds	r3, #1
 800071a:	777b      	strb	r3, [r7, #29]
 800071c:	7f7b      	ldrb	r3, [r7, #29]
 800071e:	b29b      	uxth	r3, r3
 8000720:	8bfa      	ldrh	r2, [r7, #30]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8e9      	bhi.n	80006fa <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 800072e:	f001 fead 	bl	800248c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000732:	7f7b      	ldrb	r3, [r7, #29]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08007184 	.word	0x08007184
 8000740:	48000c00 	.word	0x48000c00

08000744 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <HCI_TL_SPI_Send+0xa0>)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	3304      	adds	r3, #4
 800075e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000760:	f001 fa3e 	bl	8001be0 <HAL_GetTick>
 8000764:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 8000772:	f001 fe8b 	bl	800248c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2205      	movs	r2, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f903 	bl	800198c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8000786:	7a3b      	ldrb	r3, [r7, #8]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d10f      	bne.n	80007ac <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	b29b      	uxth	r3, r3
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d806      	bhi.n	80007a4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	461a      	mov	r2, r3
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <HCI_TL_SPI_Send+0xa8>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f001 f8f5 	bl	800198c <BSP_SPI3_SendRecv>
 80007a2:	e006      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80007a4:	f06f 0301 	mvn.w	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e002      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 80007ba:	f001 fe67 	bl	800248c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007be:	f001 fa0f 	bl	8001be0 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d903      	bls.n	80007d4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007cc:	f06f 0302 	mvn.w	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
      break;
 80007d2:	e002      	b.n	80007da <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dbc5      	blt.n	8000766 <HCI_TL_SPI_Send+0x22>

  return result;
 80007da:	69fb      	ldr	r3, [r7, #28]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	0800718c 	.word	0x0800718c
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	20000108 	.word	0x20000108

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f001 fe30 	bl	800245c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48001000 	.word	0x48001000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <hci_tl_lowlevel_init+0x50>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f005 f98b 	bl	8005b4c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000836:	4910      	ldr	r1, [pc, #64]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083a:	f001 fb2c 	bl	8001e96 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000840:	2100      	movs	r1, #0
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000844:	f001 fb0d 	bl	8001e62 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f001 fad2 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f001 faeb 	bl	8001e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08000585 	.word	0x08000585
 8000864:	08000619 	.word	0x08000619
 8000868:	08000745 	.word	0x08000745
 800086c:	0800068d 	.word	0x0800068d
 8000870:	08000649 	.word	0x08000649
 8000874:	080019cd 	.word	0x080019cd
 8000878:	16000006 	.word	0x16000006
 800087c:	20000100 	.word	0x20000100
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f005 fac4 	bl	8005e18 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <AddBatteryService>:
static BatteryServiceStatus_t InitBatteryValue(void);
static BatteryServiceStatus_t UpdateBatteryValue(void);
static uint8_t GetBatteryValue(void);


BatteryServiceStatus_t AddBatteryService(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
	tBleStatus status;
	BatteryServiceStatus_t ret;
	uint16_t uuid = BATTERY_SERVICE_UUID;
 80008ae:	f641 030f 	movw	r3, #6159	; 0x180f
 80008b2:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 7, &BatteryServiceHandle);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AddBatteryService+0x60>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2307      	movs	r3, #7
 80008bc:	2201      	movs	r2, #1
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 fc38 	bl	8005134 <aci_gatt_add_serv>
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <AddBatteryService+0x30>
		printf("Adding BATTERY Service Failed\n\r");
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <AddBatteryService+0x64>)
 80008d0:	f005 fc48 	bl	8006164 <iprintf>
		return Battery_AddServiceErr;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e012      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = AddBatteryCharacteristics();
 80008d8:	f000 f81a 	bl	8000910 <AddBatteryCharacteristics>
 80008dc:	4603      	mov	r3, r0
 80008de:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d001      	beq.n	80008ea <AddBatteryService+0x42>
		return ret;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	e009      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = InitBatteryValue();
 80008ea:	f000 f861 	bl	80009b0 <InitBatteryValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d001      	beq.n	80008fc <AddBatteryService+0x54>
		return ret;
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	e000      	b.n	80008fe <AddBatteryService+0x56>
	}
    return Battery_OK;
 80008fc:	2303      	movs	r3, #3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000208 	.word	0x20000208
 800090c:	080071bc 	.word	0x080071bc

08000910 <AddBatteryCharacteristics>:

uint16_t GetBatteryServiceHandle(void){
	return BatteryServiceHandle;
}

static BatteryServiceStatus_t AddBatteryCharacteristics(void){
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e034      	b.n	8000986 <AddBatteryCharacteristics+0x76>
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <AddBatteryCharacteristics+0x88>)
 800091e:	8818      	ldrh	r0, [r3, #0]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <AddBatteryCharacteristics+0x8c>)
 8000924:	5cd1      	ldrb	r1, [r2, r3]
        		                   BatteryCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&BatteryCharUUIDLookUpTable[i],  //UUID Value
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <AddBatteryCharacteristics+0x90>)
 800092c:	189c      	adds	r4, r3, r2
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800092e:	f04f 0c01 	mov.w	ip, #1
								   BatteryCharLengthLookUpTable[i],                 //Char Value Length
				                   BatteryCharPropertiesLookUpTable[i],             //Char Properties
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <AddBatteryCharacteristics+0x94>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800093a:	b2db      	uxtb	r3, r3
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2500      	movs	r5, #0
 8000940:	2600      	movs	r6, #0
				                   BatteryCharSecPermissionsLookUpTable[i],         //Char SecPermissions
								   BatteryCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                              //Encyption Key Size
				                   0,                                               //Does the value field have variable length? 1= yes, 0 = no
				                   &BatteryCharHandleLookUpTable[i]);               //BATTERY Char Handle Address
 8000942:	7bfa      	ldrb	r2, [r7, #15]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <AddBatteryCharacteristics+0x98>)
 8000948:	441a      	add	r2, r3
 800094a:	9205      	str	r2, [sp, #20]
 800094c:	2200      	movs	r2, #0
 800094e:	9204      	str	r2, [sp, #16]
 8000950:	2210      	movs	r2, #16
 8000952:	9203      	str	r2, [sp, #12]
 8000954:	9602      	str	r6, [sp, #8]
 8000956:	9501      	str	r5, [sp, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4663      	mov	r3, ip
 800095e:	4622      	mov	r2, r4
 8000960:	f004 fc71 	bl	8005246 <aci_gatt_add_char>
 8000964:	4603      	mov	r3, r0
 8000966:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <AddBatteryCharacteristics+0x70>
        	printf(BatteryCharErrorStringLookUpTable[i]);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <AddBatteryCharacteristics+0x9c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fbf4 	bl	8006164 <iprintf>
        	return BatteryCharErrorReturnLookUpTable[i];
 800097c:	2300      	movs	r3, #0
 800097e:	e006      	b.n	800098e <AddBatteryCharacteristics+0x7e>
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0c7      	beq.n	800091c <AddBatteryCharacteristics+0xc>
        }
    }

    return Battery_OK;
 800098c:	2303      	movs	r3, #3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	bf00      	nop
 8000998:	20000208 	.word	0x20000208
 800099c:	20000000 	.word	0x20000000
 80009a0:	0800751c 	.word	0x0800751c
 80009a4:	20000004 	.word	0x20000004
 80009a8:	2000020c 	.word	0x2000020c
 80009ac:	20000008 	.word	0x20000008

080009b0 <InitBatteryValue>:

static BatteryServiceStatus_t InitBatteryValue(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	BatteryServiceStatus_t ret;
	ret = UpdateBatteryValue();
 80009b6:	f000 f807 	bl	80009c8 <UpdateBatteryValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	return ret;
 80009be:	79fb      	ldrb	r3, [r7, #7]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <UpdateBatteryValue>:

static BatteryServiceStatus_t UpdateBatteryValue(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
    tBleStatus status;
    uint8_t reg = GetBatteryValue();
 80009ce:	f000 f821 	bl	8000a14 <GetBatteryValue>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71bb      	strb	r3, [r7, #6]
    status = aci_gatt_update_char_value(BatteryServiceHandle, BatteryCharHandleLookUpTable[BATTERY_LEVEL_INDEX], 0, 1, &reg);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <UpdateBatteryValue+0x40>)
 80009d8:	8818      	ldrh	r0, [r3, #0]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <UpdateBatteryValue+0x44>)
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2200      	movs	r2, #0
 80009e6:	f004 fcf9 	bl	80053dc <aci_gatt_update_char_value>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

    if(status != BLE_STATUS_SUCCESS){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <UpdateBatteryValue+0x36>
    	printf("Update Battery Level char failed\n\r");
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <UpdateBatteryValue+0x48>)
 80009f6:	f005 fbb5 	bl	8006164 <iprintf>
    	return Battery_UpdateCharErr;
 80009fa:	2302      	movs	r3, #2
 80009fc:	e000      	b.n	8000a00 <UpdateBatteryValue+0x38>
    }

    return Battery_OK;
 80009fe:	2303      	movs	r3, #3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000208 	.word	0x20000208
 8000a0c:	2000020c 	.word	0x2000020c
 8000a10:	080071dc 	.word	0x080071dc

08000a14 <GetBatteryValue>:

static uint8_t GetBatteryValue(void){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return 100;
 8000a18:	2364      	movs	r3, #100	; 0x64
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <AddDeviceInfoService>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void);


DeviceInfoServiceStatus_t AddDeviceInfoService(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af02      	add	r7, sp, #8
	tBleStatus status;
	DeviceInfoServiceStatus_t ret;
	uint16_t uuid = DEVICEINFO_SERVICE_UUID;
 8000a2a:	f641 030a 	movw	r3, #6154	; 0x180a
 8000a2e:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &DeviceInfoServiceHandle);
 8000a30:	1d39      	adds	r1, r7, #4
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <AddDeviceInfoService+0x44>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2310      	movs	r3, #16
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f004 fb7a 	bl	8005134 <aci_gatt_add_serv>
 8000a40:	4603      	mov	r3, r0
 8000a42:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <AddDeviceInfoService+0x30>
		printf("Adding Device Info Service Failed\n\r");
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <AddDeviceInfoService+0x48>)
 8000a4c:	f005 fb8a 	bl	8006164 <iprintf>
		return DeviceInfo_AddServiceErr;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e004      	b.n	8000a5e <AddDeviceInfoService+0x3a>
	}
	ret = AddDeviceInfoCharacteristics();
 8000a54:	f000 f852 	bl	8000afc <AddDeviceInfoCharacteristics>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71bb      	strb	r3, [r7, #6]
    return ret;
 8000a5c:	79bb      	ldrb	r3, [r7, #6]

}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000020e 	.word	0x2000020e
 8000a6c:	080072c8 	.word	0x080072c8

08000a70 <InitDeviceInfoCharacteristics>:

uint16_t GetDeviceInfoServiceHandle(void){
	return DeviceInfoServiceHandle;
}

static DeviceInfoServiceStatus_t InitDeviceInfoCharacteristics(void){
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af02      	add	r7, sp, #8
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e029      	b.n	8000ad0 <InitDeviceInfoCharacteristics+0x60>
    	status = aci_gatt_update_char_value(DeviceInfoServiceHandle, DeviceInfoCharHandleLookUpTable[i], 0, DeviceInfoCharValueLengthLookUpTable[i], DeviceInfoCharValueStrings[i]);
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <InitDeviceInfoCharacteristics+0x70>)
 8000a7e:	8818      	ldrh	r0, [r3, #0]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <InitDeviceInfoCharacteristics+0x74>)
 8000a84:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <InitDeviceInfoCharacteristics+0x78>)
 8000a8c:	5cd2      	ldrb	r2, [r2, r3]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4c16      	ldr	r4, [pc, #88]	; (8000aec <InitDeviceInfoCharacteristics+0x7c>)
 8000a92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f004 fc9e 	bl	80053dc <aci_gatt_update_char_value>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71bb      	strb	r3, [r7, #6]
    	if(status != BLE_STATUS_SUCCESS){
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00f      	beq.n	8000aca <InitDeviceInfoCharacteristics+0x5a>
    		printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <InitDeviceInfoCharacteristics+0x80>)
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 fb56 	bl	8006164 <iprintf>
    		printf("Fail on Init Device Info with return code %u",status);
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <InitDeviceInfoCharacteristics+0x84>)
 8000abe:	f005 fb51 	bl	8006164 <iprintf>
    		return DeviceInfoCharErrorReturnLookUpTable[i];
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <InitDeviceInfoCharacteristics+0x88>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	e006      	b.n	8000ad8 <InitDeviceInfoCharacteristics+0x68>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	3301      	adds	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d9d2      	bls.n	8000a7c <InitDeviceInfoCharacteristics+0xc>
    	}
    }
    return DeviceInfo_OK;
 8000ad6:	2306      	movs	r3, #6
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	2000020e 	.word	0x2000020e
 8000ae4:	20000210 	.word	0x20000210
 8000ae8:	2000000c 	.word	0x2000000c
 8000aec:	20000014 	.word	0x20000014
 8000af0:	20000024 	.word	0x20000024
 8000af4:	080072ec 	.word	0x080072ec
 8000af8:	08007568 	.word	0x08007568

08000afc <AddDeviceInfoCharacteristics>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void){
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e03c      	b.n	8000b82 <AddDeviceInfoCharacteristics+0x86>
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <AddDeviceInfoCharacteristics+0x9c>)
 8000b0a:	881c      	ldrh	r4, [r3, #0]
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <AddDeviceInfoCharacteristics+0xa0>)
 8000b10:	5cd5      	ldrb	r5, [r2, r3]
        		                   DeviceInfoCharUUIDTypeLookUpTable[i],               //UUID Type
				                   (const uint8_t*)&DeviceInfoCharUUIDLookUpTable[i],  //UUID Value
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <AddDeviceInfoCharacteristics+0xa4>)
 8000b18:	189e      	adds	r6, r3, r2
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <AddDeviceInfoCharacteristics+0xa8>)
 8000b1e:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <AddDeviceInfoCharacteristics+0xac>)
 8000b26:	5cd3      	ldrb	r3, [r2, r3]
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	491f      	ldr	r1, [pc, #124]	; (8000bac <AddDeviceInfoCharacteristics+0xb0>)
 8000b2e:	5c8a      	ldrb	r2, [r1, r2]
 8000b30:	7bf9      	ldrb	r1, [r7, #15]
 8000b32:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <AddDeviceInfoCharacteristics+0xb4>)
 8000b34:	5c41      	ldrb	r1, [r0, r1]
				                   DeviceInfo_CharPropertiesLookUpTable[i],            //Char Properties
				                   DeviceInfoCharPermissionsLookUpTable[i],            //Char SecPermissions
								   DeviceInfoCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                                 //Encryption Key Size
				                   1,                                                  //variable length value field (1) or not (0).
				                   &DeviceInfoCharHandleLookUpTable[i]);               //DeviceInfo Char Handle Address
 8000b36:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000b38:	0040      	lsls	r0, r0, #1
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <AddDeviceInfoCharacteristics+0xb8>)
 8000b3c:	4418      	add	r0, r3
 8000b3e:	9005      	str	r0, [sp, #20]
 8000b40:	2001      	movs	r0, #1
 8000b42:	9004      	str	r0, [sp, #16]
 8000b44:	2010      	movs	r0, #16
 8000b46:	9003      	str	r0, [sp, #12]
 8000b48:	9102      	str	r1, [sp, #8]
 8000b4a:	9201      	str	r2, [sp, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4663      	mov	r3, ip
 8000b52:	4632      	mov	r2, r6
 8000b54:	4629      	mov	r1, r5
 8000b56:	4620      	mov	r0, r4
 8000b58:	f004 fb75 	bl	8005246 <aci_gatt_add_char>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00a      	beq.n	8000b7c <AddDeviceInfoCharacteristics+0x80>
        	printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <AddDeviceInfoCharacteristics+0xbc>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f005 faf8 	bl	8006164 <iprintf>
        	return DeviceInfoCharErrorReturnLookUpTable[i];
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <AddDeviceInfoCharacteristics+0xc0>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	e008      	b.n	8000b8e <AddDeviceInfoCharacteristics+0x92>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d9bf      	bls.n	8000b08 <AddDeviceInfoCharacteristics+0xc>
        }
    }
    return InitDeviceInfoCharacteristics();
 8000b88:	f7ff ff72 	bl	8000a70 <InitDeviceInfoCharacteristics>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000020e 	.word	0x2000020e
 8000b9c:	08007554 	.word	0x08007554
 8000ba0:	08007558 	.word	0x08007558
 8000ba4:	2000000c 	.word	0x2000000c
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	08007560 	.word	0x08007560
 8000bb0:	08007564 	.word	0x08007564
 8000bb4:	20000210 	.word	0x20000210
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	08007568 	.word	0x08007568

08000bc0 <FitnessControllerBLEInit>:
static tBleStatus SetConnectable(void);
static void ControllerEventNotify(void *pData);



void FitnessControllerBLEInit(void){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af02      	add	r7, sp, #8
	tBleStatus status; //Var for storing return status

	uint8_t bdaddr[BD_ADDR_SIZE]; //Device address
	const char *DeviceName = "Evan's Fitness Controller"; //Device Name
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <FitnessControllerBLEInit+0xf8>)
 8000bc8:	617b      	str	r3, [r7, #20]
	uint16_t service_handle,  dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000bca:	4a3c      	ldr	r2, [pc, #240]	; (8000cbc <FitnessControllerBLEInit+0xfc>)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd4:	6018      	str	r0, [r3, #0]
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	8019      	strh	r1, [r3, #0]
	//Init HCI
	hci_init(ControllerEventNotify,NULL);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4838      	ldr	r0, [pc, #224]	; (8000cc0 <FitnessControllerBLEInit+0x100>)
 8000bde:	f004 ff73 	bl	8005ac8 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000be2:	1cba      	adds	r2, r7, #2
 8000be4:	1d7b      	adds	r3, r7, #5
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fde8 	bl	80057be <getBlueNRGVersion>
	hci_reset();
 8000bee:	f004 fe2a 	bl	8005846 <hci_reset>
	HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f001 f800 	bl	8001bf8 <HAL_Delay>

	status = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2106      	movs	r1, #6
 8000c00:	2000      	movs	r0, #0
 8000c02:	f004 fd51 	bl	80056a8 <aci_hal_write_config_data>
 8000c06:	4603      	mov	r3, r0
 8000c08:	74fb      	strb	r3, [r7, #19]

	if(status != BLE_STATUS_SUCCESS){
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <FitnessControllerBLEInit+0x58>
		printf("aci_hal_write_config_data failed\n\r");
 8000c10:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <FitnessControllerBLEInit+0x104>)
 8000c12:	f005 faa7 	bl	8006164 <iprintf>
		while(1);
 8000c16:	e7fe      	b.n	8000c16 <FitnessControllerBLEInit+0x56>
	}

	status = aci_gatt_init();
 8000c18:	f004 fa69 	bl	80050ee <aci_gatt_init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8000c20:	7cfb      	ldrb	r3, [r7, #19]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <FitnessControllerBLEInit+0x6e>
		printf("aci_gatt_init failed\n\r");
 8000c26:	4828      	ldr	r0, [pc, #160]	; (8000cc8 <FitnessControllerBLEInit+0x108>)
 8000c28:	f005 fa9c 	bl	8006164 <iprintf>
		while(1);
 8000c2c:	e7fe      	b.n	8000c2c <FitnessControllerBLEInit+0x6c>
	}


    status = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, strlen(DeviceName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff face 	bl	80001d0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	f107 010a 	add.w	r1, r7, #10
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	460b      	mov	r3, r1
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f004 f915 	bl	8004e7a <aci_gap_init_IDB05A1>
 8000c50:	4603      	mov	r3, r0
 8000c52:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8000c54:	7cfb      	ldrb	r3, [r7, #19]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <FitnessControllerBLEInit+0xa2>
		printf("aci_gap_init failed\n\r");
 8000c5a:	481c      	ldr	r0, [pc, #112]	; (8000ccc <FitnessControllerBLEInit+0x10c>)
 8000c5c:	f005 fa82 	bl	8006164 <iprintf>
		while(1);
 8000c60:	e7fe      	b.n	8000c60 <FitnessControllerBLEInit+0xa0>
	}


	status = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(DeviceName), DeviceName);
 8000c62:	897c      	ldrh	r4, [r7, #10]
 8000c64:	893d      	ldrh	r5, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff fab2 	bl	80001d0 <strlen>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f004 fbae 	bl	80053dc <aci_gatt_update_char_value>
 8000c80:	4603      	mov	r3, r0
 8000c82:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8000c84:	7cfb      	ldrb	r3, [r7, #19]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <FitnessControllerBLEInit+0xd2>
		printf("aci_gatt_update_char_value failed\n\r");
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <FitnessControllerBLEInit+0x110>)
 8000c8c:	f005 fa6a 	bl	8006164 <iprintf>
		while(1);
 8000c90:	e7fe      	b.n	8000c90 <FitnessControllerBLEInit+0xd0>
	}
	uint16_t test_appearance_value = 0x03C4;
 8000c92:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8000c96:	803b      	strh	r3, [r7, #0]
	status = aci_gatt_update_char_value(service_handle,appearance_char_handle,0,2,&test_appearance_value);
 8000c98:	8978      	ldrh	r0, [r7, #10]
 8000c9a:	88f9      	ldrh	r1, [r7, #6]
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f004 fb9a 	bl	80053dc <aci_gatt_update_char_value>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	74fb      	strb	r3, [r7, #19]
	AddServices();
 8000cac:	f000 f820 	bl	8000cf0 <AddServices>


}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	0800731c 	.word	0x0800731c
 8000cbc:	0800756c 	.word	0x0800756c
 8000cc0:	08000da9 	.word	0x08000da9
 8000cc4:	08007338 	.word	0x08007338
 8000cc8:	0800735c 	.word	0x0800735c
 8000ccc:	08007374 	.word	0x08007374
 8000cd0:	0800738c 	.word	0x0800738c

08000cd4 <FitnessController_BLE_Process>:

void FitnessController_BLE_Process(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0


	//make device discoverable
	if(connected){
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <FitnessController_BLE_Process+0x18>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <FitnessController_BLE_Process+0x10>
		SetConnectable();
 8000ce0:	f000 f834 	bl	8000d4c <SetConnectable>
	}
    //if new controller data is available:
	//call SendHIDData();
	hci_user_evt_proc();
 8000ce4:	f005 f86c 	bl	8005dc0 <hci_user_evt_proc>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000034 	.word	0x20000034

08000cf0 <AddServices>:

static void AddServices(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

	  HIDServiceStatus_t HIDStatus;
	  HIDStatus = AddHIDService();
 8000cf6:	f000 f861 	bl	8000dbc <AddHIDService>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	  if(HIDStatus != HID_OK){
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d003      	beq.n	8000d0c <AddServices+0x1c>
          printf("Add HID Service Failed\n\r");
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <AddServices+0x50>)
 8000d06:	f005 fa2d 	bl	8006164 <iprintf>
          while(1);
 8000d0a:	e7fe      	b.n	8000d0a <AddServices+0x1a>
	  }

	  BatteryServiceStatus_t BatStatus;
	  BatStatus = AddBatteryService();
 8000d0c:	f7ff fdcc 	bl	80008a8 <AddBatteryService>
 8000d10:	4603      	mov	r3, r0
 8000d12:	71bb      	strb	r3, [r7, #6]
	  if(BatStatus != Battery_OK){
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d003      	beq.n	8000d22 <AddServices+0x32>
		  printf("Add Battery Service Failed\n\r");
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <AddServices+0x54>)
 8000d1c:	f005 fa22 	bl	8006164 <iprintf>
          while(1);
 8000d20:	e7fe      	b.n	8000d20 <AddServices+0x30>
	  }

	  DeviceInfoServiceStatus_t DIStatus;
	  DIStatus = AddDeviceInfoService();
 8000d22:	f7ff fe7f 	bl	8000a24 <AddDeviceInfoService>
 8000d26:	4603      	mov	r3, r0
 8000d28:	717b      	strb	r3, [r7, #5]
	  if(DIStatus != DeviceInfo_OK){
 8000d2a:	797b      	ldrb	r3, [r7, #5]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d003      	beq.n	8000d38 <AddServices+0x48>
		  printf("Add Device Service Failed\n\r");
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <AddServices+0x58>)
 8000d32:	f005 fa17 	bl	8006164 <iprintf>
          while(1);
 8000d36:	e7fe      	b.n	8000d36 <AddServices+0x46>
	  }

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	080073b0 	.word	0x080073b0
 8000d44:	080073cc 	.word	0x080073cc
 8000d48:	080073ec 	.word	0x080073ec

08000d4c <SetConnectable>:

static tBleStatus SetConnectable(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af08      	add	r7, sp, #32
	tBleStatus status;
    status = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000d52:	2300      	movs	r3, #0
 8000d54:	9306      	str	r3, [sp, #24]
 8000d56:	2300      	movs	r3, #0
 8000d58:	9305      	str	r3, [sp, #20]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9304      	str	r3, [sp, #16]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9303      	str	r3, [sp, #12]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <SetConnectable+0x50>)
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	2313      	movs	r3, #19
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2000      	movs	r0, #0
 8000d76:	f004 f8d0 	bl	8004f1a <aci_gap_set_discoverable>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
    connected = DEVICE_CONNECTED;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SetConnectable+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	if(status != BLE_STATUS_SUCCESS){
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <SetConnectable+0x44>
		printf("aci_gap_set_discoverable failed\n\r");
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <SetConnectable+0x58>)
 8000d8c:	f005 f9ea 	bl	8006164 <iprintf>
	}

	return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08007574 	.word	0x08007574
 8000da0:	20000034 	.word	0x20000034
 8000da4:	08007408 	.word	0x08007408

08000da8 <ControllerEventNotify>:

static void ControllerEventNotify(void *pData){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <AddHIDService>:
};

static HIDServiceStatus_t AddHIDCharacteristics(void);
static HIDServiceStatus_t InitHIDCharacteristicValues(void);

HIDServiceStatus_t AddHIDService(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af02      	add	r7, sp, #8
	tBleStatus status;
	HIDServiceStatus_t ret;
	uint16_t uuid = HID_SERVICE_UUID;
 8000dc2:	f641 0309 	movw	r3, #6153	; 0x1809
 8000dc6:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &HidServiceHandle);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <AddHIDService+0x44>)
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2310      	movs	r3, #16
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f004 f9ae 	bl	8005134 <aci_gatt_add_serv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <AddHIDService+0x30>
		printf("Adding HID Service Failed\n\r");
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <AddHIDService+0x48>)
 8000de4:	f005 f9be 	bl	8006164 <iprintf>
		return HID_AddServiceErr;
 8000de8:	2304      	movs	r3, #4
 8000dea:	e004      	b.n	8000df6 <AddHIDService+0x3a>
	}
	ret = AddHIDCharacteristics();
 8000dec:	f000 f80c 	bl	8000e08 <AddHIDCharacteristics>
 8000df0:	4603      	mov	r3, r0
 8000df2:	71bb      	strb	r3, [r7, #6]
    return ret;
 8000df4:	79bb      	ldrb	r3, [r7, #6]

}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000021a 	.word	0x2000021a
 8000e04:	080074c4 	.word	0x080074c4

08000e08 <AddHIDCharacteristics>:

uint16_t GetHIDServiceHandle(void){
	return HidServiceHandle;
}

static HIDServiceStatus_t AddHIDCharacteristics(void){
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b08b      	sub	sp, #44	; 0x2c
 8000e0c:	af06      	add	r7, sp, #24
	tBleStatus status;
	HIDServiceStatus_t ret;
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e040      	b.n	8000e96 <AddHIDCharacteristics+0x8e>
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <AddHIDCharacteristics+0xa8>)
 8000e16:	881c      	ldrh	r4, [r3, #0]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <AddHIDCharacteristics+0xac>)
 8000e1c:	5cd5      	ldrb	r5, [r2, r3]
        		                   HIDCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&HIDCharUUIDLookUpTable[i],  //UUID Value
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <AddHIDCharacteristics+0xb0>)
 8000e24:	189e      	adds	r6, r3, r2
								   HIDCharValueLenLookUpTable[i],               //Char Value Length
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <AddHIDCharacteristics+0xb4>)
 8000e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8000e2e:	fa5f fc83 	uxtb.w	ip, r3
				                   HIDCharPropertiesLookUpTable[i],             //Char Properties
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <AddHIDCharacteristics+0xb8>)
 8000e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	4920      	ldr	r1, [pc, #128]	; (8000ec4 <AddHIDCharacteristics+0xbc>)
 8000e42:	5c8a      	ldrb	r2, [r1, r2]
 8000e44:	7bf9      	ldrb	r1, [r7, #15]
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <AddHIDCharacteristics+0xc0>)
 8000e48:	5c41      	ldrb	r1, [r0, r1]
				                   HIDCharPermissionsLookUpTable[i],            //Char SecPermissions
								   HID_CharNotifyModeLookUpTable[i],            //Char Application (Server Side)Notify Mode e.g. Will the BLE Controller Notify me when a r/w occurs
				                   16,                                          //Encyption Key Size
				                   0,                                           //Does the value field have variable length? 1= yes, 0 = no
				                   &HIDCharHandleLookUpTable[i]);               //HID Char Handle Address
 8000e4a:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8000e4c:	0040      	lsls	r0, r0, #1
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <AddHIDCharacteristics+0xc4>)
 8000e50:	4418      	add	r0, r3
 8000e52:	9005      	str	r0, [sp, #20]
 8000e54:	2000      	movs	r0, #0
 8000e56:	9004      	str	r0, [sp, #16]
 8000e58:	2010      	movs	r0, #16
 8000e5a:	9003      	str	r0, [sp, #12]
 8000e5c:	9102      	str	r1, [sp, #8]
 8000e5e:	9201      	str	r2, [sp, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4663      	mov	r3, ip
 8000e66:	4632      	mov	r2, r6
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f004 f9eb 	bl	8005246 <aci_gatt_add_char>
 8000e70:	4603      	mov	r3, r0
 8000e72:	737b      	strb	r3, [r7, #13]
        if(status != BLE_STATUS_SUCCESS){
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00a      	beq.n	8000e90 <AddHIDCharacteristics+0x88>
        	printf(HIDCharErrorStringLookUpTable[i]);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <AddHIDCharacteristics+0xc8>)
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 f96e 	bl	8006164 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <AddHIDCharacteristics+0xcc>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	e00a      	b.n	8000ea6 <AddHIDCharacteristics+0x9e>
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	3301      	adds	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d9bb      	bls.n	8000e14 <AddHIDCharacteristics+0xc>
        }
    }
    ret = InitHIDCharacteristicValues();
 8000e9c:	f000 f81c 	bl	8000ed8 <InitHIDCharacteristicValues>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73bb      	strb	r3, [r7, #14]
    return ret;
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000021a 	.word	0x2000021a
 8000eb4:	08007640 	.word	0x08007640
 8000eb8:	08007644 	.word	0x08007644
 8000ebc:	20000044 	.word	0x20000044
 8000ec0:	2000004c 	.word	0x2000004c
 8000ec4:	0800764c 	.word	0x0800764c
 8000ec8:	08007650 	.word	0x08007650
 8000ecc:	2000021c 	.word	0x2000021c
 8000ed0:	20000054 	.word	0x20000054
 8000ed4:	08007654 	.word	0x08007654

08000ed8 <InitHIDCharacteristicValues>:

static HIDServiceStatus_t InitHIDCharacteristicValues(void){
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af04      	add	r7, sp, #16
	tBleStatus status;

	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	e07c      	b.n	8000fde <InitHIDCharacteristicValues+0x106>

		if(HIDCharValueLenLookUpTable[i] && i != HID_REPORTMAP_INDEX){
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d01c      	beq.n	8000f2a <InitHIDCharacteristicValues+0x52>
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d019      	beq.n	8000f2a <InitHIDCharacteristicValues+0x52>
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <InitHIDCharacteristicValues+0x11c>)
 8000ef8:	8818      	ldrh	r0, [r3, #0]
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <InitHIDCharacteristicValues+0x120>)
 8000efe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														0,                                 //The offset from which the attribute value has to be updated
														0,
														0,
														HIDCharValueLenLookUpTable[i],     //Length of the value to be updated
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 8000f0e:	4c3b      	ldr	r4, [pc, #236]	; (8000ffc <InitHIDCharacteristicValues+0x124>)
 8000f10:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f14:	9202      	str	r2, [sp, #8]
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f004 fb2b 	bl	800557a <aci_gatt_update_char_value_ext_IDB05A1>
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	e045      	b.n	8000fb6 <InitHIDCharacteristicValues+0xde>
		} else if (HIDCharValueLenLookUpTable[i] && i == HID_REPORTMAP_INDEX){ /* Deal with Report Map Timeout bug. */
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	4a30      	ldr	r2, [pc, #192]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d03f      	beq.n	8000fb6 <InitHIDCharacteristicValues+0xde>
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d13c      	bne.n	8000fb6 <InitHIDCharacteristicValues+0xde>
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <InitHIDCharacteristicValues+0x11c>)
 8000f3e:	8818      	ldrh	r0, [r3, #0]
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <InitHIDCharacteristicValues+0x120>)
 8000f44:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														0,                                 //The offset from which the attribute value has to be updated
														0,
														0,
														HIDCharValueLenLookUpTable[i] / 2,     //Length of the value to be updated
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	79ba      	ldrb	r2, [r7, #6]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 8000f58:	4c28      	ldr	r4, [pc, #160]	; (8000ffc <InitHIDCharacteristicValues+0x124>)
 8000f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f5e:	9202      	str	r2, [sp, #8]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f004 fb06 	bl	800557a <aci_gatt_update_char_value_ext_IDB05A1>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]

			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <InitHIDCharacteristicValues+0x11c>)
 8000f74:	8818      	ldrh	r0, [r3, #0]
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <InitHIDCharacteristicValues+0x120>)
 8000f7a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														HIDCharValueLenLookUpTable[i] / 2, //The offset from which the attribute value has to be updated
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	b2dc      	uxtb	r4, r3
														0,
														0,
														HIDCharValueLenLookUpTable[i] / 2, //Length of the value to be updated
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <InitHIDCharacteristicValues+0x118>)
 8000f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 8000f9c:	4d17      	ldr	r5, [pc, #92]	; (8000ffc <InitHIDCharacteristicValues+0x124>)
 8000f9e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8000fa2:	9202      	str	r2, [sp, #8]
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	4622      	mov	r2, r4
 8000fae:	f004 fae4 	bl	800557a <aci_gatt_update_char_value_ext_IDB05A1>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
		}

        if(status != BLE_STATUS_SUCCESS){
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00d      	beq.n	8000fd8 <InitHIDCharacteristicValues+0x100>
        	printf("Error Initializing Characteristic\n\r");
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <InitHIDCharacteristicValues+0x128>)
 8000fbe:	f005 f8d1 	bl	8006164 <iprintf>
        	printf(HIDCharErrorStringLookUpTable[i]);
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <InitHIDCharacteristicValues+0x12c>)
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 f8ca 	bl	8006164 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <InitHIDCharacteristicValues+0x130>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	e007      	b.n	8000fe8 <InitHIDCharacteristicValues+0x110>
	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	71bb      	strb	r3, [r7, #6]
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	f67f af7f 	bls.w	8000ee4 <InitHIDCharacteristicValues+0xc>
        }
	}
	return HID_OK;
 8000fe6:	2305      	movs	r3, #5
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff0:	20000044 	.word	0x20000044
 8000ff4:	2000021a 	.word	0x2000021a
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	20000064 	.word	0x20000064
 8001000:	080074e0 	.word	0x080074e0
 8001004:	20000054 	.word	0x20000054
 8001008:	08007654 	.word	0x08007654

0800100c <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	4bbc      	ldr	r3, [pc, #752]	; (8001314 <MX_GPIO_Init+0x308>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4abb      	ldr	r2, [pc, #748]	; (8001314 <MX_GPIO_Init+0x308>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4bb9      	ldr	r3, [pc, #740]	; (8001314 <MX_GPIO_Init+0x308>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4bb6      	ldr	r3, [pc, #728]	; (8001314 <MX_GPIO_Init+0x308>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4ab5      	ldr	r2, [pc, #724]	; (8001314 <MX_GPIO_Init+0x308>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4bb3      	ldr	r3, [pc, #716]	; (8001314 <MX_GPIO_Init+0x308>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4bb0      	ldr	r3, [pc, #704]	; (8001314 <MX_GPIO_Init+0x308>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4aaf      	ldr	r2, [pc, #700]	; (8001314 <MX_GPIO_Init+0x308>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4bad      	ldr	r3, [pc, #692]	; (8001314 <MX_GPIO_Init+0x308>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4baa      	ldr	r3, [pc, #680]	; (8001314 <MX_GPIO_Init+0x308>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4aa9      	ldr	r2, [pc, #676]	; (8001314 <MX_GPIO_Init+0x308>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4ba7      	ldr	r3, [pc, #668]	; (8001314 <MX_GPIO_Init+0x308>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4ba4      	ldr	r3, [pc, #656]	; (8001314 <MX_GPIO_Init+0x308>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4aa3      	ldr	r2, [pc, #652]	; (8001314 <MX_GPIO_Init+0x308>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <MX_GPIO_Init+0x308>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80010a0:	489d      	ldr	r0, [pc, #628]	; (8001318 <MX_GPIO_Init+0x30c>)
 80010a2:	f001 f9f3 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f248 1104 	movw	r1, #33028	; 0x8104
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 f9ec 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010b4:	2200      	movs	r2, #0
 80010b6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80010ba:	4898      	ldr	r0, [pc, #608]	; (800131c <MX_GPIO_Init+0x310>)
 80010bc:	f001 f9e6 	bl	800248c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f241 0181 	movw	r1, #4225	; 0x1081
 80010c6:	4896      	ldr	r0, [pc, #600]	; (8001320 <MX_GPIO_Init+0x314>)
 80010c8:	f001 f9e0 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	4893      	ldr	r0, [pc, #588]	; (8001320 <MX_GPIO_Init+0x314>)
 80010d4:	f001 f9da 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80010de:	4891      	ldr	r0, [pc, #580]	; (8001324 <MX_GPIO_Init+0x318>)
 80010e0:	f001 f9d4 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	488c      	ldr	r0, [pc, #560]	; (800131c <MX_GPIO_Init+0x310>)
 80010ea:	f001 f9cf 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	4889      	ldr	r0, [pc, #548]	; (8001318 <MX_GPIO_Init+0x30c>)
 80010f4:	f001 f9ca 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80010f8:	f240 1315 	movw	r3, #277	; 0x115
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4881      	ldr	r0, [pc, #516]	; (8001318 <MX_GPIO_Init+0x30c>)
 8001112:	f000 ff05 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001116:	236a      	movs	r3, #106	; 0x6a
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	487b      	ldr	r0, [pc, #492]	; (8001318 <MX_GPIO_Init+0x30c>)
 800112c:	f000 fef8 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001136:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4877      	ldr	r0, [pc, #476]	; (8001324 <MX_GPIO_Init+0x318>)
 8001148:	f000 feea 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800114c:	233f      	movs	r3, #63	; 0x3f
 800114e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001150:	230b      	movs	r3, #11
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4871      	ldr	r0, [pc, #452]	; (8001324 <MX_GPIO_Init+0x318>)
 8001160:	f000 fede 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001164:	2303      	movs	r3, #3
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001174:	2308      	movs	r3, #8
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f000 fecd 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001186:	f248 1304 	movw	r3, #33028	; 0x8104
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f000 febd 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011a6:	2308      	movs	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f000 feac 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011cc:	230b      	movs	r3, #11
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f000 fe9f 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80011e2:	23e0      	movs	r3, #224	; 0xe0
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fe8e 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001208:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4840      	ldr	r0, [pc, #256]	; (800131c <MX_GPIO_Init+0x310>)
 800121a:	f000 fe81 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800121e:	2302      	movs	r3, #2
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001222:	230b      	movs	r3, #11
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	483a      	ldr	r0, [pc, #232]	; (800131c <MX_GPIO_Init+0x310>)
 8001232:	f000 fe75 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001236:	f24f 0334 	movw	r3, #61492	; 0xf034
 800123a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4833      	ldr	r0, [pc, #204]	; (800131c <MX_GPIO_Init+0x310>)
 8001250:	f000 fe66 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001254:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001266:	2306      	movs	r3, #6
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4829      	ldr	r0, [pc, #164]	; (8001318 <MX_GPIO_Init+0x30c>)
 8001272:	f000 fe55 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001276:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800127a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001288:	230a      	movs	r3, #10
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <MX_GPIO_Init+0x30c>)
 8001294:	f000 fe44 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001298:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2312      	movs	r3, #18
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012aa:	2304      	movs	r3, #4
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4819      	ldr	r0, [pc, #100]	; (800131c <MX_GPIO_Init+0x310>)
 80012b6:	f000 fe33 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012cc:	2307      	movs	r3, #7
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <MX_GPIO_Init+0x314>)
 80012d8:	f000 fe22 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80012dc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80012e0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <MX_GPIO_Init+0x314>)
 80012f4:	f000 fe14 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80012f8:	f243 0381 	movw	r3, #12417	; 0x3081
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	e00a      	b.n	8001328 <MX_GPIO_Init+0x31c>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	48001000 	.word	0x48001000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000c00 	.word	0x48000c00
 8001324:	48000800 	.word	0x48000800
 8001328:	4842      	ldr	r0, [pc, #264]	; (8001434 <MX_GPIO_Init+0x428>)
 800132a:	f000 fdf9 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800132e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	483c      	ldr	r0, [pc, #240]	; (8001438 <MX_GPIO_Init+0x42c>)
 8001348:	f000 fdea 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800134c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4835      	ldr	r0, [pc, #212]	; (8001438 <MX_GPIO_Init+0x42c>)
 8001364:	f000 fddc 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f000 fdce 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001384:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001396:	230a      	movs	r3, #10
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f000 fdbc 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b8:	2305      	movs	r3, #5
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_GPIO_Init+0x428>)
 80013c4:	f000 fdac 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80013c8:	2378      	movs	r3, #120	; 0x78
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d8:	2307      	movs	r3, #7
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <MX_GPIO_Init+0x428>)
 80013e4:	f000 fd9c 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80013e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ee:	2312      	movs	r3, #18
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fa:	2304      	movs	r3, #4
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_GPIO_Init+0x430>)
 8001406:	f000 fd8b 	bl	8001f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2017      	movs	r0, #23
 8001410:	f000 fcf1 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001414:	2017      	movs	r0, #23
 8001416:	f000 fd0a 	bl	8001e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2028      	movs	r0, #40	; 0x28
 8001420:	f000 fce9 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001424:	2028      	movs	r0, #40	; 0x28
 8001426:	f000 fd02 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	48000c00 	.word	0x48000c00
 8001438:	48000800 	.word	0x48000800
 800143c:	48000400 	.word	0x48000400

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fb64 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f80e 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff fdde 	bl	800100c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001450:	f000 f9a2 	bl	8001798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FitnessControllerBLEInit();
 8001454:	f7ff fbb4 	bl	8000bc0 <FitnessControllerBLEInit>
  printf("Initialization Success!\n");
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <main+0x24>)
 800145a:	f004 ff09 	bl	8006270 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	FitnessController_BLE_Process();
 800145e:	f7ff fc39 	bl	8000cd4 <FitnessController_BLE_Process>
 8001462:	e7fc      	b.n	800145e <main+0x1e>
 8001464:	08007504 	.word	0x08007504

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2244      	movs	r2, #68	; 0x44
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fe6c 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800148a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148e:	f001 f857 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001498:	f000 f848 	bl	800152c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800149c:	f001 f832 	bl	8002504 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <SystemClock_Config+0xc0>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <SystemClock_Config+0xc0>)
 80014a8:	f023 0318 	bic.w	r3, r3, #24
 80014ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014b0:	2314      	movs	r3, #20
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014d0:	2328      	movs	r3, #40	; 0x28
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014d4:	2307      	movs	r3, #7
 80014d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f881 	bl	80025ec <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014f0:	f000 f81c 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2303      	movs	r3, #3
 80014fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	2104      	movs	r1, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fc49 	bl	8002da4 <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001518:	f000 f808 	bl	800152c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800151c:	f002 f950 	bl	80037c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001520:	bf00      	nop
 8001522:	3758      	adds	r7, #88	; 0x58
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x44>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6613      	str	r3, [r2, #96]	; 0x60
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x44>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x44>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x44>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 faf4 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80015d8:	2020      	movs	r0, #32
 80015da:	f000 ff6f 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <EXTI9_5_IRQHandler+0x24>)
 80015e0:	f000 fc6e 	bl	8001ec0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80015e4:	2080      	movs	r0, #128	; 0x80
 80015e6:	f000 ff69 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80015ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ee:	f000 ff65 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000100 	.word	0x20000100

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001604:	f000 ff5a 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001608:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800160c:	f000 ff56 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001614:	f000 ff52 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001618:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800161c:	f000 ff4e 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001620:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001624:	f000 ff4a 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00a      	b.n	8001654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163e:	f3af 8000 	nop.w
 8001642:	4601      	mov	r1, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf0      	blt.n	800163e <_read+0x12>
	}

return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e009      	b.n	800168c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f917 	bl	80018b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf1      	blt.n	8001678 <_write+0x12>
	}
	return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_close>:

int _close(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c6:	605a      	str	r2, [r3, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_isatty>:

int _isatty(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
	return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f004 fcd4 	bl	80060e4 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20018000 	.word	0x20018000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000224 	.word	0x20000224
 8001770:	20000898 	.word	0x20000898

08001774 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_USART1_UART_Init+0x5c>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART1_UART_Init+0x58>)
 80017dc:	f002 fe04 	bl	80043e8 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e6:	f7ff fea1 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000228 	.word	0x20000228
 80017f4:	40013800 	.word	0x40013800

080017f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0ac      	sub	sp, #176	; 0xb0
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2288      	movs	r2, #136	; 0x88
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fc9b 	bl	8006154 <memset>
  if(uartHandle->Instance==USART1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_UART_MspInit+0xb0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d13a      	bne.n	800189e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800182c:	2300      	movs	r3, #0
 800182e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fcd9 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001840:	f7ff fe74 	bl	800152c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0xb4>)
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_UART_MspInit+0xb4>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184e:	6613      	str	r3, [r2, #96]	; 0x60
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_UART_MspInit+0xb4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_UART_MspInit+0xb4>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_UART_MspInit+0xb4>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_UART_MspInit+0xb4>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0xb8>)
 800189a:	f000 fb41 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	37b0      	adds	r7, #176	; 0xb0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000400 	.word	0x48000400

080018b4 <__io_putchar>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 10);
 80018bc:	1d39      	adds	r1, r7, #4
 80018be:	230a      	movs	r3, #10
 80018c0:	2201      	movs	r2, #1
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <__io_putchar+0x20>)
 80018c4:	f002 fdde 	bl	8004484 <HAL_UART_Transmit>
	return ch;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000228 	.word	0x20000228

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff ff4a 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f004 fbf3 	bl	80060f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7ff fd99 	bl	8001440 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800191c:	08007748 	.word	0x08007748
  ldr r2, =_sbss
 8001920:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001924:	20000894 	.word	0x20000894

08001928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_2_IRQHandler>
	...

0800192c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <BSP_SPI3_Init+0x54>)
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <BSP_SPI3_Init+0x58>)
 800193a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <BSP_SPI3_Init+0x5c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	4911      	ldr	r1, [pc, #68]	; (8001988 <BSP_SPI3_Init+0x5c>)
 8001944:	600a      	str	r2, [r1, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d114      	bne.n	8001974 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <BSP_SPI3_Init+0x54>)
 800194c:	f002 fbda 	bl	8004104 <HAL_SPI_GetState>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10e      	bne.n	8001974 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <BSP_SPI3_Init+0x54>)
 8001958:	f000 f882 	bl	8001a60 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <BSP_SPI3_Init+0x54>)
 8001964:	f000 f83a 	bl	80019dc <MX_SPI3_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800196e:	f06f 0307 	mvn.w	r3, #7
 8001972:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002ac 	.word	0x200002ac
 8001984:	40003c00 	.word	0x40003c00
 8001988:	20000310 	.word	0x20000310

0800198c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a4:	9200      	str	r2, [sp, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <BSP_SPI3_SendRecv+0x3c>)
 80019ac:	f002 f997 	bl	8003cde <HAL_SPI_TransmitReceive>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80019b6:	f06f 0305 	mvn.w	r3, #5
 80019ba:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80019bc:	697b      	ldr	r3, [r7, #20]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200002ac 	.word	0x200002ac

080019cc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80019d0:	f000 f906 	bl	8001be0 <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_SPI3_Init+0x80>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a02:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2218      	movs	r2, #24
 8001a1c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2207      	movs	r2, #7
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f002 f89e 	bl	8003b84 <HAL_SPI_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40003c00 	.word	0x40003c00

08001a60 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <SPI3_MspInit+0xa8>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8001a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4815      	ldr	r0, [pc, #84]	; (8001b0c <SPI3_MspInit+0xac>)
 8001ab6:	f000 fa33 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8001aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8001acc:	2306      	movs	r3, #6
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <SPI3_MspInit+0xac>)
 8001ad8:	f000 fa22 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8001aee:	2306      	movs	r3, #6
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <SPI3_MspInit+0xac>)
 8001afa:	f000 fa11 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000800 	.word	0x48000800

08001b10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f000 f960 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b20:	2000      	movs	r0, #0
 8001b22:	f000 f80d 	bl	8001b40 <HAL_InitTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	e001      	b.n	8001b36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b32:	f7ff fd01 	bl	8001538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_InitTick+0x6c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d023      	beq.n	8001b9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_InitTick+0x70>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_InitTick+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f96d 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10f      	bne.n	8001b96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d809      	bhi.n	8001b90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f937 	bl	8001df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_InitTick+0x74>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e007      	b.n	8001ba0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e004      	b.n	8001ba0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e001      	b.n	8001ba0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000007c 	.word	0x2000007c
 8001bb0:	20000074 	.word	0x20000074
 8001bb4:	20000078 	.word	0x20000078

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000007c 	.word	0x2000007c
 8001bdc:	20000314 	.word	0x20000314

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000314 	.word	0x20000314

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000007c 	.word	0x2000007c

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]
      break;
 8001e80:	e002      	b.n	8001e88 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
      break;
 8001e86:	bf00      	nop
  }

  return status;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e003      	b.n	8001eb2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2201      	movs	r2, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_EXTI_IRQHandler+0x5c>)
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4798      	blx	r3
    }
  }
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40010414 	.word	0x40010414

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e17f      	b.n	8002230 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8171 	beq.w	800222a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d005      	beq.n	8001f60 <HAL_GPIO_Init+0x40>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d130      	bne.n	8001fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f96:	2201      	movs	r2, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 0201 	and.w	r2, r3, #1
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d118      	bne.n	8002000 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	6939      	ldr	r1, [r7, #16]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80ac 	beq.w	800222a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_GPIO_Init+0x330>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_GPIO_Init+0x330>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6613      	str	r3, [r2, #96]	; 0x60
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_GPIO_Init+0x330>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020ea:	4a5a      	ldr	r2, [pc, #360]	; (8002254 <HAL_GPIO_Init+0x334>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002114:	d025      	beq.n	8002162 <HAL_GPIO_Init+0x242>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4f      	ldr	r2, [pc, #316]	; (8002258 <HAL_GPIO_Init+0x338>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x23e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4e      	ldr	r2, [pc, #312]	; (800225c <HAL_GPIO_Init+0x33c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4d      	ldr	r2, [pc, #308]	; (8002260 <HAL_GPIO_Init+0x340>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x236>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <HAL_GPIO_Init+0x344>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x232>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <HAL_GPIO_Init+0x348>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x22e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4a      	ldr	r2, [pc, #296]	; (800226c <HAL_GPIO_Init+0x34c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x22a>
 8002146:	2306      	movs	r3, #6
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x244>
 800214a:	2307      	movs	r3, #7
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x244>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x244>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x244>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x244>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x244>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x244>
 8002162:	2300      	movs	r3, #0
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002174:	4937      	ldr	r1, [pc, #220]	; (8002254 <HAL_GPIO_Init+0x334>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_GPIO_Init+0x350>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a6:	4a32      	ldr	r2, [pc, #200]	; (8002270 <HAL_GPIO_Init+0x350>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_GPIO_Init+0x350>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_GPIO_Init+0x350>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_GPIO_Init+0x350>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_GPIO_Init+0x350>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_GPIO_Init+0x350>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_GPIO_Init+0x350>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f ae78 	bne.w	8001f30 <HAL_GPIO_Init+0x10>
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40010000 	.word	0x40010000
 8002258:	48000400 	.word	0x48000400
 800225c:	48000800 	.word	0x48000800
 8002260:	48000c00 	.word	0x48000c00
 8002264:	48001000 	.word	0x48001000
 8002268:	48001400 	.word	0x48001400
 800226c:	48001800 	.word	0x48001800
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002282:	e0cd      	b.n	8002420 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002284:	2201      	movs	r2, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80c0 	beq.w	800241a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800229a:	4a68      	ldr	r2, [pc, #416]	; (800243c <HAL_GPIO_DeInit+0x1c8>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022c2:	d025      	beq.n	8002310 <HAL_GPIO_DeInit+0x9c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_GPIO_DeInit+0x1cc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01f      	beq.n	800230c <HAL_GPIO_DeInit+0x98>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a5d      	ldr	r2, [pc, #372]	; (8002444 <HAL_GPIO_DeInit+0x1d0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d019      	beq.n	8002308 <HAL_GPIO_DeInit+0x94>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a5c      	ldr	r2, [pc, #368]	; (8002448 <HAL_GPIO_DeInit+0x1d4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <HAL_GPIO_DeInit+0x90>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_GPIO_DeInit+0x1d8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_GPIO_DeInit+0x8c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_GPIO_DeInit+0x1dc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <HAL_GPIO_DeInit+0x88>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_GPIO_DeInit+0x1e0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_GPIO_DeInit+0x84>
 80022f4:	2306      	movs	r3, #6
 80022f6:	e00c      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 80022f8:	2307      	movs	r3, #7
 80022fa:	e00a      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 80022fc:	2305      	movs	r3, #5
 80022fe:	e008      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 8002300:	2304      	movs	r3, #4
 8002302:	e006      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 8002304:	2303      	movs	r3, #3
 8002306:	e004      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_DeInit+0x9e>
 8002310:	2300      	movs	r3, #0
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	d132      	bne.n	8002388 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002322:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	494b      	ldr	r1, [pc, #300]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 800232c:	4013      	ands	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	4947      	ldr	r1, [pc, #284]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 800233a:	4013      	ands	r3, r2
 800233c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800233e:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	4944      	ldr	r1, [pc, #272]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	4940      	ldr	r1, [pc, #256]	; (8002458 <HAL_GPIO_DeInit+0x1e4>)
 8002356:	4013      	ands	r3, r2
 8002358:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800236a:	4a34      	ldr	r2, [pc, #208]	; (800243c <HAL_GPIO_DeInit+0x1c8>)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43da      	mvns	r2, r3
 800237a:	4830      	ldr	r0, [pc, #192]	; (800243c <HAL_GPIO_DeInit+0x1c8>)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	400a      	ands	r2, r1
 8002382:	3302      	adds	r3, #2
 8002384:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2103      	movs	r1, #3
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	08d2      	lsrs	r2, r2, #3
 80023bc:	4019      	ands	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2103      	movs	r1, #3
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2101      	movs	r1, #1
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2103      	movs	r1, #3
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	401a      	ands	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	2101      	movs	r1, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f af2b 	bne.w	8002284 <HAL_GPIO_DeInit+0x10>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40010000 	.word	0x40010000
 8002440:	48000400 	.word	0x48000400
 8002444:	48000800 	.word	0x48000800
 8002448:	48000c00 	.word	0x48000c00
 800244c:	48001000 	.word	0x48001000
 8002450:	48001400 	.word	0x48001400
 8002454:	48001800 	.word	0x48001800
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e001      	b.n	800247e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f806 	bl	80024ec <HAL_GPIO_EXTI_Callback>
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_PWREx_GetVoltageRange+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254e:	d130      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d038      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2232      	movs	r2, #50	; 0x32
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002584:	e002      	b.n	800258c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b01      	subs	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d102      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f2      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d110      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d007      	beq.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000
 80025e4:	20000074 	.word	0x20000074
 80025e8:	431bde83 	.word	0x431bde83

080025ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e3ca      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b97      	ldr	r3, [pc, #604]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b94      	ldr	r3, [pc, #592]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80e4 	beq.w	80027e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x4a>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f040 808b 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 8087 	bne.w	8002744 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3a2      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCC_OscConfig+0x7c>
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002666:	e005      	b.n	8002674 <HAL_RCC_OscConfig+0x88>
 8002668:	4b7c      	ldr	r3, [pc, #496]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002674:	4293      	cmp	r3, r2
 8002676:	d223      	bcs.n	80026c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd55 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e383      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a72      	ldr	r2, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	496d      	ldr	r1, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	4968      	ldr	r1, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e025      	b.n	800270c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4960      	ldr	r1, [pc, #384]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026de:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	495b      	ldr	r1, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd15 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e343      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270c:	f000 fc4a 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4950      	ldr	r1, [pc, #320]	; (8002860 <HAL_RCC_OscConfig+0x274>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	4a4e      	ldr	r2, [pc, #312]	; (8002864 <HAL_RCC_OscConfig+0x278>)
 800272a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800272c:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fa05 	bl	8001b40 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d052      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	e327      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a42      	ldr	r2, [pc, #264]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002758:	f7ff fa42 	bl	8001be0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7ff fa3e 	bl	8001be0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e310      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a36      	ldr	r2, [pc, #216]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4931      	ldr	r1, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	492c      	ldr	r1, [pc, #176]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e01a      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027be:	f7ff fa0f 	bl	8001be0 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c6:	f7ff fa0b 	bl	8001be0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2dd      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1da>
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d074      	beq.n	80028de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x21a>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d064      	beq.n	80028dc <HAL_RCC_OscConfig+0x2f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d160      	bne.n	80028dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e2ba      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x24a>
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e026      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283e:	d115      	bne.n	800286c <HAL_RCC_OscConfig+0x280>
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a02      	ldr	r2, [pc, #8]	; (800285c <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x298>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	08007658 	.word	0x08007658
 8002864:	20000074 	.word	0x20000074
 8002868:	20000078 	.word	0x20000078
 800286c:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a9f      	ldr	r2, [pc, #636]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b9d      	ldr	r3, [pc, #628]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9c      	ldr	r2, [pc, #624]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f9a8 	bl	8001be0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f9a4 	bl	8001be0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e276      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2a8>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f994 	bl	8001be0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f990 	bl	8001be0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e262      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d060      	beq.n	80029ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x310>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d119      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x328>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e23f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4973      	ldr	r1, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	e040      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7ff f94f 	bl	8001be0 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7ff f94b 	bl	8001be0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e21d      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	495f      	ldr	r1, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff f92b 	bl	8001be0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff f927 	bl	8001be0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1f9      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01c      	beq.n	80029fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7ff f906 	bl	8001be0 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7ff f902 	bl	8001be0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1d4      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ec>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	4a3b      	ldr	r2, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7ff f8e9 	bl	8001be0 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff f8e5 	bl	8001be0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1b7      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7ff f8ac 	bl	8001be0 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7ff f8a8 	bl	8001be0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e17a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0x508>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d8>
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac2:	e029      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_OscConfig+0x50c>
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x52c>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	4b9c      	ldr	r3, [pc, #624]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	4a9b      	ldr	r2, [pc, #620]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b08:	4b98      	ldr	r3, [pc, #608]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a97      	ldr	r2, [pc, #604]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d016      	beq.n	8002b4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff f85e 	bl	8001be0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7ff f85a 	bl	8001be0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e12a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ed      	beq.n	8002b28 <HAL_RCC_OscConfig+0x53c>
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7ff f847 	bl	8001be0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff f843 	bl	8001be0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e113      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6c:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ed      	bne.n	8002b56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80fe 	beq.w	8002d92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	f040 80d0 	bne.w	8002d40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d130      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d127      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be0:	2a07      	cmp	r2, #7
 8002be2:	bf14      	ite	ne
 8002be4:	2201      	movne	r2, #1
 8002be6:	2200      	moveq	r2, #0
 8002be8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d06e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d069      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0ad      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a4b      	ldr	r2, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7fe ffcc 	bl	8001be0 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe ffc8 	bl	8001be0 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e09a      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x784>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0652      	lsls	r2, r2, #25
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca4:	0912      	lsrs	r2, r2, #4
 8002ca6:	0452      	lsls	r2, r2, #17
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4930      	ldr	r1, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc8:	f7fe ff8a 	bl	8001be0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe ff86 	bl	8001be0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cee:	e050      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04f      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d148      	bne.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d18:	f7fe ff62 	bl	8001be0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe ff5e 	bl	8001be0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e030      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x734>
 8002d3e:	e028      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_RCC_OscConfig+0x780>)
 8002d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fe ff45 	bl	8001be0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	e00c      	b.n	8002d74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe ff41 	bl	8001be0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d905      	bls.n	8002d74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ec      	bne.n	8002d5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4905      	ldr	r1, [pc, #20]	; (8002d9c <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x7b4>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
 8002d8c:	e001      	b.n	8002d92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	feeefffc 	.word	0xfeeefffc

08002da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0e7      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4970      	ldr	r1, [pc, #448]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cf      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4960      	ldr	r1, [pc, #384]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d04c      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0a6      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e09a      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e086      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4943      	ldr	r1, [pc, #268]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fea8 	bl	8001be0 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe fea4 	bl	8001be0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e06e      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d208      	bcs.n	8002eea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	492b      	ldr	r1, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d210      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4923      	ldr	r1, [pc, #140]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e036      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4910      	ldr	r1, [pc, #64]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f58:	f000 f824 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	490b      	ldr	r1, [pc, #44]	; (8002f98 <HAL_RCC_ClockConfig+0x1f4>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fddf 	bl	8001b40 <HAL_InitTick>
 8002f82:	4603      	mov	r3, r0
 8002f84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f86:	7afb      	ldrb	r3, [r7, #11]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08007658 	.word	0x08007658
 8002f9c:	20000074 	.word	0x20000074
 8002fa0:	20000078 	.word	0x20000078

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d121      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d11e      	bne.n	8003016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003014:	e00a      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d102      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e004      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d101      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d134      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0xa6>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xac>
 8003048:	e005      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800304c:	617b      	str	r3, [r7, #20]
      break;
 800304e:	e005      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003052:	617b      	str	r3, [r7, #20]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	3301      	adds	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	fb03 f202 	mul.w	r2, r3, r2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0e5b      	lsrs	r3, r3, #25
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800309c:	69bb      	ldr	r3, [r7, #24]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08007670 	.word	0x08007670
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200

080030bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000074 	.word	0x20000074

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08007668 	.word	0x08007668

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003104:	f7ff ffda 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08007668 	.word	0x08007668

0800312c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003144:	f7ff f9ee 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 8003148:	6178      	str	r0, [r7, #20]
 800314a:	e014      	b.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6593      	str	r3, [r2, #88]	; 0x58
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003164:	f7ff f9de 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 8003168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d10b      	bne.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d919      	bls.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2ba0      	cmp	r3, #160	; 0xa0
 8003188:	d902      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	e013      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e010      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d902      	bls.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800319c:	2303      	movs	r3, #3
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e00a      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d102      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a8:	2302      	movs	r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e004      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d101      	bne.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4909      	ldr	r1, [pc, #36]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d041      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003210:	d02a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003212:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003216:	d824      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800321e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003222:	d81e      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322c:	d010      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800322e:	e018      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003230:	4b86      	ldr	r3, [pc, #536]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a85      	ldr	r2, [pc, #532]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323c:	e015      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 facb 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3320      	adds	r3, #32
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fbb6 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	74fb      	strb	r3, [r7, #19]
      break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003270:	4b76      	ldr	r3, [pc, #472]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327e:	4973      	ldr	r1, [pc, #460]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d041      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a0:	d02a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a6:	d824      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ac:	d008      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b2:	d81e      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032bc:	d010      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032be:	e018      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c0:	4b62      	ldr	r3, [pc, #392]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a61      	ldr	r2, [pc, #388]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032cc:	e015      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fa83 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032de:	e00c      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fb6e 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	74fb      	strb	r3, [r7, #19]
      break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003300:	4b52      	ldr	r3, [pc, #328]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330e:	494f      	ldr	r1, [pc, #316]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a0 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	4a40      	ldr	r2, [pc, #256]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6593      	str	r3, [r2, #88]	; 0x58
 8003350:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336c:	f7fe fc38 	bl	8001be0 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003372:	e009      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fe fc34 	bl	8001be0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	74fb      	strb	r3, [r7, #19]
        break;
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003388:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ef      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d15c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01f      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d019      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b8:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a20      	ldr	r2, [pc, #128]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f6:	f7fe fbf3 	bl	8001be0 <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fc:	e00b      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe fbef 	bl	8001be0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d902      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	74fb      	strb	r3, [r7, #19]
            break;
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ec      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	4904      	ldr	r1, [pc, #16]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7c7b      	ldrb	r3, [r7, #17]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b9e      	ldr	r3, [pc, #632]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	4a9d      	ldr	r2, [pc, #628]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	4b98      	ldr	r3, [pc, #608]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 0203 	bic.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	4994      	ldr	r1, [pc, #592]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003498:	4b8f      	ldr	r3, [pc, #572]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 020c 	bic.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	498c      	ldr	r1, [pc, #560]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ba:	4b87      	ldr	r3, [pc, #540]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	4983      	ldr	r1, [pc, #524]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	497b      	ldr	r1, [pc, #492]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	4972      	ldr	r1, [pc, #456]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003520:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	496a      	ldr	r1, [pc, #424]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003542:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	4961      	ldr	r1, [pc, #388]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003564:	4b5c      	ldr	r3, [pc, #368]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	4959      	ldr	r1, [pc, #356]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003586:	4b54      	ldr	r3, [pc, #336]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	4950      	ldr	r1, [pc, #320]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	4948      	ldr	r1, [pc, #288]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	493f      	ldr	r1, [pc, #252]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d028      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ec:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360a:	d106      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	e011      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003622:	d10c      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f8d8 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d028      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	491f      	ldr	r1, [pc, #124]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003668:	d106      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003674:	60d3      	str	r3, [r2, #12]
 8003676:	e011      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003680:	d10c      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f8a9 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a02      	ldr	r2, [pc, #8]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e014      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f877 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02f      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371a:	4928      	ldr	r1, [pc, #160]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800372a:	d10d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f854 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d014      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	74bb      	strb	r3, [r7, #18]
 8003746:	e011      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d10c      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3320      	adds	r3, #32
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f935 	bl	80039c8 <RCCEx_PLLSAI2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ee:	4b75      	ldr	r3, [pc, #468]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d018      	beq.n	800382c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037fa:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
       ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003812:	4b6c      	ldr	r3, [pc, #432]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
       ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d047      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e044      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d018      	beq.n	8003866 <RCCEx_PLLSAI1_Config+0x86>
 8003834:	2b03      	cmp	r3, #3
 8003836:	d825      	bhi.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
 8003838:	2b01      	cmp	r3, #1
 800383a:	d002      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x62>
 800383c:	2b02      	cmp	r3, #2
 800383e:	d009      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0x74>
 8003840:	e020      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003842:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003852:	e01a      	b.n	800388a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003864:	e013      	b.n	800388e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003866:	4b57      	ldr	r3, [pc, #348]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003882:	e006      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e004      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003892:	bf00      	nop
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800389a:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6819      	ldr	r1, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	430b      	orrs	r3, r1
 80038b0:	4944      	ldr	r1, [pc, #272]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d17d      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c8:	f7fe f98a 	bl	8001be0 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ce:	e009      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d0:	f7fe f986 	bl	8001be0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d902      	bls.n	80038e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	73fb      	strb	r3, [r7, #15]
        break;
 80038e2:	e005      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e4:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ef      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d160      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fc:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	0912      	lsrs	r2, r2, #4
 8003914:	0452      	lsls	r2, r2, #17
 8003916:	430a      	orrs	r2, r1
 8003918:	492a      	ldr	r1, [pc, #168]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
 800391e:	e027      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d112      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800392e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	0211      	lsls	r1, r2, #8
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6912      	ldr	r2, [r2, #16]
 800393c:	0852      	lsrs	r2, r2, #1
 800393e:	3a01      	subs	r2, #1
 8003940:	0552      	lsls	r2, r2, #21
 8003942:	430a      	orrs	r2, r1
 8003944:	491f      	ldr	r1, [pc, #124]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	610b      	str	r3, [r1, #16]
 800394a:	e011      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6952      	ldr	r2, [r2, #20]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	430a      	orrs	r2, r1
 800396a:	4916      	ldr	r1, [pc, #88]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800397a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe f930 	bl	8001be0 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003984:	f7fe f92c 	bl	8001be0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
          break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4904      	ldr	r1, [pc, #16]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039e2:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10d      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
       ||
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039fa:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d047      	beq.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e044      	b.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d018      	beq.n	8003a4e <RCCEx_PLLSAI2_Config+0x86>
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d825      	bhi.n	8003a6c <RCCEx_PLLSAI2_Config+0xa4>
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d002      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x62>
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d009      	beq.n	8003a3c <RCCEx_PLLSAI2_Config+0x74>
 8003a28:	e020      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2a:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11d      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3a:	e01a      	b.n	8003a72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e013      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a4e:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5a:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6a:	e006      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e004      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	430b      	orrs	r3, r1
 8003a98:	4939      	ldr	r1, [pc, #228]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d167      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fe f896 	bl	8001be0 <HAL_GetTick>
 8003ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab6:	e009      	b.n	8003acc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab8:	f7fe f892 	bl	8001be0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d902      	bls.n	8003acc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aca:	e005      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003acc:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d14a      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d111      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	0912      	lsrs	r2, r2, #4
 8003afc:	0452      	lsls	r2, r2, #17
 8003afe:	430a      	orrs	r2, r1
 8003b00:	491f      	ldr	r1, [pc, #124]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	614b      	str	r3, [r1, #20]
 8003b06:	e011      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6912      	ldr	r2, [r2, #16]
 8003b1e:	0852      	lsrs	r2, r2, #1
 8003b20:	3a01      	subs	r2, #1
 8003b22:	0652      	lsls	r2, r2, #25
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4916      	ldr	r1, [pc, #88]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe f852 	bl	8001be0 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b3e:	e009      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b40:	f7fe f84e 	bl	8001be0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d902      	bls.n	8003b54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	73fb      	strb	r3, [r7, #15]
          break;
 8003b52:	e005      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e095      	b.n	8003cc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba6:	d009      	beq.n	8003bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
 8003bae:	e005      	b.n	8003bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f877 	bl	8003cca <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bfc:	d902      	bls.n	8003c04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e002      	b.n	8003c0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c12:	d007      	beq.n	8003c24 <HAL_SPI_Init+0xa0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	ea42 0103 	orr.w	r1, r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 0204 	and.w	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ca0:	ea42 0103 	orr.w	r1, r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x26>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e1fb      	b.n	80040fc <HAL_SPI_TransmitReceive+0x41e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d0c:	f7fd ff68 	bl	8001be0 <HAL_GetTick>
 8003d10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d28:	7efb      	ldrb	r3, [r7, #27]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00e      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x6e>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d34:	d106      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_TransmitReceive+0x66>
 8003d3e:	7efb      	ldrb	r3, [r7, #27]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d003      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d4a:	e1cd      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x80>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x80>
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d64:	e1c0      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d003      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2205      	movs	r2, #5
 8003d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	887a      	ldrh	r2, [r7, #2]
 8003d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dbc:	d802      	bhi.n	8003dc4 <HAL_SPI_TransmitReceive+0xe6>
 8003dbe:	8a3b      	ldrh	r3, [r7, #16]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d908      	bls.n	8003dd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	e007      	b.n	8003de6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003de4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d007      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e0c:	d97c      	bls.n	8003f08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x13e>
 8003e16:	8a7b      	ldrh	r3, [r7, #18]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d169      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e40:	e056      	b.n	8003ef0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x1aa>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x1aa>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d113      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d11c      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x1f2>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	b292      	uxth	r2, r2
 8003eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ed0:	f7fd fe86 	bl	8001be0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d807      	bhi.n	8003ef0 <HAL_SPI_TransmitReceive+0x212>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d003      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003eee:	e0fb      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1a3      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x164>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d19d      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x164>
 8003f06:	e0df      	b.n	80040c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_SPI_TransmitReceive+0x23a>
 8003f10:	8a7b      	ldrh	r3, [r7, #18]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 80cb 	bne.w	80040ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d912      	bls.n	8003f48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f46:	e0b2      	b.n	80040ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6e:	e09e      	b.n	80040ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d134      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x30a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02f      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x30a>
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d12c      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d912      	bls.n	8003fbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	881a      	ldrh	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	1c9a      	adds	r2, r3, #2
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b02      	subs	r3, #2
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fbc:	e012      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d148      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x3aa>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d042      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d923      	bls.n	8004056 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b02      	subs	r3, #2
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d81f      	bhi.n	8004084 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	e016      	b.n	8004084 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f103 020c 	add.w	r2, r3, #12
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	7812      	ldrb	r2, [r2, #0]
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004088:	f7fd fdaa 	bl	8001be0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	429a      	cmp	r2, r3
 8004096:	d803      	bhi.n	80040a0 <HAL_SPI_TransmitReceive+0x3c2>
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x3c8>
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040ac:	e01c      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af5b 	bne.w	8003f70 <HAL_SPI_TransmitReceive+0x292>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f af54 	bne.w	8003f70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f945 	bl	800435c <SPI_EndRxTxTransaction>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60
 80040e4:	e000      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004112:	b2db      	uxtb	r3, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004130:	f7fd fd56 	bl	8001be0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004140:	f7fd fd4e 	bl	8001be0 <HAL_GetTick>
 8004144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004146:	4b39      	ldr	r3, [pc, #228]	; (800422c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004156:	e054      	b.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d050      	beq.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004160:	f7fd fd3e 	bl	8001be0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	429a      	cmp	r2, r3
 800416e:	d902      	bls.n	8004176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d13d      	bne.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418e:	d111      	bne.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	d004      	beq.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d107      	bne.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041bc:	d10f      	bne.n	80041de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e017      	b.n	8004222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3b01      	subs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	429a      	cmp	r2, r3
 800421e:	d19b      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000074 	.word	0x20000074

08004230 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004242:	f7fd fccd 	bl	8001be0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4413      	add	r3, r2
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004252:	f7fd fcc5 	bl	8001be0 <HAL_GetTick>
 8004256:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004260:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00da      	lsls	r2, r3, #3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	0d1b      	lsrs	r3, r3, #20
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004278:	e060      	b.n	800433c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004280:	d107      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004290:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d050      	beq.n	800433c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800429a:	f7fd fca1 	bl	8001be0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d902      	bls.n	80042b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13d      	bne.n	800432c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c8:	d111      	bne.n	80042ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d2:	d004      	beq.n	80042de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d107      	bne.n	80042ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	d10f      	bne.n	8004318 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004316:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e010      	b.n	800434e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3b01      	subs	r3, #1
 800433a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d196      	bne.n	800427a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000074 	.word	0x20000074

0800435c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ff5b 	bl	8004230 <SPI_WaitFifoStateUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e027      	b.n	80043e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fec0 	bl	8004120 <SPI_WaitFlagStateUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e014      	b.n	80043e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff ff34 	bl	8004230 <SPI_WaitFifoStateUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e000      	b.n	80043e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e040      	b.n	800447c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f9f4 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8c0 	bl	80045ac <UART_SetConfig>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e022      	b.n	800447c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fb6c 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fbf3 	bl	8004c60 <UART_CheckIdleState>
 800447a:	4603      	mov	r3, r0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004498:	2b20      	cmp	r3, #32
 800449a:	f040 8082 	bne.w	80045a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit+0x26>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07a      	b.n	80045a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x38>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e073      	b.n	80045a4 <HAL_UART_Transmit+0x120>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2221      	movs	r2, #33	; 0x21
 80044d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d2:	f7fd fb85 	bl	8001be0 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x80>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004514:	e02d      	b.n	8004572 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fbe6 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e039      	b.n	80045a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004542:	b292      	uxth	r2, r2
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3302      	adds	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e008      	b.n	8004560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	b292      	uxth	r2, r2
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3301      	adds	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1cb      	bne.n	8004516 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fbb2 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e005      	b.n	80045a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4ba4      	ldr	r3, [pc, #656]	; (800486c <UART_SetConfig+0x2c0>)
 80045dc:	4013      	ands	r3, r2
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a99      	ldr	r2, [pc, #612]	; (8004870 <UART_SetConfig+0x2c4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	4313      	orrs	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a90      	ldr	r2, [pc, #576]	; (8004874 <UART_SetConfig+0x2c8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d126      	bne.n	8004684 <UART_SetConfig+0xd8>
 8004636:	4b90      	ldr	r3, [pc, #576]	; (8004878 <UART_SetConfig+0x2cc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b03      	cmp	r3, #3
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0xd0>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0xa0>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	0800465d 	.word	0x0800465d
 8004650:	0800466d 	.word	0x0800466d
 8004654:	08004665 	.word	0x08004665
 8004658:	08004675 	.word	0x08004675
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e116      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e112      	b.n	8004892 <UART_SetConfig+0x2e6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e10e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e10a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e106      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a7c      	ldr	r2, [pc, #496]	; (800487c <UART_SetConfig+0x2d0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d138      	bne.n	8004700 <UART_SetConfig+0x154>
 800468e:	4b7a      	ldr	r3, [pc, #488]	; (8004878 <UART_SetConfig+0x2cc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d82d      	bhi.n	80046f8 <UART_SetConfig+0x14c>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0xf8>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046f9 	.word	0x080046f9
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080046e1 	.word	0x080046e1
 80046c8:	080046f9 	.word	0x080046f9
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e0d8      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e0d4      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e0d0      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e0cc      	b.n	8004892 <UART_SetConfig+0x2e6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e0c8      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5e      	ldr	r2, [pc, #376]	; (8004880 <UART_SetConfig+0x2d4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d125      	bne.n	8004756 <UART_SetConfig+0x1aa>
 800470a:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d016      	beq.n	8004746 <UART_SetConfig+0x19a>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d818      	bhi.n	800474e <UART_SetConfig+0x1a2>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d00a      	beq.n	8004736 <UART_SetConfig+0x18a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d814      	bhi.n	800474e <UART_SetConfig+0x1a2>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <UART_SetConfig+0x182>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d008      	beq.n	800473e <UART_SetConfig+0x192>
 800472c:	e00f      	b.n	800474e <UART_SetConfig+0x1a2>
 800472e:	2300      	movs	r3, #0
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004734:	e0ad      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004736:	2302      	movs	r3, #2
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473c:	e0a9      	b.n	8004892 <UART_SetConfig+0x2e6>
 800473e:	2304      	movs	r3, #4
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004744:	e0a5      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004746:	2308      	movs	r3, #8
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474c:	e0a1      	b.n	8004892 <UART_SetConfig+0x2e6>
 800474e:	2310      	movs	r3, #16
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004754:	e09d      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <UART_SetConfig+0x2d8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d125      	bne.n	80047ac <UART_SetConfig+0x200>
 8004760:	4b45      	ldr	r3, [pc, #276]	; (8004878 <UART_SetConfig+0x2cc>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800476a:	2bc0      	cmp	r3, #192	; 0xc0
 800476c:	d016      	beq.n	800479c <UART_SetConfig+0x1f0>
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d818      	bhi.n	80047a4 <UART_SetConfig+0x1f8>
 8004772:	2b80      	cmp	r3, #128	; 0x80
 8004774:	d00a      	beq.n	800478c <UART_SetConfig+0x1e0>
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d814      	bhi.n	80047a4 <UART_SetConfig+0x1f8>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x1d8>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x1e8>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x1f8>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e082      	b.n	8004892 <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e07e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e07a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e076      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e072      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	; (8004888 <UART_SetConfig+0x2dc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d12a      	bne.n	800480c <UART_SetConfig+0x260>
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <UART_SetConfig+0x2cc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d01a      	beq.n	80047fc <UART_SetConfig+0x250>
 80047c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ca:	d81b      	bhi.n	8004804 <UART_SetConfig+0x258>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d00c      	beq.n	80047ec <UART_SetConfig+0x240>
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d6:	d815      	bhi.n	8004804 <UART_SetConfig+0x258>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x238>
 80047dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x248>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x258>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e052      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e04e      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e04a      	b.n	8004892 <UART_SetConfig+0x2e6>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e046      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e042      	b.n	8004892 <UART_SetConfig+0x2e6>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <UART_SetConfig+0x2c4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d13a      	bne.n	800488c <UART_SetConfig+0x2e0>
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <UART_SetConfig+0x2cc>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d01a      	beq.n	800485c <UART_SetConfig+0x2b0>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0x2b8>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00c      	beq.n	800484c <UART_SetConfig+0x2a0>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d815      	bhi.n	8004864 <UART_SetConfig+0x2b8>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x298>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d008      	beq.n	8004854 <UART_SetConfig+0x2a8>
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x2b8>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e022      	b.n	8004892 <UART_SetConfig+0x2e6>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e01e      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e01a      	b.n	8004892 <UART_SetConfig+0x2e6>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e016      	b.n	8004892 <UART_SetConfig+0x2e6>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e012      	b.n	8004892 <UART_SetConfig+0x2e6>
 800486c:	efff69f3 	.word	0xefff69f3
 8004870:	40008000 	.word	0x40008000
 8004874:	40013800 	.word	0x40013800
 8004878:	40021000 	.word	0x40021000
 800487c:	40004400 	.word	0x40004400
 8004880:	40004800 	.word	0x40004800
 8004884:	40004c00 	.word	0x40004c00
 8004888:	40005000 	.word	0x40005000
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a9f      	ldr	r2, [pc, #636]	; (8004b14 <UART_SetConfig+0x568>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d17a      	bne.n	8004992 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800489c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d824      	bhi.n	80048ee <UART_SetConfig+0x342>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x300>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048df 	.word	0x080048df
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048ef 	.word	0x080048ef
 80048c8:	080048ef 	.word	0x080048ef
 80048cc:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe fc00 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80048d4:	61f8      	str	r0, [r7, #28]
        break;
 80048d6:	e010      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b8f      	ldr	r3, [pc, #572]	; (8004b18 <UART_SetConfig+0x56c>)
 80048da:	61fb      	str	r3, [r7, #28]
        break;
 80048dc:	e00d      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe fb61 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80048e2:	61f8      	str	r0, [r7, #28]
        break;
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e005      	b.n	80048fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80fb 	beq.w	8004af8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	429a      	cmp	r2, r3
 8004910:	d305      	bcc.n	800491e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004924:	e0e8      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	461c      	mov	r4, r3
 800492c:	4615      	mov	r5, r2
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	022b      	lsls	r3, r5, #8
 8004938:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800493c:	0222      	lsls	r2, r4, #8
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	6849      	ldr	r1, [r1, #4]
 8004942:	0849      	lsrs	r1, r1, #1
 8004944:	2000      	movs	r0, #0
 8004946:	4688      	mov	r8, r1
 8004948:	4681      	mov	r9, r0
 800494a:	eb12 0a08 	adds.w	sl, r2, r8
 800494e:	eb43 0b09 	adc.w	fp, r3, r9
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004960:	4650      	mov	r0, sl
 8004962:	4659      	mov	r1, fp
 8004964:	f7fb fc8c 	bl	8000280 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004976:	d308      	bcc.n	800498a <UART_SetConfig+0x3de>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497e:	d204      	bcs.n	800498a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	e0b6      	b.n	8004af8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004990:	e0b2      	b.n	8004af8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d15e      	bne.n	8004a5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800499c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d828      	bhi.n	80049f6 <UART_SetConfig+0x44a>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x400>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049f7 	.word	0x080049f7
 80049bc:	080049e7 	.word	0x080049e7
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	080049ef 	.word	0x080049ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d0:	f7fe fb80 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80049d4:	61f8      	str	r0, [r7, #28]
        break;
 80049d6:	e014      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe fb92 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e010      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <UART_SetConfig+0x56c>)
 80049e2:	61fb      	str	r3, [r7, #28]
        break;
 80049e4:	e00d      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fe fadd 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80049ea:	61f8      	str	r0, [r7, #28]
        break;
 80049ec:	e009      	b.n	8004a02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	61fb      	str	r3, [r7, #28]
        break;
 80049f4:	e005      	b.n	8004a02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d077      	beq.n	8004af8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	005a      	lsls	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	441a      	add	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d916      	bls.n	8004a52 <UART_SetConfig+0x4a6>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2a:	d212      	bcs.n	8004a52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f023 030f 	bic.w	r3, r3, #15
 8004a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	8afb      	ldrh	r3, [r7, #22]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	8afa      	ldrh	r2, [r7, #22]
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	e052      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a58:	e04e      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d827      	bhi.n	8004ab2 <UART_SetConfig+0x506>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x4bc>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fb22 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004a90:	61f8      	str	r0, [r7, #28]
        break;
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe fb34 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004a98:	61f8      	str	r0, [r7, #28]
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <UART_SetConfig+0x56c>)
 8004a9e:	61fb      	str	r3, [r7, #28]
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fe fa7f 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61f8      	str	r0, [r7, #28]
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004abc:	bf00      	nop
    }

    if (pclk != 0U)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	085a      	lsrs	r2, r3, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	d909      	bls.n	8004af2 <UART_SetConfig+0x546>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d205      	bcs.n	8004af2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e002      	b.n	8004af8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b12:	bf00      	nop
 8004b14:	40008000 	.word	0x40008000
 8004b18:	00f42400 	.word	0x00f42400

08004b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1a:	d10a      	bne.n	8004c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c70:	f7fc ffb6 	bl	8001be0 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d10e      	bne.n	8004ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f82d 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e023      	b.n	8004cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d10e      	bne.n	8004cce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f817 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00d      	b.n	8004cea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b09c      	sub	sp, #112	; 0x70
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	e0a5      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	f000 80a1 	beq.w	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fc ff67 	bl	8001be0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d13e      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d38:	667b      	str	r3, [r7, #100]	; 0x64
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d76:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e067      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d04f      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d147      	bne.n	8004e50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e1c:	623a      	str	r2, [r7, #32]
 8004e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	69f9      	ldr	r1, [r7, #28]
 8004e22:	6a3a      	ldr	r2, [r7, #32]
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e010      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f43f af4a 	beq.w	8004d04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3770      	adds	r7, #112	; 0x70
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	; 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
 8004e86:	460b      	mov	r3, r1
 8004e88:	71bb      	strb	r3, [r7, #6]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004e92:	79bb      	ldrb	r3, [r7, #6]
 8004e94:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004e96:	797b      	ldrb	r3, [r7, #5]
 8004e98:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 f956 	bl	8006154 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004ea8:	f107 0318 	add.w	r3, r7, #24
 8004eac:	2218      	movs	r2, #24
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f94f 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004eb6:	233f      	movs	r3, #63	; 0x3f
 8004eb8:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8004eba:	238a      	movs	r3, #138	; 0x8a
 8004ebc:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8004ebe:	f107 0314 	add.w	r3, r7, #20
 8004ec2:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8004ece:	2307      	movs	r3, #7
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004ed2:	f107 0318 	add.w	r3, r7, #24
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fe57 	bl	8005b8c <hci_send_req>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da01      	bge.n	8004ee8 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8004ee4:	23ff      	movs	r3, #255	; 0xff
 8004ee6:	e014      	b.n	8004f12 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8004ee8:	7b3b      	ldrb	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8004eee:	7b3b      	ldrb	r3, [r7, #12]
 8004ef0:	e00f      	b.n	8004f12 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004ef2:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004efc:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004f06:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	; 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8004f1a:	b590      	push	{r4, r7, lr}
 8004f1c:	b095      	sub	sp, #84	; 0x54
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	80bb      	strh	r3, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8004f3e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004f42:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004f46:	4413      	add	r3, r2
 8004f48:	330e      	adds	r3, #14
 8004f4a:	2b28      	cmp	r3, #40	; 0x28
 8004f4c:	d901      	bls.n	8004f52 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8004f4e:	2342      	movs	r3, #66	; 0x42
 8004f50:	e0c9      	b.n	80050e6 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8004f52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f56:	3350      	adds	r3, #80	; 0x50
 8004f58:	443b      	add	r3, r7
 8004f5a:	79fa      	ldrb	r2, [r7, #7]
 8004f5c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004f60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f64:	3301      	adds	r3, #1
 8004f66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8004f6a:	88bb      	ldrh	r3, [r7, #4]
 8004f6c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004f6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f72:	f107 0208 	add.w	r2, r7, #8
 8004f76:	4413      	add	r3, r2
 8004f78:	88ba      	ldrh	r2, [r7, #4]
 8004f7a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004f7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f80:	3302      	adds	r3, #2
 8004f82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8004f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f8e:	f107 0208 	add.w	r2, r7, #8
 8004f92:	4413      	add	r3, r2
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004f98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8004fa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fa6:	3350      	adds	r3, #80	; 0x50
 8004fa8:	443b      	add	r3, r7
 8004faa:	79ba      	ldrb	r2, [r7, #6]
 8004fac:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004fb0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8004fba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fbe:	3350      	adds	r3, #80	; 0x50
 8004fc0:	443b      	add	r3, r7
 8004fc2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004fc6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8004fd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fd8:	3350      	adds	r3, #80	; 0x50
 8004fda:	443b      	add	r3, r7
 8004fdc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004fe0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004fee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ff2:	f107 0208 	add.w	r2, r7, #8
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004ffc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 f89a 	bl	8006138 <memcpy>
  indx +=  LocalNameLen;
 8005004:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005008:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800500c:	4413      	add	r3, r2
 800500e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8005012:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005016:	3350      	adds	r3, #80	; 0x50
 8005018:	443b      	add	r3, r7
 800501a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800501e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005022:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005026:	3301      	adds	r3, #1
 8005028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800502c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005030:	f107 0208 	add.w	r2, r7, #8
 8005034:	4413      	add	r3, r2
 8005036:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800503a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f87b 	bl	8006138 <memcpy>
  indx +=  ServiceUUIDLen;  
 8005042:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005046:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800504a:	4413      	add	r3, r2
 800504c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005050:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005054:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800505c:	f107 0208 	add.w	r2, r7, #8
 8005060:	4413      	add	r3, r2
 8005062:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005066:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005068:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800506c:	3302      	adds	r3, #2
 800506e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005072:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005076:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800507a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800507e:	f107 0208 	add.w	r2, r7, #8
 8005082:	4413      	add	r3, r2
 8005084:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005088:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800508a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800508e:	3302      	adds	r3, #2
 8005090:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005098:	2218      	movs	r2, #24
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f859 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80050a2:	233f      	movs	r3, #63	; 0x3f
 80050a4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80050a6:	2383      	movs	r3, #131	; 0x83
 80050a8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80050aa:	f107 0308 	add.w	r3, r7, #8
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80050b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80050b6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80050ba:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80050c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd60 	bl	8005b8c <hci_send_req>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da01      	bge.n	80050d6 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	e007      	b.n	80050e6 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80050d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <aci_gap_set_discoverable+0x1ca>
    return status;
 80050de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050e2:	e000      	b.n	80050e6 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3754      	adds	r7, #84	; 0x54
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}

080050ee <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b088      	sub	sp, #32
 80050f2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050f4:	f107 0308 	add.w	r3, r7, #8
 80050f8:	2218      	movs	r2, #24
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 f829 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005102:	233f      	movs	r3, #63	; 0x3f
 8005104:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005106:	f240 1301 	movw	r3, #257	; 0x101
 800510a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005110:	2301      	movs	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd36 	bl	8005b8c <hci_send_req>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	da01      	bge.n	800512a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8005126:	23ff      	movs	r3, #255	; 0xff
 8005128:	e000      	b.n	800512c <aci_gatt_init+0x3e>

  return status;
 800512a:	79fb      	ldrb	r3, [r7, #7]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b090      	sub	sp, #64	; 0x40
 8005138:	af00      	add	r7, sp, #0
 800513a:	6039      	str	r1, [r7, #0]
 800513c:	4611      	mov	r1, r2
 800513e:	461a      	mov	r2, r3
 8005140:	4603      	mov	r3, r0
 8005142:	71fb      	strb	r3, [r7, #7]
 8005144:	460b      	mov	r3, r1
 8005146:	71bb      	strb	r3, [r7, #6]
 8005148:	4613      	mov	r3, r2
 800514a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8005152:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005156:	3340      	adds	r3, #64	; 0x40
 8005158:	443b      	add	r3, r7
 800515a:	79fa      	ldrb	r2, [r7, #7]
 800515c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005160:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005164:	3301      	adds	r3, #1
 8005166:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d103      	bne.n	8005178 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8005170:	2302      	movs	r3, #2
 8005172:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005176:	e002      	b.n	800517e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8005178:	2310      	movs	r3, #16
 800517a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800517e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005182:	f107 020c 	add.w	r2, r7, #12
 8005186:	4413      	add	r3, r2
 8005188:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ffd2 	bl	8006138 <memcpy>
  indx +=  uuid_len;
 8005194:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800519c:	4413      	add	r3, r2
 800519e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80051a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80051a6:	3340      	adds	r3, #64	; 0x40
 80051a8:	443b      	add	r3, r7
 80051aa:	79ba      	ldrb	r2, [r7, #6]
 80051ac:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80051b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80051b4:	3301      	adds	r3, #1
 80051b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80051ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80051be:	3340      	adds	r3, #64	; 0x40
 80051c0:	443b      	add	r3, r7
 80051c2:	797a      	ldrb	r2, [r7, #5]
 80051c4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80051c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80051cc:	3301      	adds	r3, #1
 80051ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80051d2:	f107 0320 	add.w	r3, r7, #32
 80051d6:	2203      	movs	r2, #3
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 ffba 	bl	8006154 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80051e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e4:	2218      	movs	r2, #24
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 ffb3 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80051ee:	233f      	movs	r3, #63	; 0x3f
 80051f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80051f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80051f6:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80051f8:	f107 030c 	add.w	r3, r7, #12
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80051fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8005204:	f107 0320 	add.w	r3, r7, #32
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800520a:	2303      	movs	r3, #3
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800520e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fcb9 	bl	8005b8c <hci_send_req>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	da01      	bge.n	8005224 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8005220:	23ff      	movs	r3, #255	; 0xff
 8005222:	e00c      	b.n	800523e <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8005224:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <aci_gatt_add_serv+0xfe>
    return resp.status;
 800522c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005230:	e005      	b.n	800523e <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005232:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8005236:	b29a      	uxth	r2, r3
 8005238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523a:	801a      	strh	r2, [r3, #0]

  return 0;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3740      	adds	r7, #64	; 0x40
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b092      	sub	sp, #72	; 0x48
 800524a:	af00      	add	r7, sp, #0
 800524c:	603a      	str	r2, [r7, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	4603      	mov	r3, r0
 8005252:	80fb      	strh	r3, [r7, #6]
 8005254:	460b      	mov	r3, r1
 8005256:	717b      	strb	r3, [r7, #5]
 8005258:	4613      	mov	r3, r2
 800525a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005266:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800526a:	f107 020c 	add.w	r2, r7, #12
 800526e:	4413      	add	r3, r2
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005274:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005278:	3302      	adds	r3, #2
 800527a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800527e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005282:	3348      	adds	r3, #72	; 0x48
 8005284:	443b      	add	r3, r7
 8005286:	797a      	ldrb	r2, [r7, #5]
 8005288:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800528c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005290:	3301      	adds	r3, #1
 8005292:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005296:	797b      	ldrb	r3, [r7, #5]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d103      	bne.n	80052a4 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800529c:	2302      	movs	r3, #2
 800529e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80052a2:	e002      	b.n	80052aa <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80052aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052ae:	f107 020c 	add.w	r2, r7, #12
 80052b2:	4413      	add	r3, r2
 80052b4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 ff3c 	bl	8006138 <memcpy>
  indx +=  uuid_len;
 80052c0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80052c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052c8:	4413      	add	r3, r2
 80052ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80052ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052d2:	3348      	adds	r3, #72	; 0x48
 80052d4:	443b      	add	r3, r7
 80052d6:	793a      	ldrb	r2, [r7, #4]
 80052d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052e0:	3301      	adds	r3, #1
 80052e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80052e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052ea:	3348      	adds	r3, #72	; 0x48
 80052ec:	443b      	add	r3, r7
 80052ee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80052f2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052fa:	3301      	adds	r3, #1
 80052fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8005300:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005304:	3348      	adds	r3, #72	; 0x48
 8005306:	443b      	add	r3, r7
 8005308:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800530c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005310:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005314:	3301      	adds	r3, #1
 8005316:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800531a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800531e:	3348      	adds	r3, #72	; 0x48
 8005320:	443b      	add	r3, r7
 8005322:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8005326:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800532a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800532e:	3301      	adds	r3, #1
 8005330:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8005334:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005338:	3348      	adds	r3, #72	; 0x48
 800533a:	443b      	add	r3, r7
 800533c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8005340:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005344:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005348:	3301      	adds	r3, #1
 800534a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800534e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005352:	3348      	adds	r3, #72	; 0x48
 8005354:	443b      	add	r3, r7
 8005356:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800535a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800535e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005362:	3301      	adds	r3, #1
 8005364:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800536c:	2203      	movs	r2, #3
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f000 feef 	bl	8006154 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800537a:	2218      	movs	r2, #24
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fee8 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005384:	233f      	movs	r3, #63	; 0x3f
 8005386:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005388:	f44f 7382 	mov.w	r3, #260	; 0x104
 800538c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8005394:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800539a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80053a0:	2303      	movs	r3, #3
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80053a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fbee 	bl	8005b8c <hci_send_req>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da01      	bge.n	80053ba <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80053b6:	23ff      	movs	r3, #255	; 0xff
 80053b8:	e00c      	b.n	80053d4 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 80053ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <aci_gatt_add_char+0x182>
    return resp.status;
 80053c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053c6:	e005      	b.n	80053d4 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 80053c8:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d0:	801a      	strh	r2, [r3, #0]

  return 0;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3748      	adds	r7, #72	; 0x48
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b0ca      	sub	sp, #296	; 0x128
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4605      	mov	r5, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80053ee:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80053f2:	462a      	mov	r2, r5
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80053fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80053fe:	4622      	mov	r2, r4
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005406:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800540a:	4602      	mov	r2, r0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005412:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005416:	460a      	mov	r2, r1
 8005418:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005420:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005424:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2bfa      	cmp	r3, #250	; 0xfa
 800542c:	d901      	bls.n	8005432 <aci_gatt_update_char_value+0x56>
    return BLE_STATUS_INVALID_PARAMS;
 800542e:	2342      	movs	r3, #66	; 0x42
 8005430:	e09e      	b.n	8005570 <aci_gatt_update_char_value+0x194>

  servHandle = htobs(servHandle);
 8005432:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005436:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005440:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8005444:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800544a:	f107 0208 	add.w	r2, r7, #8
 800544e:	4413      	add	r3, r2
 8005450:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005454:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800545c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005460:	3302      	adds	r3, #2
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  charHandle = htobs(charHandle);
 8005466:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800546a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005474:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005478:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800547a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800547e:	f107 0208 	add.w	r2, r7, #8
 8005482:	4413      	add	r3, r2
 8005484:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005488:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005494:	3302      	adds	r3, #2
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValOffset;
 800549a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800549e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80054a2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80054a6:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80054aa:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 80054ae:	7809      	ldrb	r1, [r1, #0]
 80054b0:	54d1      	strb	r1, [r2, r3]
  indx++;
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054b6:	3301      	adds	r3, #1
 80054b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValueLen;
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80054c4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80054c8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80054cc:	f5a1 7193 	sub.w	r1, r1, #294	; 0x126
 80054d0:	7809      	ldrb	r1, [r1, #0]
 80054d2:	54d1      	strb	r1, [r2, r3]
  indx++;
 80054d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054d8:	3301      	adds	r3, #1
 80054da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80054de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e2:	f107 0208 	add.w	r2, r7, #8
 80054e6:	18d0      	adds	r0, r2, r3
 80054e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80054ec:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80054f8:	f000 fe1e 	bl	8006138 <memcpy>
  indx +=  charValueLen;
 80054fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005500:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005504:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	4413      	add	r3, r2
 800550c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005510:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005514:	2218      	movs	r2, #24
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fe1b 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800551e:	233f      	movs	r3, #63	; 0x3f
 8005520:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005524:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005528:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8005534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 800553c:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8005540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8005544:	2301      	movs	r3, #1
 8005546:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 800554a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fb1b 	bl	8005b8c <hci_send_req>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	da01      	bge.n	8005560 <aci_gatt_update_char_value+0x184>
    return BLE_STATUS_TIMEOUT;
 800555c:	23ff      	movs	r3, #255	; 0xff
 800555e:	e007      	b.n	8005570 <aci_gatt_update_char_value+0x194>

  if (status) {
 8005560:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <aci_gatt_update_char_value+0x192>
    return status;
 8005568:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800556c:	e000      	b.n	8005570 <aci_gatt_update_char_value+0x194>
  }

  return 0;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}

0800557a <aci_gatt_update_char_value_ext_IDB05A1>:

tBleStatus aci_gatt_update_char_value_ext_IDB05A1(uint16_t service_handle, uint16_t char_handle,
                                                  uint8_t update_type, uint16_t char_length,
                                                  uint16_t value_offset, uint8_t value_length,
                                                  const uint8_t* value)
{
 800557a:	b5b0      	push	{r4, r5, r7, lr}
 800557c:	b0ca      	sub	sp, #296	; 0x128
 800557e:	af00      	add	r7, sp, #0
 8005580:	4605      	mov	r5, r0
 8005582:	460c      	mov	r4, r1
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800558c:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8005590:	462a      	mov	r2, r5
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005598:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800559c:	4622      	mov	r2, r4
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80055a4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80055a8:	4602      	mov	r2, r0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80055b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055b4:	460a      	mov	r2, r1
 80055b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  gatt_upd_char_val_ext_cp cp;
  
  if(value_length > sizeof(cp.value))
 80055b8:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 80055bc:	2bf6      	cmp	r3, #246	; 0xf6
 80055be:	d901      	bls.n	80055c4 <aci_gatt_update_char_value_ext_IDB05A1+0x4a>
    return BLE_STATUS_INVALID_PARAMS;
 80055c0:	2342      	movs	r3, #66	; 0x42
 80055c2:	e06c      	b.n	800569e <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  cp.service_handle = htobs(service_handle);
 80055c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80055c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80055d0:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	801a      	strh	r2, [r3, #0]
  cp.char_handle = htobs(char_handle);
 80055d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80055dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055e0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80055e4:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	805a      	strh	r2, [r3, #2]
  cp.update_type = update_type;
 80055ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80055f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055f4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80055f8:	f2a2 1225 	subw	r2, r2, #293	; 0x125
 80055fc:	7812      	ldrb	r2, [r2, #0]
 80055fe:	711a      	strb	r2, [r3, #4]
  cp.char_length = htobs(char_length);
 8005600:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005604:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005608:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800560c:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8005610:	8812      	ldrh	r2, [r2, #0]
 8005612:	f8a3 2005 	strh.w	r2, [r3, #5]
  cp.value_offset = htobs(value_offset);
 8005616:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800561a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800561e:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8005622:	f8a3 2007 	strh.w	r2, [r3, #7]
  cp.value_length = value_length;
 8005626:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800562a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800562e:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8005632:	725a      	strb	r2, [r3, #9]
  BLUENRG_memcpy(cp.value, value, value_length);
 8005634:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	330a      	adds	r3, #10
 800563e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd78 	bl	8006138 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800564c:	2218      	movs	r2, #24
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fd7f 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005656:	233f      	movs	r3, #63	; 0x3f
 8005658:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = OCF_GATT_UPD_CHAR_VAL_EXT;
 800565c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005660:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = &cp;
 8005664:	f107 030c 	add.w	r3, r7, #12
 8005668:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = GATT_UPD_CHAR_VAL_EXT_CP_SIZE + value_length;
 800566c:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8005670:	330a      	adds	r3, #10
 8005672:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005676:	f207 130f 	addw	r3, r7, #271	; 0x10f
 800567a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800567e:	2301      	movs	r3, #1
 8005680:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005684:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa7e 	bl	8005b8c <hci_send_req>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	da01      	bge.n	800569a <aci_gatt_update_char_value_ext_IDB05A1+0x120>
    return BLE_STATUS_TIMEOUT;
 8005696:	23ff      	movs	r3, #255	; 0xff
 8005698:	e001      	b.n	800569e <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  return status;
 800569a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 800569e:	4618      	mov	r0, r3
 80056a0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bdb0      	pop	{r4, r5, r7, pc}

080056a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b0ca      	sub	sp, #296	; 0x128
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80056b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80056bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80056c0:	4602      	mov	r2, r0
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80056c8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80056cc:	460a      	mov	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80056d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80056da:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2bff      	cmp	r3, #255	; 0xff
 80056e2:	d101      	bne.n	80056e8 <aci_hal_write_config_data+0x40>
    return BLE_STATUS_INVALID_PARAMS;
 80056e4:	2342      	movs	r3, #66	; 0x42
 80056e6:	e065      	b.n	80057b4 <aci_hal_write_config_data+0x10c>

  buffer[indx] = offset;
 80056e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ec:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80056f0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80056f4:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80056f8:	f2a1 1121 	subw	r1, r1, #289	; 0x121
 80056fc:	7809      	ldrb	r1, [r1, #0]
 80056fe:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	3301      	adds	r3, #1
 8005706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005712:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005716:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800571a:	f5a1 7191 	sub.w	r1, r1, #290	; 0x122
 800571e:	7809      	ldrb	r1, [r1, #0]
 8005720:	54d1      	strb	r1, [r2, r3]
  indx++;
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005726:	3301      	adds	r3, #1
 8005728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800572c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005730:	f107 0208 	add.w	r2, r7, #8
 8005734:	18d0      	adds	r0, r2, r3
 8005736:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800573a:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005744:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	f000 fcf5 	bl	8006138 <memcpy>
  indx +=  len;
 800574e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005752:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8005756:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4413      	add	r3, r2
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005762:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005766:	2218      	movs	r2, #24
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fcf2 	bl	8006154 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005770:	233f      	movs	r3, #63	; 0x3f
 8005772:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8005776:	230c      	movs	r3, #12
 8005778:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005788:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 800578c:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8005790:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8005794:	2301      	movs	r3, #1
 8005796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 800579a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f9f3 	bl	8005b8c <hci_send_req>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da01      	bge.n	80057b0 <aci_hal_write_config_data+0x108>
    return BLE_STATUS_TIMEOUT;
 80057ac:	23ff      	movs	r3, #255	; 0xff
 80057ae:	e001      	b.n	80057b4 <aci_hal_write_config_data+0x10c>

  return status;
 80057b0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80057be:	b590      	push	{r4, r7, lr}
 80057c0:	b089      	sub	sp, #36	; 0x24
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80057c8:	f107 0410 	add.w	r4, r7, #16
 80057cc:	f107 0215 	add.w	r2, r7, #21
 80057d0:	f107 0112 	add.w	r1, r7, #18
 80057d4:	f107 0016 	add.w	r0, r7, #22
 80057d8:	f107 030e 	add.w	r3, r7, #14
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	4623      	mov	r3, r4
 80057e0:	f000 f853 	bl	800588a <hci_le_read_local_version>
 80057e4:	4603      	mov	r3, r0
 80057e6:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d126      	bne.n	800583c <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80057ee:	8a7b      	ldrh	r3, [r7, #18]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80057fa:	8a7b      	ldrh	r3, [r7, #18]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	b29a      	uxth	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b21a      	sxth	r2, r3
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	b29b      	uxth	r3, r3
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	b21b      	sxth	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	b21b      	sxth	r3, r3
 8005818:	4313      	orrs	r3, r2
 800581a:	b21b      	sxth	r3, r3
 800581c:	b29a      	uxth	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b21a      	sxth	r2, r3
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	b21b      	sxth	r3, r3
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	b21b      	sxth	r3, r3
 8005832:	4313      	orrs	r3, r2
 8005834:	b21b      	sxth	r3, r3
 8005836:	b29a      	uxth	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
}
 800583e:	4618      	mov	r0, r3
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd90      	pop	{r4, r7, pc}

08005846 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b088      	sub	sp, #32
 800584a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	2218      	movs	r2, #24
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fc7d 	bl	8006154 <memset>
  rq.ogf = OGF_HOST_CTL;
 800585a:	2303      	movs	r3, #3
 800585c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800585e:	2303      	movs	r3, #3
 8005860:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f98b 	bl	8005b8c <hci_send_req>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	da01      	bge.n	8005880 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800587c:	23ff      	movs	r3, #255	; 0xff
 800587e:	e000      	b.n	8005882 <hci_reset+0x3c>
  
  return status;  
 8005880:	79fb      	ldrb	r3, [r7, #7]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b08e      	sub	sp, #56	; 0x38
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005898:	f107 0314 	add.w	r3, r7, #20
 800589c:	2209      	movs	r2, #9
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fc57 	bl	8006154 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058a6:	f107 0320 	add.w	r3, r7, #32
 80058aa:	2218      	movs	r2, #24
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fc50 	bl	8006154 <memset>
  rq.ogf = OGF_INFO_PARAM;
 80058b4:	2304      	movs	r3, #4
 80058b6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80058b8:	2301      	movs	r3, #1
 80058ba:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80058ca:	2309      	movs	r3, #9
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80058ce:	f107 0320 	add.w	r3, r7, #32
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 f959 	bl	8005b8c <hci_send_req>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da01      	bge.n	80058e4 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80058e0:	23ff      	movs	r3, #255	; 0xff
 80058e2:	e018      	b.n	8005916 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 80058e4:	7d3b      	ldrb	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <hci_le_read_local_version+0x64>
    return resp.status;
 80058ea:	7d3b      	ldrb	r3, [r7, #20]
 80058ec:	e013      	b.n	8005916 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80058ee:	7d7a      	ldrb	r2, [r7, #21]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80058f4:	8afa      	ldrh	r2, [r7, #22]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80058fa:	7e3a      	ldrb	r2, [r7, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8005900:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8005904:	b29a      	uxth	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800590a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800590e:	b29a      	uxth	r2, r3
 8005910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005912:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3738      	adds	r7, #56	; 0x38
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3308      	adds	r3, #8
 800592a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d001      	beq.n	8005938 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8005934:	2301      	movs	r3, #1
 8005936:	e00c      	b.n	8005952 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3302      	adds	r3, #2
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005946:	3b03      	subs	r3, #3
 8005948:	429a      	cmp	r2, r3
 800594a:	d001      	beq.n	8005950 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800594c:	2302      	movs	r3, #2
 800594e:	e000      	b.n	8005952 <verify_packet+0x34>
  
  return 0;      
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b0c7      	sub	sp, #284	; 0x11c
 8005964:	af00      	add	r7, sp, #0
 8005966:	4604      	mov	r4, r0
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005970:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800597a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800597e:	4622      	mov	r2, r4
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800598a:	4602      	mov	r2, r0
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005992:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8005996:	460a      	mov	r2, r1
 8005998:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800599a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800599e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059aa:	b21a      	sxth	r2, r3
 80059ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059b0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	029b      	lsls	r3, r3, #10
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b21b      	sxth	r3, r3
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 80059ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80059d6:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 80059de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80059ea:	f107 0318 	add.w	r3, r7, #24
 80059ee:	3301      	adds	r3, #1
 80059f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80059f4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80059f8:	8811      	ldrh	r1, [r2, #0]
 80059fa:	7892      	ldrb	r2, [r2, #2]
 80059fc:	8019      	strh	r1, [r3, #0]
 80059fe:	709a      	strb	r2, [r3, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005a00:	f107 0318 	add.w	r3, r7, #24
 8005a04:	3304      	adds	r3, #4
 8005a06:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a0a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8005a14:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8005a18:	6809      	ldr	r1, [r1, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fb8c 	bl	8006138 <memcpy>
  
  if (hciContext.io.Send)
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <send_cmd+0xf0>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <send_cmd+0xe4>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <send_cmd+0xf0>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a30:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	b292      	uxth	r2, r2
 8005a38:	3204      	adds	r2, #4
 8005a3a:	b291      	uxth	r1, r2
 8005a3c:	f107 0218 	add.w	r2, r7, #24
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
  }
}
 8005a44:	bf00      	nop
 8005a46:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000864 	.word	0x20000864

08005a54 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8005a5e:	e00a      	b.n	8005a76 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4619      	mov	r1, r3
 8005a66:	6838      	ldr	r0, [r7, #0]
 8005a68:	f000 faec 	bl	8006044 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa53 	bl	8005f1c <list_insert_head>
  while (!list_is_empty(src_list))
 8005a76:	6838      	ldr	r0, [r7, #0]
 8005a78:	f000 fa2e 	bl	8005ed8 <list_is_empty>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0ee      	beq.n	8005a60 <move_list+0xc>
  }
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005a92:	e009      	b.n	8005aa8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <free_event_list+0x34>)
 8005a9a:	f000 faac 	bl	8005ff6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4808      	ldr	r0, [pc, #32]	; (8005ac4 <free_event_list+0x38>)
 8005aa4:	f000 fa60 	bl	8005f68 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005aa8:	4806      	ldr	r0, [pc, #24]	; (8005ac4 <free_event_list+0x38>)
 8005aaa:	f000 faf2 	bl	8006092 <list_get_size>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	ddef      	ble.n	8005a94 <free_event_list+0x8>
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000320 	.word	0x20000320
 8005ac4:	20000318 	.word	0x20000318

08005ac8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <hci_init+0x74>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005ade:	4818      	ldr	r0, [pc, #96]	; (8005b40 <hci_init+0x78>)
 8005ae0:	f000 f9ea 	bl	8005eb8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005ae4:	4817      	ldr	r0, [pc, #92]	; (8005b44 <hci_init+0x7c>)
 8005ae6:	f000 f9e7 	bl	8005eb8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8005aea:	f7fa fe91 	bl	8000810 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
 8005af2:	e00d      	b.n	8005b10 <hci_init+0x48>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <hci_init+0x80>)
 8005b00:	4413      	add	r3, r2
 8005b02:	4619      	mov	r1, r3
 8005b04:	480e      	ldr	r0, [pc, #56]	; (8005b40 <hci_init+0x78>)
 8005b06:	f000 fa2f 	bl	8005f68 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d9ee      	bls.n	8005af4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <hci_init+0x74>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <hci_init+0x5e>
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <hci_init+0x74>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2000      	movs	r0, #0
 8005b24:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <hci_init+0x74>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <hci_init+0x6c>
 8005b2e:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <hci_init+0x74>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4798      	blx	r3
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000864 	.word	0x20000864
 8005b40:	20000318 	.word	0x20000318
 8005b44:	20000320 	.word	0x20000320
 8005b48:	20000328 	.word	0x20000328

08005b4c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a0b      	ldr	r2, [pc, #44]	; (8005b88 <hci_register_io_bus+0x3c>)
 8005b5a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <hci_register_io_bus+0x3c>)
 8005b62:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <hci_register_io_bus+0x3c>)
 8005b6a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <hci_register_io_bus+0x3c>)
 8005b72:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a03      	ldr	r2, [pc, #12]	; (8005b88 <hci_register_io_bus+0x3c>)
 8005b7a:	6093      	str	r3, [r2, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	20000864 	.word	0x20000864

08005b8c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08e      	sub	sp, #56	; 0x38
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	885b      	ldrh	r3, [r3, #2]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba2:	b21a      	sxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	4313      	orrs	r3, r2
 8005bae:	b21b      	sxth	r3, r3
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f97c 	bl	8005eb8 <list_init_head>

  free_event_list();
 8005bc0:	f7ff ff64 	bl	8005a8c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8818      	ldrh	r0, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8859      	ldrh	r1, [r3, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f7ff fec3 	bl	8005960 <send_cmd>
  
  if (async)
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <hci_send_req+0x58>
  {
    return 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e0e5      	b.n	8005db0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005be4:	f7fb fffc 	bl	8001be0 <HAL_GetTick>
 8005be8:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005bea:	f7fb fff9 	bl	8001be0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bf8:	f200 80b6 	bhi.w	8005d68 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005bfc:	486e      	ldr	r0, [pc, #440]	; (8005db8 <hci_send_req+0x22c>)
 8005bfe:	f000 f96b 	bl	8005ed8 <list_is_empty>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d000      	beq.n	8005c0a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005c08:	e7ef      	b.n	8005bea <hci_send_req+0x5e>
      {
        break;
 8005c0a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005c0c:	f107 0310 	add.w	r3, r7, #16
 8005c10:	4619      	mov	r1, r3
 8005c12:	4869      	ldr	r0, [pc, #420]	; (8005db8 <hci_send_req+0x22c>)
 8005c14:	f000 f9ef 	bl	8005ff6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d17b      	bne.n	8005d1e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	3301      	adds	r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	3303      	adds	r3, #3
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005c3a:	3b03      	subs	r3, #3
 8005c3c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b3e      	cmp	r3, #62	; 0x3e
 8005c44:	d04d      	beq.n	8005ce2 <hci_send_req+0x156>
 8005c46:	2b3e      	cmp	r3, #62	; 0x3e
 8005c48:	dc6b      	bgt.n	8005d22 <hci_send_req+0x196>
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	f000 808e 	beq.w	8005d6c <hci_send_req+0x1e0>
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	dc66      	bgt.n	8005d22 <hci_send_req+0x196>
 8005c54:	2b0e      	cmp	r3, #14
 8005c56:	d024      	beq.n	8005ca2 <hci_send_req+0x116>
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d162      	bne.n	8005d22 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f040 8081 	bne.w	8005d70 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d004      	beq.n	8005c80 <hci_send_req+0xf4>
          if (cs->status) {
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d053      	beq.n	8005d26 <hci_send_req+0x19a>
            goto failed;
 8005c7e:	e07a      	b.n	8005d76 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	bf28      	it	cs
 8005c8a:	461a      	movcs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6918      	ldr	r0, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c9c:	f000 fa4c 	bl	8006138 <memcpy>
        goto done;
 8005ca0:	e07a      	b.n	8005d98 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d15f      	bne.n	8005d74 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	3303      	adds	r3, #3
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	3b03      	subs	r3, #3
 8005cbe:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf28      	it	cs
 8005cca:	461a      	movcs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6918      	ldr	r0, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cdc:	f000 fa2c 	bl	8006138 <memcpy>
        goto done;
 8005ce0:	e05a      	b.n	8005d98 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d11a      	bne.n	8005d2a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bf28      	it	cs
 8005d04:	461a      	movcs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6918      	ldr	r0, [r3, #16]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	1c59      	adds	r1, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fa0e 	bl	8006138 <memcpy>
        goto done;
 8005d1c:	e03c      	b.n	8005d98 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8005d1e:	bf00      	nop
 8005d20:	e004      	b.n	8005d2c <hci_send_req+0x1a0>
        break;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <hci_send_req+0x1a0>
          break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <hci_send_req+0x1a0>
          break;
 8005d2a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005d2c:	4823      	ldr	r0, [pc, #140]	; (8005dbc <hci_send_req+0x230>)
 8005d2e:	f000 f8d3 	bl	8005ed8 <list_is_empty>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00d      	beq.n	8005d54 <hci_send_req+0x1c8>
 8005d38:	481f      	ldr	r0, [pc, #124]	; (8005db8 <hci_send_req+0x22c>)
 8005d3a:	f000 f8cd 	bl	8005ed8 <list_is_empty>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4619      	mov	r1, r3
 8005d48:	481c      	ldr	r0, [pc, #112]	; (8005dbc <hci_send_req+0x230>)
 8005d4a:	f000 f90d 	bl	8005f68 <list_insert_tail>
      hciReadPacket=NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	e008      	b.n	8005d66 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f903 	bl	8005f68 <list_insert_tail>
      hciReadPacket=NULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
  {
 8005d66:	e73d      	b.n	8005be4 <hci_send_req+0x58>
        goto failed;
 8005d68:	bf00      	nop
 8005d6a:	e004      	b.n	8005d76 <hci_send_req+0x1ea>
        goto failed;
 8005d6c:	bf00      	nop
 8005d6e:	e002      	b.n	8005d76 <hci_send_req+0x1ea>
          goto failed;
 8005d70:	bf00      	nop
 8005d72:	e000      	b.n	8005d76 <hci_send_req+0x1ea>
          goto failed;
 8005d74:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	480e      	ldr	r0, [pc, #56]	; (8005dbc <hci_send_req+0x230>)
 8005d82:	f000 f8cb 	bl	8005f1c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	480a      	ldr	r0, [pc, #40]	; (8005db8 <hci_send_req+0x22c>)
 8005d8e:	f7ff fe61 	bl	8005a54 <move_list>

  return -1;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e00b      	b.n	8005db0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4807      	ldr	r0, [pc, #28]	; (8005dbc <hci_send_req+0x230>)
 8005d9e:	f000 f8bd 	bl	8005f1c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005da2:	f107 0308 	add.w	r3, r7, #8
 8005da6:	4619      	mov	r1, r3
 8005da8:	4803      	ldr	r0, [pc, #12]	; (8005db8 <hci_send_req+0x22c>)
 8005daa:	f7ff fe53 	bl	8005a54 <move_list>

  return 0;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3738      	adds	r7, #56	; 0x38
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000320 	.word	0x20000320
 8005dbc:	20000318 	.word	0x20000318

08005dc0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005dca:	e013      	b.n	8005df4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	480e      	ldr	r0, [pc, #56]	; (8005e0c <hci_user_evt_proc+0x4c>)
 8005dd2:	f000 f910 	bl	8005ff6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <hci_user_evt_proc+0x50>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005dde:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <hci_user_evt_proc+0x50>)
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	3208      	adds	r2, #8
 8005de6:	4610      	mov	r0, r2
 8005de8:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4619      	mov	r1, r3
 8005dee:	4809      	ldr	r0, [pc, #36]	; (8005e14 <hci_user_evt_proc+0x54>)
 8005df0:	f000 f8ba 	bl	8005f68 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005df4:	4805      	ldr	r0, [pc, #20]	; (8005e0c <hci_user_evt_proc+0x4c>)
 8005df6:	f000 f86f 	bl	8005ed8 <list_is_empty>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0e5      	beq.n	8005dcc <hci_user_evt_proc+0xc>
  }
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000320 	.word	0x20000320
 8005e10:	20000864 	.word	0x20000864
 8005e14:	20000318 	.word	0x20000318

08005e18 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005e28:	4820      	ldr	r0, [pc, #128]	; (8005eac <hci_notify_asynch_evt+0x94>)
 8005e2a:	f000 f855 	bl	8005ed8 <list_is_empty>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d133      	bne.n	8005e9c <hci_notify_asynch_evt+0x84>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005e34:	f107 030c 	add.w	r3, r7, #12
 8005e38:	4619      	mov	r1, r3
 8005e3a:	481c      	ldr	r0, [pc, #112]	; (8005eac <hci_notify_asynch_evt+0x94>)
 8005e3c:	f000 f8db 	bl	8005ff6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8005e40:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <hci_notify_asynch_evt+0x98>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d02b      	beq.n	8005ea0 <hci_notify_asynch_evt+0x88>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005e48:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <hci_notify_asynch_evt+0x98>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	3208      	adds	r2, #8
 8005e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <hci_notify_asynch_evt+0x78>
      {                    
        hciReadPacket->data_len = data_len;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	7cfa      	ldrb	r2, [r7, #19]
 8005e66:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (verify_packet(hciReadPacket) == 0)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fd56 	bl	800591e <verify_packet>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <hci_notify_asynch_evt+0x6c>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <hci_notify_asynch_evt+0x9c>)
 8005e7e:	f000 f873 	bl	8005f68 <list_insert_tail>
 8005e82:	e00d      	b.n	8005ea0 <hci_notify_asynch_evt+0x88>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4808      	ldr	r0, [pc, #32]	; (8005eac <hci_notify_asynch_evt+0x94>)
 8005e8a:	f000 f847 	bl	8005f1c <list_insert_head>
 8005e8e:	e007      	b.n	8005ea0 <hci_notify_asynch_evt+0x88>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4805      	ldr	r0, [pc, #20]	; (8005eac <hci_notify_asynch_evt+0x94>)
 8005e96:	f000 f841 	bl	8005f1c <list_insert_head>
 8005e9a:	e001      	b.n	8005ea0 <hci_notify_asynch_evt+0x88>
      }
    }
  }
  else 
  {
    ret = 1;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005ea0:	697b      	ldr	r3, [r7, #20]

}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000318 	.word	0x20000318
 8005eb0:	20000864 	.word	0x20000864
 8005eb4:	20000320 	.word	0x20000320

08005eb8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	605a      	str	r2, [r3, #4]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005eea:	b672      	cpsid	i
}
 8005eec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d102      	bne.n	8005efe <list_is_empty+0x26>
  {
    return_value = 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
 8005efc:	e001      	b.n	8005f02 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f383 8810 	msr	PRIMASK, r3
}
 8005f0c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f26:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f30:	b672      	cpsid	i
}
 8005f32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f383 8810 	msr	PRIMASK, r3
}
 8005f5a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f72:	f3ef 8310 	mrs	r3, PRIMASK
 8005f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f78:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f7c:	b672      	cpsid	i
}
 8005f7e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f383 8810 	msr	PRIMASK, r3
}
 8005fa6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fc6:	b672      	cpsid	i
}
 8005fc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6852      	ldr	r2, [r2, #4]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006000:	f3ef 8310 	mrs	r3, PRIMASK
 8006004:	60fb      	str	r3, [r7, #12]
  return(result);
 8006006:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006008:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800600a:	b672      	cpsid	i
}
 800600c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ffca 	bl	8005fb4 <list_remove_node>
  (*node)->next = NULL;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2200      	movs	r2, #0
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f383 8810 	msr	PRIMASK, r3
}
 800603a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800603c:	bf00      	nop
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604e:	f3ef 8310 	mrs	r3, PRIMASK
 8006052:	60fb      	str	r3, [r7, #12]
  return(result);
 8006054:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006058:	b672      	cpsid	i
}
 800605a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ffa3 	bl	8005fb4 <list_remove_node>
  (*node)->next = NULL;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800608a:	bf00      	nop
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006092:	b480      	push	{r7}
 8006094:	b089      	sub	sp, #36	; 0x24
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  int size = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609e:	f3ef 8310 	mrs	r3, PRIMASK
 80060a2:	613b      	str	r3, [r7, #16]
  return(result);
 80060a4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80060a8:	b672      	cpsid	i
}
 80060aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80060b2:	e005      	b.n	80060c0 <list_get_size+0x2e>
  {
    size++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d1f5      	bne.n	80060b4 <list_get_size+0x22>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f383 8810 	msr	PRIMASK, r3
}
 80060d2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80060d4:	69fb      	ldr	r3, [r7, #28]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3724      	adds	r7, #36	; 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <__errno>:
 80060e4:	4b01      	ldr	r3, [pc, #4]	; (80060ec <__errno+0x8>)
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000080 	.word	0x20000080

080060f0 <__libc_init_array>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4d0d      	ldr	r5, [pc, #52]	; (8006128 <__libc_init_array+0x38>)
 80060f4:	4c0d      	ldr	r4, [pc, #52]	; (800612c <__libc_init_array+0x3c>)
 80060f6:	1b64      	subs	r4, r4, r5
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	2600      	movs	r6, #0
 80060fc:	42a6      	cmp	r6, r4
 80060fe:	d109      	bne.n	8006114 <__libc_init_array+0x24>
 8006100:	4d0b      	ldr	r5, [pc, #44]	; (8006130 <__libc_init_array+0x40>)
 8006102:	4c0c      	ldr	r4, [pc, #48]	; (8006134 <__libc_init_array+0x44>)
 8006104:	f001 f832 	bl	800716c <_init>
 8006108:	1b64      	subs	r4, r4, r5
 800610a:	10a4      	asrs	r4, r4, #2
 800610c:	2600      	movs	r6, #0
 800610e:	42a6      	cmp	r6, r4
 8006110:	d105      	bne.n	800611e <__libc_init_array+0x2e>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f855 3b04 	ldr.w	r3, [r5], #4
 8006118:	4798      	blx	r3
 800611a:	3601      	adds	r6, #1
 800611c:	e7ee      	b.n	80060fc <__libc_init_array+0xc>
 800611e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006122:	4798      	blx	r3
 8006124:	3601      	adds	r6, #1
 8006126:	e7f2      	b.n	800610e <__libc_init_array+0x1e>
 8006128:	08007740 	.word	0x08007740
 800612c:	08007740 	.word	0x08007740
 8006130:	08007740 	.word	0x08007740
 8006134:	08007744 	.word	0x08007744

08006138 <memcpy>:
 8006138:	440a      	add	r2, r1
 800613a:	4291      	cmp	r1, r2
 800613c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006140:	d100      	bne.n	8006144 <memcpy+0xc>
 8006142:	4770      	bx	lr
 8006144:	b510      	push	{r4, lr}
 8006146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800614a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614e:	4291      	cmp	r1, r2
 8006150:	d1f9      	bne.n	8006146 <memcpy+0xe>
 8006152:	bd10      	pop	{r4, pc}

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <iprintf>:
 8006164:	b40f      	push	{r0, r1, r2, r3}
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <iprintf+0x2c>)
 8006168:	b513      	push	{r0, r1, r4, lr}
 800616a:	681c      	ldr	r4, [r3, #0]
 800616c:	b124      	cbz	r4, 8006178 <iprintf+0x14>
 800616e:	69a3      	ldr	r3, [r4, #24]
 8006170:	b913      	cbnz	r3, 8006178 <iprintf+0x14>
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fa5e 	bl	8006634 <__sinit>
 8006178:	ab05      	add	r3, sp, #20
 800617a:	9a04      	ldr	r2, [sp, #16]
 800617c:	68a1      	ldr	r1, [r4, #8]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fc67 	bl	8006a54 <_vfiprintf_r>
 8006186:	b002      	add	sp, #8
 8006188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618c:	b004      	add	sp, #16
 800618e:	4770      	bx	lr
 8006190:	20000080 	.word	0x20000080

08006194 <_puts_r>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	460e      	mov	r6, r1
 8006198:	4605      	mov	r5, r0
 800619a:	b118      	cbz	r0, 80061a4 <_puts_r+0x10>
 800619c:	6983      	ldr	r3, [r0, #24]
 800619e:	b90b      	cbnz	r3, 80061a4 <_puts_r+0x10>
 80061a0:	f000 fa48 	bl	8006634 <__sinit>
 80061a4:	69ab      	ldr	r3, [r5, #24]
 80061a6:	68ac      	ldr	r4, [r5, #8]
 80061a8:	b913      	cbnz	r3, 80061b0 <_puts_r+0x1c>
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fa42 	bl	8006634 <__sinit>
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <_puts_r+0xd0>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d120      	bne.n	80061f8 <_puts_r+0x64>
 80061b6:	686c      	ldr	r4, [r5, #4]
 80061b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ba:	07db      	lsls	r3, r3, #31
 80061bc:	d405      	bmi.n	80061ca <_puts_r+0x36>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	0598      	lsls	r0, r3, #22
 80061c2:	d402      	bmi.n	80061ca <_puts_r+0x36>
 80061c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c6:	f000 fad3 	bl	8006770 <__retarget_lock_acquire_recursive>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0719      	lsls	r1, r3, #28
 80061ce:	d51d      	bpl.n	800620c <_puts_r+0x78>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	b1db      	cbz	r3, 800620c <_puts_r+0x78>
 80061d4:	3e01      	subs	r6, #1
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061dc:	3b01      	subs	r3, #1
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	bb39      	cbnz	r1, 8006232 <_puts_r+0x9e>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da38      	bge.n	8006258 <_puts_r+0xc4>
 80061e6:	4622      	mov	r2, r4
 80061e8:	210a      	movs	r1, #10
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f848 	bl	8006280 <__swbuf_r>
 80061f0:	3001      	adds	r0, #1
 80061f2:	d011      	beq.n	8006218 <_puts_r+0x84>
 80061f4:	250a      	movs	r5, #10
 80061f6:	e011      	b.n	800621c <_puts_r+0x88>
 80061f8:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <_puts_r+0xd4>)
 80061fa:	429c      	cmp	r4, r3
 80061fc:	d101      	bne.n	8006202 <_puts_r+0x6e>
 80061fe:	68ac      	ldr	r4, [r5, #8]
 8006200:	e7da      	b.n	80061b8 <_puts_r+0x24>
 8006202:	4b1a      	ldr	r3, [pc, #104]	; (800626c <_puts_r+0xd8>)
 8006204:	429c      	cmp	r4, r3
 8006206:	bf08      	it	eq
 8006208:	68ec      	ldreq	r4, [r5, #12]
 800620a:	e7d5      	b.n	80061b8 <_puts_r+0x24>
 800620c:	4621      	mov	r1, r4
 800620e:	4628      	mov	r0, r5
 8006210:	f000 f888 	bl	8006324 <__swsetup_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	d0dd      	beq.n	80061d4 <_puts_r+0x40>
 8006218:	f04f 35ff 	mov.w	r5, #4294967295
 800621c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800621e:	07da      	lsls	r2, r3, #31
 8006220:	d405      	bmi.n	800622e <_puts_r+0x9a>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	059b      	lsls	r3, r3, #22
 8006226:	d402      	bmi.n	800622e <_puts_r+0x9a>
 8006228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800622a:	f000 faa2 	bl	8006772 <__retarget_lock_release_recursive>
 800622e:	4628      	mov	r0, r5
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	2b00      	cmp	r3, #0
 8006234:	da04      	bge.n	8006240 <_puts_r+0xac>
 8006236:	69a2      	ldr	r2, [r4, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	dc06      	bgt.n	800624a <_puts_r+0xb6>
 800623c:	290a      	cmp	r1, #10
 800623e:	d004      	beq.n	800624a <_puts_r+0xb6>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	7019      	strb	r1, [r3, #0]
 8006248:	e7c5      	b.n	80061d6 <_puts_r+0x42>
 800624a:	4622      	mov	r2, r4
 800624c:	4628      	mov	r0, r5
 800624e:	f000 f817 	bl	8006280 <__swbuf_r>
 8006252:	3001      	adds	r0, #1
 8006254:	d1bf      	bne.n	80061d6 <_puts_r+0x42>
 8006256:	e7df      	b.n	8006218 <_puts_r+0x84>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	250a      	movs	r5, #10
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	701d      	strb	r5, [r3, #0]
 8006262:	e7db      	b.n	800621c <_puts_r+0x88>
 8006264:	080076c4 	.word	0x080076c4
 8006268:	080076e4 	.word	0x080076e4
 800626c:	080076a4 	.word	0x080076a4

08006270 <puts>:
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <puts+0xc>)
 8006272:	4601      	mov	r1, r0
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f7ff bf8d 	b.w	8006194 <_puts_r>
 800627a:	bf00      	nop
 800627c:	20000080 	.word	0x20000080

08006280 <__swbuf_r>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	460e      	mov	r6, r1
 8006284:	4614      	mov	r4, r2
 8006286:	4605      	mov	r5, r0
 8006288:	b118      	cbz	r0, 8006292 <__swbuf_r+0x12>
 800628a:	6983      	ldr	r3, [r0, #24]
 800628c:	b90b      	cbnz	r3, 8006292 <__swbuf_r+0x12>
 800628e:	f000 f9d1 	bl	8006634 <__sinit>
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <__swbuf_r+0x98>)
 8006294:	429c      	cmp	r4, r3
 8006296:	d12b      	bne.n	80062f0 <__swbuf_r+0x70>
 8006298:	686c      	ldr	r4, [r5, #4]
 800629a:	69a3      	ldr	r3, [r4, #24]
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	071a      	lsls	r2, r3, #28
 80062a2:	d52f      	bpl.n	8006304 <__swbuf_r+0x84>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	b36b      	cbz	r3, 8006304 <__swbuf_r+0x84>
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	1ac0      	subs	r0, r0, r3
 80062ae:	6963      	ldr	r3, [r4, #20]
 80062b0:	b2f6      	uxtb	r6, r6
 80062b2:	4283      	cmp	r3, r0
 80062b4:	4637      	mov	r7, r6
 80062b6:	dc04      	bgt.n	80062c2 <__swbuf_r+0x42>
 80062b8:	4621      	mov	r1, r4
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f926 	bl	800650c <_fflush_r>
 80062c0:	bb30      	cbnz	r0, 8006310 <__swbuf_r+0x90>
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60a3      	str	r3, [r4, #8]
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	701e      	strb	r6, [r3, #0]
 80062d0:	6963      	ldr	r3, [r4, #20]
 80062d2:	3001      	adds	r0, #1
 80062d4:	4283      	cmp	r3, r0
 80062d6:	d004      	beq.n	80062e2 <__swbuf_r+0x62>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	07db      	lsls	r3, r3, #31
 80062dc:	d506      	bpl.n	80062ec <__swbuf_r+0x6c>
 80062de:	2e0a      	cmp	r6, #10
 80062e0:	d104      	bne.n	80062ec <__swbuf_r+0x6c>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 f911 	bl	800650c <_fflush_r>
 80062ea:	b988      	cbnz	r0, 8006310 <__swbuf_r+0x90>
 80062ec:	4638      	mov	r0, r7
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <__swbuf_r+0x9c>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	d101      	bne.n	80062fa <__swbuf_r+0x7a>
 80062f6:	68ac      	ldr	r4, [r5, #8]
 80062f8:	e7cf      	b.n	800629a <__swbuf_r+0x1a>
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <__swbuf_r+0xa0>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	bf08      	it	eq
 8006300:	68ec      	ldreq	r4, [r5, #12]
 8006302:	e7ca      	b.n	800629a <__swbuf_r+0x1a>
 8006304:	4621      	mov	r1, r4
 8006306:	4628      	mov	r0, r5
 8006308:	f000 f80c 	bl	8006324 <__swsetup_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	d0cb      	beq.n	80062a8 <__swbuf_r+0x28>
 8006310:	f04f 37ff 	mov.w	r7, #4294967295
 8006314:	e7ea      	b.n	80062ec <__swbuf_r+0x6c>
 8006316:	bf00      	nop
 8006318:	080076c4 	.word	0x080076c4
 800631c:	080076e4 	.word	0x080076e4
 8006320:	080076a4 	.word	0x080076a4

08006324 <__swsetup_r>:
 8006324:	4b32      	ldr	r3, [pc, #200]	; (80063f0 <__swsetup_r+0xcc>)
 8006326:	b570      	push	{r4, r5, r6, lr}
 8006328:	681d      	ldr	r5, [r3, #0]
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	b125      	cbz	r5, 800633a <__swsetup_r+0x16>
 8006330:	69ab      	ldr	r3, [r5, #24]
 8006332:	b913      	cbnz	r3, 800633a <__swsetup_r+0x16>
 8006334:	4628      	mov	r0, r5
 8006336:	f000 f97d 	bl	8006634 <__sinit>
 800633a:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <__swsetup_r+0xd0>)
 800633c:	429c      	cmp	r4, r3
 800633e:	d10f      	bne.n	8006360 <__swsetup_r+0x3c>
 8006340:	686c      	ldr	r4, [r5, #4]
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006348:	0719      	lsls	r1, r3, #28
 800634a:	d42c      	bmi.n	80063a6 <__swsetup_r+0x82>
 800634c:	06dd      	lsls	r5, r3, #27
 800634e:	d411      	bmi.n	8006374 <__swsetup_r+0x50>
 8006350:	2309      	movs	r3, #9
 8006352:	6033      	str	r3, [r6, #0]
 8006354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	e03e      	b.n	80063de <__swsetup_r+0xba>
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <__swsetup_r+0xd4>)
 8006362:	429c      	cmp	r4, r3
 8006364:	d101      	bne.n	800636a <__swsetup_r+0x46>
 8006366:	68ac      	ldr	r4, [r5, #8]
 8006368:	e7eb      	b.n	8006342 <__swsetup_r+0x1e>
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <__swsetup_r+0xd8>)
 800636c:	429c      	cmp	r4, r3
 800636e:	bf08      	it	eq
 8006370:	68ec      	ldreq	r4, [r5, #12]
 8006372:	e7e6      	b.n	8006342 <__swsetup_r+0x1e>
 8006374:	0758      	lsls	r0, r3, #29
 8006376:	d512      	bpl.n	800639e <__swsetup_r+0x7a>
 8006378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800637a:	b141      	cbz	r1, 800638e <__swsetup_r+0x6a>
 800637c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006380:	4299      	cmp	r1, r3
 8006382:	d002      	beq.n	800638a <__swsetup_r+0x66>
 8006384:	4630      	mov	r0, r6
 8006386:	f000 fa5b 	bl	8006840 <_free_r>
 800638a:	2300      	movs	r3, #0
 800638c:	6363      	str	r3, [r4, #52]	; 0x34
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	2300      	movs	r3, #0
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f043 0308 	orr.w	r3, r3, #8
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	b94b      	cbnz	r3, 80063be <__swsetup_r+0x9a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b4:	d003      	beq.n	80063be <__swsetup_r+0x9a>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 fa01 	bl	80067c0 <__smakebuf_r>
 80063be:	89a0      	ldrh	r0, [r4, #12]
 80063c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063c4:	f010 0301 	ands.w	r3, r0, #1
 80063c8:	d00a      	beq.n	80063e0 <__swsetup_r+0xbc>
 80063ca:	2300      	movs	r3, #0
 80063cc:	60a3      	str	r3, [r4, #8]
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	425b      	negs	r3, r3
 80063d2:	61a3      	str	r3, [r4, #24]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	b943      	cbnz	r3, 80063ea <__swsetup_r+0xc6>
 80063d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063dc:	d1ba      	bne.n	8006354 <__swsetup_r+0x30>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	0781      	lsls	r1, r0, #30
 80063e2:	bf58      	it	pl
 80063e4:	6963      	ldrpl	r3, [r4, #20]
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	e7f4      	b.n	80063d4 <__swsetup_r+0xb0>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e7f7      	b.n	80063de <__swsetup_r+0xba>
 80063ee:	bf00      	nop
 80063f0:	20000080 	.word	0x20000080
 80063f4:	080076c4 	.word	0x080076c4
 80063f8:	080076e4 	.word	0x080076e4
 80063fc:	080076a4 	.word	0x080076a4

08006400 <__sflush_r>:
 8006400:	898a      	ldrh	r2, [r1, #12]
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	0710      	lsls	r0, r2, #28
 800640a:	460c      	mov	r4, r1
 800640c:	d458      	bmi.n	80064c0 <__sflush_r+0xc0>
 800640e:	684b      	ldr	r3, [r1, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc05      	bgt.n	8006420 <__sflush_r+0x20>
 8006414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	dc02      	bgt.n	8006420 <__sflush_r+0x20>
 800641a:	2000      	movs	r0, #0
 800641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006422:	2e00      	cmp	r6, #0
 8006424:	d0f9      	beq.n	800641a <__sflush_r+0x1a>
 8006426:	2300      	movs	r3, #0
 8006428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800642c:	682f      	ldr	r7, [r5, #0]
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	d032      	beq.n	8006498 <__sflush_r+0x98>
 8006432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	075a      	lsls	r2, r3, #29
 8006438:	d505      	bpl.n	8006446 <__sflush_r+0x46>
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	1ac0      	subs	r0, r0, r3
 800643e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006440:	b10b      	cbz	r3, 8006446 <__sflush_r+0x46>
 8006442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006444:	1ac0      	subs	r0, r0, r3
 8006446:	2300      	movs	r3, #0
 8006448:	4602      	mov	r2, r0
 800644a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800644c:	6a21      	ldr	r1, [r4, #32]
 800644e:	4628      	mov	r0, r5
 8006450:	47b0      	blx	r6
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	d106      	bne.n	8006466 <__sflush_r+0x66>
 8006458:	6829      	ldr	r1, [r5, #0]
 800645a:	291d      	cmp	r1, #29
 800645c:	d82c      	bhi.n	80064b8 <__sflush_r+0xb8>
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <__sflush_r+0x108>)
 8006460:	40ca      	lsrs	r2, r1
 8006462:	07d6      	lsls	r6, r2, #31
 8006464:	d528      	bpl.n	80064b8 <__sflush_r+0xb8>
 8006466:	2200      	movs	r2, #0
 8006468:	6062      	str	r2, [r4, #4]
 800646a:	04d9      	lsls	r1, r3, #19
 800646c:	6922      	ldr	r2, [r4, #16]
 800646e:	6022      	str	r2, [r4, #0]
 8006470:	d504      	bpl.n	800647c <__sflush_r+0x7c>
 8006472:	1c42      	adds	r2, r0, #1
 8006474:	d101      	bne.n	800647a <__sflush_r+0x7a>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	b903      	cbnz	r3, 800647c <__sflush_r+0x7c>
 800647a:	6560      	str	r0, [r4, #84]	; 0x54
 800647c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647e:	602f      	str	r7, [r5, #0]
 8006480:	2900      	cmp	r1, #0
 8006482:	d0ca      	beq.n	800641a <__sflush_r+0x1a>
 8006484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006488:	4299      	cmp	r1, r3
 800648a:	d002      	beq.n	8006492 <__sflush_r+0x92>
 800648c:	4628      	mov	r0, r5
 800648e:	f000 f9d7 	bl	8006840 <_free_r>
 8006492:	2000      	movs	r0, #0
 8006494:	6360      	str	r0, [r4, #52]	; 0x34
 8006496:	e7c1      	b.n	800641c <__sflush_r+0x1c>
 8006498:	6a21      	ldr	r1, [r4, #32]
 800649a:	2301      	movs	r3, #1
 800649c:	4628      	mov	r0, r5
 800649e:	47b0      	blx	r6
 80064a0:	1c41      	adds	r1, r0, #1
 80064a2:	d1c7      	bne.n	8006434 <__sflush_r+0x34>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0c4      	beq.n	8006434 <__sflush_r+0x34>
 80064aa:	2b1d      	cmp	r3, #29
 80064ac:	d001      	beq.n	80064b2 <__sflush_r+0xb2>
 80064ae:	2b16      	cmp	r3, #22
 80064b0:	d101      	bne.n	80064b6 <__sflush_r+0xb6>
 80064b2:	602f      	str	r7, [r5, #0]
 80064b4:	e7b1      	b.n	800641a <__sflush_r+0x1a>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	e7ad      	b.n	800641c <__sflush_r+0x1c>
 80064c0:	690f      	ldr	r7, [r1, #16]
 80064c2:	2f00      	cmp	r7, #0
 80064c4:	d0a9      	beq.n	800641a <__sflush_r+0x1a>
 80064c6:	0793      	lsls	r3, r2, #30
 80064c8:	680e      	ldr	r6, [r1, #0]
 80064ca:	bf08      	it	eq
 80064cc:	694b      	ldreq	r3, [r1, #20]
 80064ce:	600f      	str	r7, [r1, #0]
 80064d0:	bf18      	it	ne
 80064d2:	2300      	movne	r3, #0
 80064d4:	eba6 0807 	sub.w	r8, r6, r7
 80064d8:	608b      	str	r3, [r1, #8]
 80064da:	f1b8 0f00 	cmp.w	r8, #0
 80064de:	dd9c      	ble.n	800641a <__sflush_r+0x1a>
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064e4:	4643      	mov	r3, r8
 80064e6:	463a      	mov	r2, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b0      	blx	r6
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dc06      	bgt.n	80064fe <__sflush_r+0xfe>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e78e      	b.n	800641c <__sflush_r+0x1c>
 80064fe:	4407      	add	r7, r0
 8006500:	eba8 0800 	sub.w	r8, r8, r0
 8006504:	e7e9      	b.n	80064da <__sflush_r+0xda>
 8006506:	bf00      	nop
 8006508:	20400001 	.word	0x20400001

0800650c <_fflush_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	690b      	ldr	r3, [r1, #16]
 8006510:	4605      	mov	r5, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b913      	cbnz	r3, 800651c <_fflush_r+0x10>
 8006516:	2500      	movs	r5, #0
 8006518:	4628      	mov	r0, r5
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	b118      	cbz	r0, 8006526 <_fflush_r+0x1a>
 800651e:	6983      	ldr	r3, [r0, #24]
 8006520:	b90b      	cbnz	r3, 8006526 <_fflush_r+0x1a>
 8006522:	f000 f887 	bl	8006634 <__sinit>
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <_fflush_r+0x6c>)
 8006528:	429c      	cmp	r4, r3
 800652a:	d11b      	bne.n	8006564 <_fflush_r+0x58>
 800652c:	686c      	ldr	r4, [r5, #4]
 800652e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0ef      	beq.n	8006516 <_fflush_r+0xa>
 8006536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006538:	07d0      	lsls	r0, r2, #31
 800653a:	d404      	bmi.n	8006546 <_fflush_r+0x3a>
 800653c:	0599      	lsls	r1, r3, #22
 800653e:	d402      	bmi.n	8006546 <_fflush_r+0x3a>
 8006540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006542:	f000 f915 	bl	8006770 <__retarget_lock_acquire_recursive>
 8006546:	4628      	mov	r0, r5
 8006548:	4621      	mov	r1, r4
 800654a:	f7ff ff59 	bl	8006400 <__sflush_r>
 800654e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006550:	07da      	lsls	r2, r3, #31
 8006552:	4605      	mov	r5, r0
 8006554:	d4e0      	bmi.n	8006518 <_fflush_r+0xc>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	059b      	lsls	r3, r3, #22
 800655a:	d4dd      	bmi.n	8006518 <_fflush_r+0xc>
 800655c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800655e:	f000 f908 	bl	8006772 <__retarget_lock_release_recursive>
 8006562:	e7d9      	b.n	8006518 <_fflush_r+0xc>
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <_fflush_r+0x70>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d101      	bne.n	800656e <_fflush_r+0x62>
 800656a:	68ac      	ldr	r4, [r5, #8]
 800656c:	e7df      	b.n	800652e <_fflush_r+0x22>
 800656e:	4b04      	ldr	r3, [pc, #16]	; (8006580 <_fflush_r+0x74>)
 8006570:	429c      	cmp	r4, r3
 8006572:	bf08      	it	eq
 8006574:	68ec      	ldreq	r4, [r5, #12]
 8006576:	e7da      	b.n	800652e <_fflush_r+0x22>
 8006578:	080076c4 	.word	0x080076c4
 800657c:	080076e4 	.word	0x080076e4
 8006580:	080076a4 	.word	0x080076a4

08006584 <std>:
 8006584:	2300      	movs	r3, #0
 8006586:	b510      	push	{r4, lr}
 8006588:	4604      	mov	r4, r0
 800658a:	e9c0 3300 	strd	r3, r3, [r0]
 800658e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006592:	6083      	str	r3, [r0, #8]
 8006594:	8181      	strh	r1, [r0, #12]
 8006596:	6643      	str	r3, [r0, #100]	; 0x64
 8006598:	81c2      	strh	r2, [r0, #14]
 800659a:	6183      	str	r3, [r0, #24]
 800659c:	4619      	mov	r1, r3
 800659e:	2208      	movs	r2, #8
 80065a0:	305c      	adds	r0, #92	; 0x5c
 80065a2:	f7ff fdd7 	bl	8006154 <memset>
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <std+0x38>)
 80065a8:	6263      	str	r3, [r4, #36]	; 0x24
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <std+0x3c>)
 80065ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <std+0x40>)
 80065b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <std+0x44>)
 80065b4:	6224      	str	r4, [r4, #32]
 80065b6:	6323      	str	r3, [r4, #48]	; 0x30
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	bf00      	nop
 80065bc:	08006ffd 	.word	0x08006ffd
 80065c0:	0800701f 	.word	0x0800701f
 80065c4:	08007057 	.word	0x08007057
 80065c8:	0800707b 	.word	0x0800707b

080065cc <_cleanup_r>:
 80065cc:	4901      	ldr	r1, [pc, #4]	; (80065d4 <_cleanup_r+0x8>)
 80065ce:	f000 b8af 	b.w	8006730 <_fwalk_reent>
 80065d2:	bf00      	nop
 80065d4:	0800650d 	.word	0x0800650d

080065d8 <__sfmoreglue>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	2268      	movs	r2, #104	; 0x68
 80065dc:	1e4d      	subs	r5, r1, #1
 80065de:	4355      	muls	r5, r2
 80065e0:	460e      	mov	r6, r1
 80065e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065e6:	f000 f997 	bl	8006918 <_malloc_r>
 80065ea:	4604      	mov	r4, r0
 80065ec:	b140      	cbz	r0, 8006600 <__sfmoreglue+0x28>
 80065ee:	2100      	movs	r1, #0
 80065f0:	e9c0 1600 	strd	r1, r6, [r0]
 80065f4:	300c      	adds	r0, #12
 80065f6:	60a0      	str	r0, [r4, #8]
 80065f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065fc:	f7ff fdaa 	bl	8006154 <memset>
 8006600:	4620      	mov	r0, r4
 8006602:	bd70      	pop	{r4, r5, r6, pc}

08006604 <__sfp_lock_acquire>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__sfp_lock_acquire+0x8>)
 8006606:	f000 b8b3 	b.w	8006770 <__retarget_lock_acquire_recursive>
 800660a:	bf00      	nop
 800660c:	20000885 	.word	0x20000885

08006610 <__sfp_lock_release>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__sfp_lock_release+0x8>)
 8006612:	f000 b8ae 	b.w	8006772 <__retarget_lock_release_recursive>
 8006616:	bf00      	nop
 8006618:	20000885 	.word	0x20000885

0800661c <__sinit_lock_acquire>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__sinit_lock_acquire+0x8>)
 800661e:	f000 b8a7 	b.w	8006770 <__retarget_lock_acquire_recursive>
 8006622:	bf00      	nop
 8006624:	20000886 	.word	0x20000886

08006628 <__sinit_lock_release>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__sinit_lock_release+0x8>)
 800662a:	f000 b8a2 	b.w	8006772 <__retarget_lock_release_recursive>
 800662e:	bf00      	nop
 8006630:	20000886 	.word	0x20000886

08006634 <__sinit>:
 8006634:	b510      	push	{r4, lr}
 8006636:	4604      	mov	r4, r0
 8006638:	f7ff fff0 	bl	800661c <__sinit_lock_acquire>
 800663c:	69a3      	ldr	r3, [r4, #24]
 800663e:	b11b      	cbz	r3, 8006648 <__sinit+0x14>
 8006640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006644:	f7ff bff0 	b.w	8006628 <__sinit_lock_release>
 8006648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800664c:	6523      	str	r3, [r4, #80]	; 0x50
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <__sinit+0x68>)
 8006650:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <__sinit+0x6c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	62a2      	str	r2, [r4, #40]	; 0x28
 8006656:	42a3      	cmp	r3, r4
 8006658:	bf04      	itt	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	61a3      	streq	r3, [r4, #24]
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f820 	bl	80066a4 <__sfp>
 8006664:	6060      	str	r0, [r4, #4]
 8006666:	4620      	mov	r0, r4
 8006668:	f000 f81c 	bl	80066a4 <__sfp>
 800666c:	60a0      	str	r0, [r4, #8]
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f818 	bl	80066a4 <__sfp>
 8006674:	2200      	movs	r2, #0
 8006676:	60e0      	str	r0, [r4, #12]
 8006678:	2104      	movs	r1, #4
 800667a:	6860      	ldr	r0, [r4, #4]
 800667c:	f7ff ff82 	bl	8006584 <std>
 8006680:	68a0      	ldr	r0, [r4, #8]
 8006682:	2201      	movs	r2, #1
 8006684:	2109      	movs	r1, #9
 8006686:	f7ff ff7d 	bl	8006584 <std>
 800668a:	68e0      	ldr	r0, [r4, #12]
 800668c:	2202      	movs	r2, #2
 800668e:	2112      	movs	r1, #18
 8006690:	f7ff ff78 	bl	8006584 <std>
 8006694:	2301      	movs	r3, #1
 8006696:	61a3      	str	r3, [r4, #24]
 8006698:	e7d2      	b.n	8006640 <__sinit+0xc>
 800669a:	bf00      	nop
 800669c:	080076a0 	.word	0x080076a0
 80066a0:	080065cd 	.word	0x080065cd

080066a4 <__sfp>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	4607      	mov	r7, r0
 80066a8:	f7ff ffac 	bl	8006604 <__sfp_lock_acquire>
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <__sfp+0x84>)
 80066ae:	681e      	ldr	r6, [r3, #0]
 80066b0:	69b3      	ldr	r3, [r6, #24]
 80066b2:	b913      	cbnz	r3, 80066ba <__sfp+0x16>
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff ffbd 	bl	8006634 <__sinit>
 80066ba:	3648      	adds	r6, #72	; 0x48
 80066bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	d503      	bpl.n	80066cc <__sfp+0x28>
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	b30b      	cbz	r3, 800670c <__sfp+0x68>
 80066c8:	6836      	ldr	r6, [r6, #0]
 80066ca:	e7f7      	b.n	80066bc <__sfp+0x18>
 80066cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066d0:	b9d5      	cbnz	r5, 8006708 <__sfp+0x64>
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <__sfp+0x88>)
 80066d4:	60e3      	str	r3, [r4, #12]
 80066d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066da:	6665      	str	r5, [r4, #100]	; 0x64
 80066dc:	f000 f847 	bl	800676e <__retarget_lock_init_recursive>
 80066e0:	f7ff ff96 	bl	8006610 <__sfp_lock_release>
 80066e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066ec:	6025      	str	r5, [r4, #0]
 80066ee:	61a5      	str	r5, [r4, #24]
 80066f0:	2208      	movs	r2, #8
 80066f2:	4629      	mov	r1, r5
 80066f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066f8:	f7ff fd2c 	bl	8006154 <memset>
 80066fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006704:	4620      	mov	r0, r4
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006708:	3468      	adds	r4, #104	; 0x68
 800670a:	e7d9      	b.n	80066c0 <__sfp+0x1c>
 800670c:	2104      	movs	r1, #4
 800670e:	4638      	mov	r0, r7
 8006710:	f7ff ff62 	bl	80065d8 <__sfmoreglue>
 8006714:	4604      	mov	r4, r0
 8006716:	6030      	str	r0, [r6, #0]
 8006718:	2800      	cmp	r0, #0
 800671a:	d1d5      	bne.n	80066c8 <__sfp+0x24>
 800671c:	f7ff ff78 	bl	8006610 <__sfp_lock_release>
 8006720:	230c      	movs	r3, #12
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	e7ee      	b.n	8006704 <__sfp+0x60>
 8006726:	bf00      	nop
 8006728:	080076a0 	.word	0x080076a0
 800672c:	ffff0001 	.word	0xffff0001

08006730 <_fwalk_reent>:
 8006730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006734:	4606      	mov	r6, r0
 8006736:	4688      	mov	r8, r1
 8006738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800673c:	2700      	movs	r7, #0
 800673e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006742:	f1b9 0901 	subs.w	r9, r9, #1
 8006746:	d505      	bpl.n	8006754 <_fwalk_reent+0x24>
 8006748:	6824      	ldr	r4, [r4, #0]
 800674a:	2c00      	cmp	r4, #0
 800674c:	d1f7      	bne.n	800673e <_fwalk_reent+0xe>
 800674e:	4638      	mov	r0, r7
 8006750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006754:	89ab      	ldrh	r3, [r5, #12]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d907      	bls.n	800676a <_fwalk_reent+0x3a>
 800675a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800675e:	3301      	adds	r3, #1
 8006760:	d003      	beq.n	800676a <_fwalk_reent+0x3a>
 8006762:	4629      	mov	r1, r5
 8006764:	4630      	mov	r0, r6
 8006766:	47c0      	blx	r8
 8006768:	4307      	orrs	r7, r0
 800676a:	3568      	adds	r5, #104	; 0x68
 800676c:	e7e9      	b.n	8006742 <_fwalk_reent+0x12>

0800676e <__retarget_lock_init_recursive>:
 800676e:	4770      	bx	lr

08006770 <__retarget_lock_acquire_recursive>:
 8006770:	4770      	bx	lr

08006772 <__retarget_lock_release_recursive>:
 8006772:	4770      	bx	lr

08006774 <__swhatbuf_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	460e      	mov	r6, r1
 8006778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677c:	2900      	cmp	r1, #0
 800677e:	b096      	sub	sp, #88	; 0x58
 8006780:	4614      	mov	r4, r2
 8006782:	461d      	mov	r5, r3
 8006784:	da08      	bge.n	8006798 <__swhatbuf_r+0x24>
 8006786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	602a      	str	r2, [r5, #0]
 800678e:	061a      	lsls	r2, r3, #24
 8006790:	d410      	bmi.n	80067b4 <__swhatbuf_r+0x40>
 8006792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006796:	e00e      	b.n	80067b6 <__swhatbuf_r+0x42>
 8006798:	466a      	mov	r2, sp
 800679a:	f000 fc95 	bl	80070c8 <_fstat_r>
 800679e:	2800      	cmp	r0, #0
 80067a0:	dbf1      	blt.n	8006786 <__swhatbuf_r+0x12>
 80067a2:	9a01      	ldr	r2, [sp, #4]
 80067a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067ac:	425a      	negs	r2, r3
 80067ae:	415a      	adcs	r2, r3
 80067b0:	602a      	str	r2, [r5, #0]
 80067b2:	e7ee      	b.n	8006792 <__swhatbuf_r+0x1e>
 80067b4:	2340      	movs	r3, #64	; 0x40
 80067b6:	2000      	movs	r0, #0
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	b016      	add	sp, #88	; 0x58
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080067c0 <__smakebuf_r>:
 80067c0:	898b      	ldrh	r3, [r1, #12]
 80067c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067c4:	079d      	lsls	r5, r3, #30
 80067c6:	4606      	mov	r6, r0
 80067c8:	460c      	mov	r4, r1
 80067ca:	d507      	bpl.n	80067dc <__smakebuf_r+0x1c>
 80067cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	2301      	movs	r3, #1
 80067d6:	6163      	str	r3, [r4, #20]
 80067d8:	b002      	add	sp, #8
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	ab01      	add	r3, sp, #4
 80067de:	466a      	mov	r2, sp
 80067e0:	f7ff ffc8 	bl	8006774 <__swhatbuf_r>
 80067e4:	9900      	ldr	r1, [sp, #0]
 80067e6:	4605      	mov	r5, r0
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f895 	bl	8006918 <_malloc_r>
 80067ee:	b948      	cbnz	r0, 8006804 <__smakebuf_r+0x44>
 80067f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f4:	059a      	lsls	r2, r3, #22
 80067f6:	d4ef      	bmi.n	80067d8 <__smakebuf_r+0x18>
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	f043 0302 	orr.w	r3, r3, #2
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	e7e3      	b.n	80067cc <__smakebuf_r+0xc>
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <__smakebuf_r+0x7c>)
 8006806:	62b3      	str	r3, [r6, #40]	; 0x28
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	6020      	str	r0, [r4, #0]
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	9b00      	ldr	r3, [sp, #0]
 8006814:	6163      	str	r3, [r4, #20]
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	6120      	str	r0, [r4, #16]
 800681a:	b15b      	cbz	r3, 8006834 <__smakebuf_r+0x74>
 800681c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006820:	4630      	mov	r0, r6
 8006822:	f000 fc63 	bl	80070ec <_isatty_r>
 8006826:	b128      	cbz	r0, 8006834 <__smakebuf_r+0x74>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	89a0      	ldrh	r0, [r4, #12]
 8006836:	4305      	orrs	r5, r0
 8006838:	81a5      	strh	r5, [r4, #12]
 800683a:	e7cd      	b.n	80067d8 <__smakebuf_r+0x18>
 800683c:	080065cd 	.word	0x080065cd

08006840 <_free_r>:
 8006840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006842:	2900      	cmp	r1, #0
 8006844:	d044      	beq.n	80068d0 <_free_r+0x90>
 8006846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684a:	9001      	str	r0, [sp, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f1a1 0404 	sub.w	r4, r1, #4
 8006852:	bfb8      	it	lt
 8006854:	18e4      	addlt	r4, r4, r3
 8006856:	f000 fc6b 	bl	8007130 <__malloc_lock>
 800685a:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <_free_r+0x94>)
 800685c:	9801      	ldr	r0, [sp, #4]
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	b933      	cbnz	r3, 8006870 <_free_r+0x30>
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	6014      	str	r4, [r2, #0]
 8006866:	b003      	add	sp, #12
 8006868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800686c:	f000 bc66 	b.w	800713c <__malloc_unlock>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d908      	bls.n	8006886 <_free_r+0x46>
 8006874:	6825      	ldr	r5, [r4, #0]
 8006876:	1961      	adds	r1, r4, r5
 8006878:	428b      	cmp	r3, r1
 800687a:	bf01      	itttt	eq
 800687c:	6819      	ldreq	r1, [r3, #0]
 800687e:	685b      	ldreq	r3, [r3, #4]
 8006880:	1949      	addeq	r1, r1, r5
 8006882:	6021      	streq	r1, [r4, #0]
 8006884:	e7ed      	b.n	8006862 <_free_r+0x22>
 8006886:	461a      	mov	r2, r3
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b10b      	cbz	r3, 8006890 <_free_r+0x50>
 800688c:	42a3      	cmp	r3, r4
 800688e:	d9fa      	bls.n	8006886 <_free_r+0x46>
 8006890:	6811      	ldr	r1, [r2, #0]
 8006892:	1855      	adds	r5, r2, r1
 8006894:	42a5      	cmp	r5, r4
 8006896:	d10b      	bne.n	80068b0 <_free_r+0x70>
 8006898:	6824      	ldr	r4, [r4, #0]
 800689a:	4421      	add	r1, r4
 800689c:	1854      	adds	r4, r2, r1
 800689e:	42a3      	cmp	r3, r4
 80068a0:	6011      	str	r1, [r2, #0]
 80068a2:	d1e0      	bne.n	8006866 <_free_r+0x26>
 80068a4:	681c      	ldr	r4, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	6053      	str	r3, [r2, #4]
 80068aa:	4421      	add	r1, r4
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	e7da      	b.n	8006866 <_free_r+0x26>
 80068b0:	d902      	bls.n	80068b8 <_free_r+0x78>
 80068b2:	230c      	movs	r3, #12
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	e7d6      	b.n	8006866 <_free_r+0x26>
 80068b8:	6825      	ldr	r5, [r4, #0]
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf04      	itt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	bf04      	itt	eq
 80068c8:	1949      	addeq	r1, r1, r5
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	6054      	str	r4, [r2, #4]
 80068ce:	e7ca      	b.n	8006866 <_free_r+0x26>
 80068d0:	b003      	add	sp, #12
 80068d2:	bd30      	pop	{r4, r5, pc}
 80068d4:	20000888 	.word	0x20000888

080068d8 <sbrk_aligned>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4e0e      	ldr	r6, [pc, #56]	; (8006914 <sbrk_aligned+0x3c>)
 80068dc:	460c      	mov	r4, r1
 80068de:	6831      	ldr	r1, [r6, #0]
 80068e0:	4605      	mov	r5, r0
 80068e2:	b911      	cbnz	r1, 80068ea <sbrk_aligned+0x12>
 80068e4:	f000 fb7a 	bl	8006fdc <_sbrk_r>
 80068e8:	6030      	str	r0, [r6, #0]
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 fb75 	bl	8006fdc <_sbrk_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d00a      	beq.n	800690c <sbrk_aligned+0x34>
 80068f6:	1cc4      	adds	r4, r0, #3
 80068f8:	f024 0403 	bic.w	r4, r4, #3
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d007      	beq.n	8006910 <sbrk_aligned+0x38>
 8006900:	1a21      	subs	r1, r4, r0
 8006902:	4628      	mov	r0, r5
 8006904:	f000 fb6a 	bl	8006fdc <_sbrk_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d101      	bne.n	8006910 <sbrk_aligned+0x38>
 800690c:	f04f 34ff 	mov.w	r4, #4294967295
 8006910:	4620      	mov	r0, r4
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	2000088c 	.word	0x2000088c

08006918 <_malloc_r>:
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	1ccd      	adds	r5, r1, #3
 800691e:	f025 0503 	bic.w	r5, r5, #3
 8006922:	3508      	adds	r5, #8
 8006924:	2d0c      	cmp	r5, #12
 8006926:	bf38      	it	cc
 8006928:	250c      	movcc	r5, #12
 800692a:	2d00      	cmp	r5, #0
 800692c:	4607      	mov	r7, r0
 800692e:	db01      	blt.n	8006934 <_malloc_r+0x1c>
 8006930:	42a9      	cmp	r1, r5
 8006932:	d905      	bls.n	8006940 <_malloc_r+0x28>
 8006934:	230c      	movs	r3, #12
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	2600      	movs	r6, #0
 800693a:	4630      	mov	r0, r6
 800693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006940:	4e2e      	ldr	r6, [pc, #184]	; (80069fc <_malloc_r+0xe4>)
 8006942:	f000 fbf5 	bl	8007130 <__malloc_lock>
 8006946:	6833      	ldr	r3, [r6, #0]
 8006948:	461c      	mov	r4, r3
 800694a:	bb34      	cbnz	r4, 800699a <_malloc_r+0x82>
 800694c:	4629      	mov	r1, r5
 800694e:	4638      	mov	r0, r7
 8006950:	f7ff ffc2 	bl	80068d8 <sbrk_aligned>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	4604      	mov	r4, r0
 8006958:	d14d      	bne.n	80069f6 <_malloc_r+0xde>
 800695a:	6834      	ldr	r4, [r6, #0]
 800695c:	4626      	mov	r6, r4
 800695e:	2e00      	cmp	r6, #0
 8006960:	d140      	bne.n	80069e4 <_malloc_r+0xcc>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4631      	mov	r1, r6
 8006966:	4638      	mov	r0, r7
 8006968:	eb04 0803 	add.w	r8, r4, r3
 800696c:	f000 fb36 	bl	8006fdc <_sbrk_r>
 8006970:	4580      	cmp	r8, r0
 8006972:	d13a      	bne.n	80069ea <_malloc_r+0xd2>
 8006974:	6821      	ldr	r1, [r4, #0]
 8006976:	3503      	adds	r5, #3
 8006978:	1a6d      	subs	r5, r5, r1
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	4629      	mov	r1, r5
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff ffa5 	bl	80068d8 <sbrk_aligned>
 800698e:	3001      	adds	r0, #1
 8006990:	d02b      	beq.n	80069ea <_malloc_r+0xd2>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	442b      	add	r3, r5
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	e00e      	b.n	80069b8 <_malloc_r+0xa0>
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	1b52      	subs	r2, r2, r5
 800699e:	d41e      	bmi.n	80069de <_malloc_r+0xc6>
 80069a0:	2a0b      	cmp	r2, #11
 80069a2:	d916      	bls.n	80069d2 <_malloc_r+0xba>
 80069a4:	1961      	adds	r1, r4, r5
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	6025      	str	r5, [r4, #0]
 80069aa:	bf18      	it	ne
 80069ac:	6059      	strne	r1, [r3, #4]
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	bf08      	it	eq
 80069b2:	6031      	streq	r1, [r6, #0]
 80069b4:	5162      	str	r2, [r4, r5]
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	4638      	mov	r0, r7
 80069ba:	f104 060b 	add.w	r6, r4, #11
 80069be:	f000 fbbd 	bl	800713c <__malloc_unlock>
 80069c2:	f026 0607 	bic.w	r6, r6, #7
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	1af2      	subs	r2, r6, r3
 80069ca:	d0b6      	beq.n	800693a <_malloc_r+0x22>
 80069cc:	1b9b      	subs	r3, r3, r6
 80069ce:	50a3      	str	r3, [r4, r2]
 80069d0:	e7b3      	b.n	800693a <_malloc_r+0x22>
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	bf0c      	ite	eq
 80069d8:	6032      	streq	r2, [r6, #0]
 80069da:	605a      	strne	r2, [r3, #4]
 80069dc:	e7ec      	b.n	80069b8 <_malloc_r+0xa0>
 80069de:	4623      	mov	r3, r4
 80069e0:	6864      	ldr	r4, [r4, #4]
 80069e2:	e7b2      	b.n	800694a <_malloc_r+0x32>
 80069e4:	4634      	mov	r4, r6
 80069e6:	6876      	ldr	r6, [r6, #4]
 80069e8:	e7b9      	b.n	800695e <_malloc_r+0x46>
 80069ea:	230c      	movs	r3, #12
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	4638      	mov	r0, r7
 80069f0:	f000 fba4 	bl	800713c <__malloc_unlock>
 80069f4:	e7a1      	b.n	800693a <_malloc_r+0x22>
 80069f6:	6025      	str	r5, [r4, #0]
 80069f8:	e7de      	b.n	80069b8 <_malloc_r+0xa0>
 80069fa:	bf00      	nop
 80069fc:	20000888 	.word	0x20000888

08006a00 <__sfputc_r>:
 8006a00:	6893      	ldr	r3, [r2, #8]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	b410      	push	{r4}
 8006a08:	6093      	str	r3, [r2, #8]
 8006a0a:	da08      	bge.n	8006a1e <__sfputc_r+0x1e>
 8006a0c:	6994      	ldr	r4, [r2, #24]
 8006a0e:	42a3      	cmp	r3, r4
 8006a10:	db01      	blt.n	8006a16 <__sfputc_r+0x16>
 8006a12:	290a      	cmp	r1, #10
 8006a14:	d103      	bne.n	8006a1e <__sfputc_r+0x1e>
 8006a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a1a:	f7ff bc31 	b.w	8006280 <__swbuf_r>
 8006a1e:	6813      	ldr	r3, [r2, #0]
 8006a20:	1c58      	adds	r0, r3, #1
 8006a22:	6010      	str	r0, [r2, #0]
 8006a24:	7019      	strb	r1, [r3, #0]
 8006a26:	4608      	mov	r0, r1
 8006a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <__sfputs_r>:
 8006a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a30:	4606      	mov	r6, r0
 8006a32:	460f      	mov	r7, r1
 8006a34:	4614      	mov	r4, r2
 8006a36:	18d5      	adds	r5, r2, r3
 8006a38:	42ac      	cmp	r4, r5
 8006a3a:	d101      	bne.n	8006a40 <__sfputs_r+0x12>
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e007      	b.n	8006a50 <__sfputs_r+0x22>
 8006a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a44:	463a      	mov	r2, r7
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffda 	bl	8006a00 <__sfputc_r>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d1f3      	bne.n	8006a38 <__sfputs_r+0xa>
 8006a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a54 <_vfiprintf_r>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	460d      	mov	r5, r1
 8006a5a:	b09d      	sub	sp, #116	; 0x74
 8006a5c:	4614      	mov	r4, r2
 8006a5e:	4698      	mov	r8, r3
 8006a60:	4606      	mov	r6, r0
 8006a62:	b118      	cbz	r0, 8006a6c <_vfiprintf_r+0x18>
 8006a64:	6983      	ldr	r3, [r0, #24]
 8006a66:	b90b      	cbnz	r3, 8006a6c <_vfiprintf_r+0x18>
 8006a68:	f7ff fde4 	bl	8006634 <__sinit>
 8006a6c:	4b89      	ldr	r3, [pc, #548]	; (8006c94 <_vfiprintf_r+0x240>)
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	d11b      	bne.n	8006aaa <_vfiprintf_r+0x56>
 8006a72:	6875      	ldr	r5, [r6, #4]
 8006a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a76:	07d9      	lsls	r1, r3, #31
 8006a78:	d405      	bmi.n	8006a86 <_vfiprintf_r+0x32>
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	059a      	lsls	r2, r3, #22
 8006a7e:	d402      	bmi.n	8006a86 <_vfiprintf_r+0x32>
 8006a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a82:	f7ff fe75 	bl	8006770 <__retarget_lock_acquire_recursive>
 8006a86:	89ab      	ldrh	r3, [r5, #12]
 8006a88:	071b      	lsls	r3, r3, #28
 8006a8a:	d501      	bpl.n	8006a90 <_vfiprintf_r+0x3c>
 8006a8c:	692b      	ldr	r3, [r5, #16]
 8006a8e:	b9eb      	cbnz	r3, 8006acc <_vfiprintf_r+0x78>
 8006a90:	4629      	mov	r1, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff fc46 	bl	8006324 <__swsetup_r>
 8006a98:	b1c0      	cbz	r0, 8006acc <_vfiprintf_r+0x78>
 8006a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a9c:	07dc      	lsls	r4, r3, #31
 8006a9e:	d50e      	bpl.n	8006abe <_vfiprintf_r+0x6a>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	b01d      	add	sp, #116	; 0x74
 8006aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	; (8006c98 <_vfiprintf_r+0x244>)
 8006aac:	429d      	cmp	r5, r3
 8006aae:	d101      	bne.n	8006ab4 <_vfiprintf_r+0x60>
 8006ab0:	68b5      	ldr	r5, [r6, #8]
 8006ab2:	e7df      	b.n	8006a74 <_vfiprintf_r+0x20>
 8006ab4:	4b79      	ldr	r3, [pc, #484]	; (8006c9c <_vfiprintf_r+0x248>)
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	bf08      	it	eq
 8006aba:	68f5      	ldreq	r5, [r6, #12]
 8006abc:	e7da      	b.n	8006a74 <_vfiprintf_r+0x20>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	0598      	lsls	r0, r3, #22
 8006ac2:	d4ed      	bmi.n	8006aa0 <_vfiprintf_r+0x4c>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ac6:	f7ff fe54 	bl	8006772 <__retarget_lock_release_recursive>
 8006aca:	e7e9      	b.n	8006aa0 <_vfiprintf_r+0x4c>
 8006acc:	2300      	movs	r3, #0
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ada:	2330      	movs	r3, #48	; 0x30
 8006adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ca0 <_vfiprintf_r+0x24c>
 8006ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ae4:	f04f 0901 	mov.w	r9, #1
 8006ae8:	4623      	mov	r3, r4
 8006aea:	469a      	mov	sl, r3
 8006aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af0:	b10a      	cbz	r2, 8006af6 <_vfiprintf_r+0xa2>
 8006af2:	2a25      	cmp	r2, #37	; 0x25
 8006af4:	d1f9      	bne.n	8006aea <_vfiprintf_r+0x96>
 8006af6:	ebba 0b04 	subs.w	fp, sl, r4
 8006afa:	d00b      	beq.n	8006b14 <_vfiprintf_r+0xc0>
 8006afc:	465b      	mov	r3, fp
 8006afe:	4622      	mov	r2, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f7ff ff93 	bl	8006a2e <__sfputs_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f000 80aa 	beq.w	8006c62 <_vfiprintf_r+0x20e>
 8006b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b10:	445a      	add	r2, fp
 8006b12:	9209      	str	r2, [sp, #36]	; 0x24
 8006b14:	f89a 3000 	ldrb.w	r3, [sl]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80a2 	beq.w	8006c62 <_vfiprintf_r+0x20e>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b28:	f10a 0a01 	add.w	sl, sl, #1
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b34:	931a      	str	r3, [sp, #104]	; 0x68
 8006b36:	4654      	mov	r4, sl
 8006b38:	2205      	movs	r2, #5
 8006b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3e:	4858      	ldr	r0, [pc, #352]	; (8006ca0 <_vfiprintf_r+0x24c>)
 8006b40:	f7f9 fb4e 	bl	80001e0 <memchr>
 8006b44:	9a04      	ldr	r2, [sp, #16]
 8006b46:	b9d8      	cbnz	r0, 8006b80 <_vfiprintf_r+0x12c>
 8006b48:	06d1      	lsls	r1, r2, #27
 8006b4a:	bf44      	itt	mi
 8006b4c:	2320      	movmi	r3, #32
 8006b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b52:	0713      	lsls	r3, r2, #28
 8006b54:	bf44      	itt	mi
 8006b56:	232b      	movmi	r3, #43	; 0x2b
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b60:	2b2a      	cmp	r3, #42	; 0x2a
 8006b62:	d015      	beq.n	8006b90 <_vfiprintf_r+0x13c>
 8006b64:	9a07      	ldr	r2, [sp, #28]
 8006b66:	4654      	mov	r4, sl
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f04f 0c0a 	mov.w	ip, #10
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b74:	3b30      	subs	r3, #48	; 0x30
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d94e      	bls.n	8006c18 <_vfiprintf_r+0x1c4>
 8006b7a:	b1b0      	cbz	r0, 8006baa <_vfiprintf_r+0x156>
 8006b7c:	9207      	str	r2, [sp, #28]
 8006b7e:	e014      	b.n	8006baa <_vfiprintf_r+0x156>
 8006b80:	eba0 0308 	sub.w	r3, r0, r8
 8006b84:	fa09 f303 	lsl.w	r3, r9, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	46a2      	mov	sl, r4
 8006b8e:	e7d2      	b.n	8006b36 <_vfiprintf_r+0xe2>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	1d19      	adds	r1, r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	9103      	str	r1, [sp, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bfbb      	ittet	lt
 8006b9c:	425b      	neglt	r3, r3
 8006b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba2:	9307      	strge	r3, [sp, #28]
 8006ba4:	9307      	strlt	r3, [sp, #28]
 8006ba6:	bfb8      	it	lt
 8006ba8:	9204      	strlt	r2, [sp, #16]
 8006baa:	7823      	ldrb	r3, [r4, #0]
 8006bac:	2b2e      	cmp	r3, #46	; 0x2e
 8006bae:	d10c      	bne.n	8006bca <_vfiprintf_r+0x176>
 8006bb0:	7863      	ldrb	r3, [r4, #1]
 8006bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb4:	d135      	bne.n	8006c22 <_vfiprintf_r+0x1ce>
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	1d1a      	adds	r2, r3, #4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	9203      	str	r2, [sp, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfb8      	it	lt
 8006bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bc6:	3402      	adds	r4, #2
 8006bc8:	9305      	str	r3, [sp, #20]
 8006bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cb0 <_vfiprintf_r+0x25c>
 8006bce:	7821      	ldrb	r1, [r4, #0]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7f9 fb04 	bl	80001e0 <memchr>
 8006bd8:	b140      	cbz	r0, 8006bec <_vfiprintf_r+0x198>
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	eba0 000a 	sub.w	r0, r0, sl
 8006be0:	fa03 f000 	lsl.w	r0, r3, r0
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	4303      	orrs	r3, r0
 8006be8:	3401      	adds	r4, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf0:	482c      	ldr	r0, [pc, #176]	; (8006ca4 <_vfiprintf_r+0x250>)
 8006bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf6:	2206      	movs	r2, #6
 8006bf8:	f7f9 faf2 	bl	80001e0 <memchr>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d03f      	beq.n	8006c80 <_vfiprintf_r+0x22c>
 8006c00:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <_vfiprintf_r+0x254>)
 8006c02:	bb1b      	cbnz	r3, 8006c4c <_vfiprintf_r+0x1f8>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	3307      	adds	r3, #7
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c12:	443b      	add	r3, r7
 8006c14:	9309      	str	r3, [sp, #36]	; 0x24
 8006c16:	e767      	b.n	8006ae8 <_vfiprintf_r+0x94>
 8006c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	2001      	movs	r0, #1
 8006c20:	e7a5      	b.n	8006b6e <_vfiprintf_r+0x11a>
 8006c22:	2300      	movs	r3, #0
 8006c24:	3401      	adds	r4, #1
 8006c26:	9305      	str	r3, [sp, #20]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f04f 0c0a 	mov.w	ip, #10
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c34:	3a30      	subs	r2, #48	; 0x30
 8006c36:	2a09      	cmp	r2, #9
 8006c38:	d903      	bls.n	8006c42 <_vfiprintf_r+0x1ee>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0c5      	beq.n	8006bca <_vfiprintf_r+0x176>
 8006c3e:	9105      	str	r1, [sp, #20]
 8006c40:	e7c3      	b.n	8006bca <_vfiprintf_r+0x176>
 8006c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c46:	4604      	mov	r4, r0
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e7f0      	b.n	8006c2e <_vfiprintf_r+0x1da>
 8006c4c:	ab03      	add	r3, sp, #12
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	462a      	mov	r2, r5
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <_vfiprintf_r+0x258>)
 8006c54:	a904      	add	r1, sp, #16
 8006c56:	4630      	mov	r0, r6
 8006c58:	f3af 8000 	nop.w
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	1c78      	adds	r0, r7, #1
 8006c60:	d1d6      	bne.n	8006c10 <_vfiprintf_r+0x1bc>
 8006c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c64:	07d9      	lsls	r1, r3, #31
 8006c66:	d405      	bmi.n	8006c74 <_vfiprintf_r+0x220>
 8006c68:	89ab      	ldrh	r3, [r5, #12]
 8006c6a:	059a      	lsls	r2, r3, #22
 8006c6c:	d402      	bmi.n	8006c74 <_vfiprintf_r+0x220>
 8006c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c70:	f7ff fd7f 	bl	8006772 <__retarget_lock_release_recursive>
 8006c74:	89ab      	ldrh	r3, [r5, #12]
 8006c76:	065b      	lsls	r3, r3, #25
 8006c78:	f53f af12 	bmi.w	8006aa0 <_vfiprintf_r+0x4c>
 8006c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c7e:	e711      	b.n	8006aa4 <_vfiprintf_r+0x50>
 8006c80:	ab03      	add	r3, sp, #12
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	462a      	mov	r2, r5
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <_vfiprintf_r+0x258>)
 8006c88:	a904      	add	r1, sp, #16
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f000 f880 	bl	8006d90 <_printf_i>
 8006c90:	e7e4      	b.n	8006c5c <_vfiprintf_r+0x208>
 8006c92:	bf00      	nop
 8006c94:	080076c4 	.word	0x080076c4
 8006c98:	080076e4 	.word	0x080076e4
 8006c9c:	080076a4 	.word	0x080076a4
 8006ca0:	08007704 	.word	0x08007704
 8006ca4:	0800770e 	.word	0x0800770e
 8006ca8:	00000000 	.word	0x00000000
 8006cac:	08006a2f 	.word	0x08006a2f
 8006cb0:	0800770a 	.word	0x0800770a

08006cb4 <_printf_common>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	4616      	mov	r6, r2
 8006cba:	4699      	mov	r9, r3
 8006cbc:	688a      	ldr	r2, [r1, #8]
 8006cbe:	690b      	ldr	r3, [r1, #16]
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfb8      	it	lt
 8006cc8:	4613      	movlt	r3, r2
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b10a      	cbz	r2, 8006cda <_printf_common+0x26>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	0699      	lsls	r1, r3, #26
 8006cde:	bf42      	ittt	mi
 8006ce0:	6833      	ldrmi	r3, [r6, #0]
 8006ce2:	3302      	addmi	r3, #2
 8006ce4:	6033      	strmi	r3, [r6, #0]
 8006ce6:	6825      	ldr	r5, [r4, #0]
 8006ce8:	f015 0506 	ands.w	r5, r5, #6
 8006cec:	d106      	bne.n	8006cfc <_printf_common+0x48>
 8006cee:	f104 0a19 	add.w	sl, r4, #25
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc26      	bgt.n	8006d4a <_printf_common+0x96>
 8006cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d00:	1e13      	subs	r3, r2, #0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	0692      	lsls	r2, r2, #26
 8006d0a:	d42b      	bmi.n	8006d64 <_printf_common+0xb0>
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d01e      	beq.n	8006d58 <_printf_common+0xa4>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	68e5      	ldr	r5, [r4, #12]
 8006d1e:	6832      	ldr	r2, [r6, #0]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	2600      	movs	r6, #0
 8006d40:	341a      	adds	r4, #26
 8006d42:	42b5      	cmp	r5, r6
 8006d44:	d11a      	bne.n	8006d7c <_printf_common+0xc8>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e008      	b.n	8006d5c <_printf_common+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4638      	mov	r0, r7
 8006d52:	47c0      	blx	r8
 8006d54:	3001      	adds	r0, #1
 8006d56:	d103      	bne.n	8006d60 <_printf_common+0xac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7c6      	b.n	8006cf2 <_printf_common+0x3e>
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	2030      	movs	r0, #48	; 0x30
 8006d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d6e:	4422      	add	r2, r4
 8006d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d78:	3302      	adds	r3, #2
 8006d7a:	e7c7      	b.n	8006d0c <_printf_common+0x58>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0e6      	beq.n	8006d58 <_printf_common+0xa4>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7d9      	b.n	8006d42 <_printf_common+0x8e>
	...

08006d90 <_printf_i>:
 8006d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	7e0f      	ldrb	r7, [r1, #24]
 8006d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d98:	2f78      	cmp	r7, #120	; 0x78
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	469a      	mov	sl, r3
 8006da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006da6:	d807      	bhi.n	8006db8 <_printf_i+0x28>
 8006da8:	2f62      	cmp	r7, #98	; 0x62
 8006daa:	d80a      	bhi.n	8006dc2 <_printf_i+0x32>
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f000 80d8 	beq.w	8006f62 <_printf_i+0x1d2>
 8006db2:	2f58      	cmp	r7, #88	; 0x58
 8006db4:	f000 80a3 	beq.w	8006efe <_printf_i+0x16e>
 8006db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc0:	e03a      	b.n	8006e38 <_printf_i+0xa8>
 8006dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dc6:	2b15      	cmp	r3, #21
 8006dc8:	d8f6      	bhi.n	8006db8 <_printf_i+0x28>
 8006dca:	a101      	add	r1, pc, #4	; (adr r1, 8006dd0 <_printf_i+0x40>)
 8006dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006db9 	.word	0x08006db9
 8006ddc:	08006db9 	.word	0x08006db9
 8006de0:	08006db9 	.word	0x08006db9
 8006de4:	08006db9 	.word	0x08006db9
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	08006db9 	.word	0x08006db9
 8006df4:	08006db9 	.word	0x08006db9
 8006df8:	08006db9 	.word	0x08006db9
 8006dfc:	08006f49 	.word	0x08006f49
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f2b 	.word	0x08006f2b
 8006e08:	08006db9 	.word	0x08006db9
 8006e0c:	08006db9 	.word	0x08006db9
 8006e10:	08006f6b 	.word	0x08006f6b
 8006e14:	08006db9 	.word	0x08006db9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006db9 	.word	0x08006db9
 8006e20:	08006db9 	.word	0x08006db9
 8006e24:	08006f33 	.word	0x08006f33
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0a3      	b.n	8006f84 <_printf_i+0x1f4>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	6829      	ldr	r1, [r5, #0]
 8006e40:	0606      	lsls	r6, r0, #24
 8006e42:	f101 0304 	add.w	r3, r1, #4
 8006e46:	d50a      	bpl.n	8006e5e <_printf_i+0xce>
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xc8>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	4276      	negs	r6, r6
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	485e      	ldr	r0, [pc, #376]	; (8006fd4 <_printf_i+0x244>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e019      	b.n	8006e92 <_printf_i+0x102>
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e66:	bf18      	it	ne
 8006e68:	b236      	sxthne	r6, r6
 8006e6a:	e7ef      	b.n	8006e4c <_printf_i+0xbc>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	6029      	str	r1, [r5, #0]
 8006e74:	0601      	lsls	r1, r0, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xec>
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xf2>
 8006e7c:	0646      	lsls	r6, r0, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe8>
 8006e80:	881e      	ldrh	r6, [r3, #0]
 8006e82:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x244>)
 8006e84:	2f6f      	cmp	r7, #111	; 0x6f
 8006e86:	bf0c      	ite	eq
 8006e88:	2308      	moveq	r3, #8
 8006e8a:	230a      	movne	r3, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6865      	ldr	r5, [r4, #4]
 8006e94:	60a5      	str	r5, [r4, #8]
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90e      	cbnz	r6, 8006ea8 <_printf_i+0x118>
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d04d      	beq.n	8006f44 <_printf_i+0x1b4>
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eae:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eb8:	4637      	mov	r7, r6
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x11a>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x14c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07de      	lsls	r6, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x14c>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006edc:	1b52      	subs	r2, r2, r5
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee2 	bl	8006cb4 <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14c      	bne.n	8006f8e <_printf_i+0x1fe>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <_printf_i+0x244>)
 8006f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	6029      	str	r1, [r5, #0]
 8006f0e:	061d      	lsls	r5, r3, #24
 8006f10:	d514      	bpl.n	8006f3c <_printf_i+0x1ac>
 8006f12:	07df      	lsls	r7, r3, #31
 8006f14:	bf44      	itt	mi
 8006f16:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1a:	6023      	strmi	r3, [r4, #0]
 8006f1c:	b91e      	cbnz	r6, 8006f26 <_printf_i+0x196>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f023 0320 	bic.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2310      	movs	r3, #16
 8006f28:	e7b0      	b.n	8006e8c <_printf_i+0xfc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	2378      	movs	r3, #120	; 0x78
 8006f34:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <_printf_i+0x248>)
 8006f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3a:	e7e3      	b.n	8006f04 <_printf_i+0x174>
 8006f3c:	0659      	lsls	r1, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2b6      	uxthmi	r6, r6
 8006f42:	e7e6      	b.n	8006f12 <_printf_i+0x182>
 8006f44:	4615      	mov	r5, r2
 8006f46:	e7bb      	b.n	8006ec0 <_printf_i+0x130>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	6826      	ldr	r6, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6028      	str	r0, [r5, #0]
 8006f52:	0635      	lsls	r5, r6, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1cc>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1d2>
 8006f5c:	0670      	lsls	r0, r6, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1c8>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4615      	mov	r5, r2
 8006f68:	e7ba      	b.n	8006ee0 <_printf_i+0x150>
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 f932 	bl	80001e0 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1f2>
 8006f7e:	1b40      	subs	r0, r0, r5
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	e7a8      	b.n	8006ee0 <_printf_i+0x150>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	462a      	mov	r2, r5
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ab      	beq.n	8006ef4 <_printf_i+0x164>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x23a>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a4      	b.n	8006ef8 <_printf_i+0x168>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09b      	beq.n	8006ef4 <_printf_i+0x164>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x21e>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x212>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x22e>
 8006fd2:	bf00      	nop
 8006fd4:	08007715 	.word	0x08007715
 8006fd8:	08007726 	.word	0x08007726

08006fdc <_sbrk_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_sbrk_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa fb8e 	bl	8001708 <_sbrk>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_sbrk_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_sbrk_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000890 	.word	0x20000890

08006ffc <__sread>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007004:	f000 f8a0 	bl	8007148 <_read_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	bfab      	itete	ge
 800700c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800700e:	89a3      	ldrhlt	r3, [r4, #12]
 8007010:	181b      	addge	r3, r3, r0
 8007012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007016:	bfac      	ite	ge
 8007018:	6563      	strge	r3, [r4, #84]	; 0x54
 800701a:	81a3      	strhlt	r3, [r4, #12]
 800701c:	bd10      	pop	{r4, pc}

0800701e <__swrite>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	461f      	mov	r7, r3
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4616      	mov	r6, r2
 800702e:	d505      	bpl.n	800703c <__swrite+0x1e>
 8007030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007034:	2302      	movs	r3, #2
 8007036:	2200      	movs	r2, #0
 8007038:	f000 f868 	bl	800710c <_lseek_r>
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	4628      	mov	r0, r5
 800704e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007052:	f000 b817 	b.w	8007084 <_write_r>

08007056 <__sseek>:
 8007056:	b510      	push	{r4, lr}
 8007058:	460c      	mov	r4, r1
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 f855 	bl	800710c <_lseek_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	bf15      	itete	ne
 8007068:	6560      	strne	r0, [r4, #84]	; 0x54
 800706a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800706e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007072:	81a3      	strheq	r3, [r4, #12]
 8007074:	bf18      	it	ne
 8007076:	81a3      	strhne	r3, [r4, #12]
 8007078:	bd10      	pop	{r4, pc}

0800707a <__sclose>:
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 b813 	b.w	80070a8 <_close_r>
	...

08007084 <_write_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	; (80070a4 <_write_r+0x20>)
 8007088:	4604      	mov	r4, r0
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	2200      	movs	r2, #0
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fa fae7 	bl	8001666 <_write>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_write_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_write_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000890 	.word	0x20000890

080070a8 <_close_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	; (80070c4 <_close_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fa faf3 	bl	800169e <_close>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_close_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_close_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000890 	.word	0x20000890

080070c8 <_fstat_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_fstat_r+0x20>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	f7fa faee 	bl	80016b6 <_fstat>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d102      	bne.n	80070e4 <_fstat_r+0x1c>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b103      	cbz	r3, 80070e4 <_fstat_r+0x1c>
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	20000890 	.word	0x20000890

080070ec <_isatty_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d06      	ldr	r5, [pc, #24]	; (8007108 <_isatty_r+0x1c>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7fa faed 	bl	80016d6 <_isatty>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_isatty_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_isatty_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20000890 	.word	0x20000890

0800710c <_lseek_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_lseek_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fa fae6 	bl	80016ec <_lseek>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_lseek_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_lseek_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000890 	.word	0x20000890

08007130 <__malloc_lock>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__malloc_lock+0x8>)
 8007132:	f7ff bb1d 	b.w	8006770 <__retarget_lock_acquire_recursive>
 8007136:	bf00      	nop
 8007138:	20000884 	.word	0x20000884

0800713c <__malloc_unlock>:
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <__malloc_unlock+0x8>)
 800713e:	f7ff bb18 	b.w	8006772 <__retarget_lock_release_recursive>
 8007142:	bf00      	nop
 8007144:	20000884 	.word	0x20000884

08007148 <_read_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_read_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fa fa68 	bl	800162c <_read>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_read_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_read_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	20000890 	.word	0x20000890

0800716c <_init>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr

08007178 <_fini>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr
