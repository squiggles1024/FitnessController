
FitnessController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f40  08009f40  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f48  08009f48  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  200000d8  0800a028  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800a028  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020549  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da5  00000000  00000000  00040651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  000453f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00046d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f925  00000000  00000000  000484b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023fa4  00000000  00000000  00077dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bc34  00000000  00000000  0009bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a79ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e90  00000000  00000000  001a7a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098e8 	.word	0x080098e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	080098e8 	.word	0x080098e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HCI_TL_SPI_Init+0x88>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <HCI_TL_SPI_Init+0x8c>)
 80005ba:	f004 f86f 	bl	800469c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f004 f85f 	bl	800469c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <HCI_TL_SPI_Init+0x90>)
 80005f8:	f004 f850 	bl	800469c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80005fc:	f001 ff0e 	bl	800241c <BSP_SPI3_Init>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000
 8000614:	48000c00 	.word	0x48000c00

08000618 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HCI_TL_SPI_DeInit+0x28>)
 8000620:	f004 f9e6 	bl	80049f0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HCI_TL_SPI_DeInit+0x2c>)
 800062a:	f004 f9e1 	bl	80049f0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f004 f9db 	bl	80049f0 <HAL_GPIO_DeInit>
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48001000 	.word	0x48001000
 8000644:	48000c00 	.word	0x48000c00

08000648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <HCI_TL_SPI_Reset+0x40>)
 8000654:	f004 fad8 	bl	8004c08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f004 fad1 	bl	8004c08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000666:	2005      	movs	r0, #5
 8000668:	f002 f83e 	bl	80026e8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f004 fac7 	bl	8004c08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f002 f834 	bl	80026e8 <HAL_Delay>
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000c00 	.word	0x48000c00

0800068c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800069c:	23ff      	movs	r3, #255	; 0xff
 800069e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <HCI_TL_SPI_Receive+0xb0>)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4822      	ldr	r0, [pc, #136]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 80006b8:	f004 faa6 	bl	8004c08 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2205      	movs	r2, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fed8 	bl	800247c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d129      	bne.n	8000726 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d2:	7c3b      	ldrb	r3, [r7, #16]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006e2:	8bfb      	ldrh	r3, [r7, #30]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01e      	beq.n	8000726 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006e8:	8bfa      	ldrh	r2, [r7, #30]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d901      	bls.n	80006f4 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	777b      	strb	r3, [r7, #29]
 80006f8:	e010      	b.n	800071c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006fa:	f107 011b 	add.w	r1, r7, #27
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2201      	movs	r2, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 feb9 	bl	800247c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800070a:	7f7b      	ldrb	r3, [r7, #29]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	7efa      	ldrb	r2, [r7, #27]
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	3301      	adds	r3, #1
 800071a:	777b      	strb	r3, [r7, #29]
 800071c:	7f7b      	ldrb	r3, [r7, #29]
 800071e:	b29b      	uxth	r3, r3
 8000720:	8bfa      	ldrh	r2, [r7, #30]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8e9      	bhi.n	80006fa <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 800072e:	f004 fa6b 	bl	8004c08 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000732:	7f7b      	ldrb	r3, [r7, #29]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08009900 	.word	0x08009900
 8000740:	48000c00 	.word	0x48000c00

08000744 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <HCI_TL_SPI_Send+0xa0>)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	3304      	adds	r3, #4
 800075e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000760:	f001 ffb6 	bl	80026d0 <HAL_GetTick>
 8000764:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 8000772:	f004 fa49 	bl	8004c08 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2205      	movs	r2, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fe7b 	bl	800247c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8000786:	7a3b      	ldrb	r3, [r7, #8]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d10f      	bne.n	80007ac <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	b29b      	uxth	r3, r3
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d806      	bhi.n	80007a4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	461a      	mov	r2, r3
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <HCI_TL_SPI_Send+0xa8>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f001 fe6d 	bl	800247c <BSP_SPI3_SendRecv>
 80007a2:	e006      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80007a4:	f06f 0301 	mvn.w	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e002      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 80007ba:	f004 fa25 	bl	8004c08 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007be:	f001 ff87 	bl	80026d0 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d903      	bls.n	80007d4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007cc:	f06f 0302 	mvn.w	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
      break;
 80007d2:	e002      	b.n	80007da <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dbc5      	blt.n	8000766 <HCI_TL_SPI_Send+0x22>

  return result;
 80007da:	69fb      	ldr	r3, [r7, #28]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08009908 	.word	0x08009908
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	200000fc 	.word	0x200000fc

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f004 f9ee 	bl	8004bd8 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48001000 	.word	0x48001000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <hci_tl_lowlevel_init+0x50>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f007 fd49 	bl	80082c8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000836:	4910      	ldr	r1, [pc, #64]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083a:	f003 feea 	bl	8004612 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000840:	2100      	movs	r1, #0
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000844:	f003 fecb 	bl	80045de <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f003 fc3e 	bl	80040ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f003 fc57 	bl	8004106 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08000585 	.word	0x08000585
 8000864:	08000619 	.word	0x08000619
 8000868:	08000745 	.word	0x08000745
 800086c:	0800068d 	.word	0x0800068d
 8000870:	08000649 	.word	0x08000649
 8000874:	080024bd 	.word	0x080024bd
 8000878:	16000006 	.word	0x16000006
 800087c:	200000f4 	.word	0x200000f4
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f007 fe82 	bl	8008594 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <AddBatteryService>:
static BatteryServiceStatus_t InitBatteryValue(void);
static BatteryServiceStatus_t UpdateBatteryValue(void);
static uint8_t GetBatteryValue(void);


BatteryServiceStatus_t AddBatteryService(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
	tBleStatus status;
	BatteryServiceStatus_t ret;
	uint16_t uuid = BATTERY_SERVICE_UUID;
 80008ae:	f641 030f 	movw	r3, #6159	; 0x180f
 80008b2:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 7, &BatteryServiceHandle);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AddBatteryService+0x60>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2307      	movs	r3, #7
 80008bc:	2201      	movs	r2, #1
 80008be:	2001      	movs	r0, #1
 80008c0:	f006 fff6 	bl	80078b0 <aci_gatt_add_serv>
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <AddBatteryService+0x30>
		printf("Adding BATTERY Service Failed\n\r");
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <AddBatteryService+0x64>)
 80008d0:	f008 f806 	bl	80088e0 <iprintf>
		return Battery_AddServiceErr;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e012      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = AddBatteryCharacteristics();
 80008d8:	f000 f81a 	bl	8000910 <AddBatteryCharacteristics>
 80008dc:	4603      	mov	r3, r0
 80008de:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d001      	beq.n	80008ea <AddBatteryService+0x42>
		return ret;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	e009      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = InitBatteryValue();
 80008ea:	f000 f861 	bl	80009b0 <InitBatteryValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d001      	beq.n	80008fc <AddBatteryService+0x54>
		return ret;
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	e000      	b.n	80008fe <AddBatteryService+0x56>
	}
    return Battery_OK;
 80008fc:	2303      	movs	r3, #3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001fc 	.word	0x200001fc
 800090c:	08009938 	.word	0x08009938

08000910 <AddBatteryCharacteristics>:

uint16_t GetBatteryServiceHandle(void){
	return BatteryServiceHandle;
}

static BatteryServiceStatus_t AddBatteryCharacteristics(void){
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e034      	b.n	8000986 <AddBatteryCharacteristics+0x76>
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <AddBatteryCharacteristics+0x88>)
 800091e:	8818      	ldrh	r0, [r3, #0]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <AddBatteryCharacteristics+0x8c>)
 8000924:	5cd1      	ldrb	r1, [r2, r3]
        		                   BatteryCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&BatteryCharUUIDLookUpTable[i],  //UUID Value
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <AddBatteryCharacteristics+0x90>)
 800092c:	189c      	adds	r4, r3, r2
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800092e:	f04f 0c01 	mov.w	ip, #1
								   BatteryCharLengthLookUpTable[i],                 //Char Value Length
				                   BatteryCharPropertiesLookUpTable[i],             //Char Properties
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <AddBatteryCharacteristics+0x94>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800093a:	b2db      	uxtb	r3, r3
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2500      	movs	r5, #0
 8000940:	2600      	movs	r6, #0
				                   BatteryCharSecPermissionsLookUpTable[i],         //Char SecPermissions
								   BatteryCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                              //Encyption Key Size
				                   0,                                               //Does the value field have variable length? 1= yes, 0 = no
				                   &BatteryCharHandleLookUpTable[i]);               //BATTERY Char Handle Address
 8000942:	7bfa      	ldrb	r2, [r7, #15]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <AddBatteryCharacteristics+0x98>)
 8000948:	441a      	add	r2, r3
 800094a:	9205      	str	r2, [sp, #20]
 800094c:	2200      	movs	r2, #0
 800094e:	9204      	str	r2, [sp, #16]
 8000950:	2210      	movs	r2, #16
 8000952:	9203      	str	r2, [sp, #12]
 8000954:	9602      	str	r6, [sp, #8]
 8000956:	9501      	str	r5, [sp, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4663      	mov	r3, ip
 800095e:	4622      	mov	r2, r4
 8000960:	f007 f82f 	bl	80079c2 <aci_gatt_add_char>
 8000964:	4603      	mov	r3, r0
 8000966:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <AddBatteryCharacteristics+0x70>
        	printf(BatteryCharErrorStringLookUpTable[i]);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <AddBatteryCharacteristics+0x9c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	4618      	mov	r0, r3
 8000978:	f007 ffb2 	bl	80088e0 <iprintf>
        	return BatteryCharErrorReturnLookUpTable[i];
 800097c:	2300      	movs	r3, #0
 800097e:	e006      	b.n	800098e <AddBatteryCharacteristics+0x7e>
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0c7      	beq.n	800091c <AddBatteryCharacteristics+0xc>
        }
    }

    return Battery_OK;
 800098c:	2303      	movs	r3, #3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	bf00      	nop
 8000998:	200001fc 	.word	0x200001fc
 800099c:	20000000 	.word	0x20000000
 80009a0:	08009c98 	.word	0x08009c98
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000200 	.word	0x20000200
 80009ac:	20000008 	.word	0x20000008

080009b0 <InitBatteryValue>:

static BatteryServiceStatus_t InitBatteryValue(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	BatteryServiceStatus_t ret;
	ret = UpdateBatteryValue();
 80009b6:	f000 f807 	bl	80009c8 <UpdateBatteryValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	return ret;
 80009be:	79fb      	ldrb	r3, [r7, #7]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <UpdateBatteryValue>:

static BatteryServiceStatus_t UpdateBatteryValue(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
    tBleStatus status;
    uint8_t reg = GetBatteryValue();
 80009ce:	f000 f821 	bl	8000a14 <GetBatteryValue>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71bb      	strb	r3, [r7, #6]
    status = aci_gatt_update_char_value(BatteryServiceHandle, BatteryCharHandleLookUpTable[BATTERY_LEVEL_INDEX], 0, 1, &reg);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <UpdateBatteryValue+0x40>)
 80009d8:	8818      	ldrh	r0, [r3, #0]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <UpdateBatteryValue+0x44>)
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2200      	movs	r2, #0
 80009e6:	f007 f8b7 	bl	8007b58 <aci_gatt_update_char_value>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

    if(status != BLE_STATUS_SUCCESS){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <UpdateBatteryValue+0x36>
    	printf("Update Battery Level char failed\n\r");
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <UpdateBatteryValue+0x48>)
 80009f6:	f007 ff73 	bl	80088e0 <iprintf>
    	return Battery_UpdateCharErr;
 80009fa:	2302      	movs	r3, #2
 80009fc:	e000      	b.n	8000a00 <UpdateBatteryValue+0x38>
    }

    return Battery_OK;
 80009fe:	2303      	movs	r3, #3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001fc 	.word	0x200001fc
 8000a0c:	20000200 	.word	0x20000200
 8000a10:	08009958 	.word	0x08009958

08000a14 <GetBatteryValue>:

static uint8_t GetBatteryValue(void){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return 100;
 8000a18:	2364      	movs	r3, #100	; 0x64
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <AnalogStickInit>:
 *@Params: Init struct with desired user settings, AnalogStick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: AnalogStick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void AnalogStickInit(AnalogStick_Handle_t *AnalogStick, AnalogStick_IO_Drv_t IO){
 8000a24:	b084      	sub	sp, #16
 8000a26:	b5b0      	push	{r4, r5, r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	f107 001c 	add.w	r0, r7, #28
 8000a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	AnalogStick->IO_Driver = IO;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	1d1c      	adds	r4, r3, #4
 8000a3a:	f107 051c 	add.w	r5, r7, #28
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	6023      	str	r3, [r4, #0]
	AnalogStick->IO_Driver.init();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4798      	blx	r3
	AnalogStick->X_Position = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
	AnalogStick->Y_Position = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	805a      	strh	r2, [r3, #2]
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a62:	b004      	add	sp, #16
 8000a64:	4770      	bx	lr

08000a66 <AnalogStickRead>:
 *@Params: AnalogStick Handle
 *@Return: AnalogStickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: AnalogStickHandle must be initialized
 *@Postcondition: AnalogStick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
AnalogStickStatus_t AnalogStickRead(AnalogStick_Handle_t *AnalogStick){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	int16_t PreviousX = AnalogStick->X_Position;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	81fb      	strh	r3, [r7, #14]
	int16_t PreviousY = AnalogStick->Y_Position;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	81bb      	strh	r3, [r7, #12]
	AnalogStick->IO_Driver.read(&(AnalogStick->X_Position), &(AnalogStick->Y_Position));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	3202      	adds	r2, #2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4798      	blx	r3
    if((AnalogStick->X_Position == 0 && PreviousX == 0) && (AnalogStick->Y_Position == 0 && PreviousY == 0)){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10e      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d105      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <AnalogStickRead+0x4a>
        return AnalogStickUnchanged;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <AnalogStickRead+0x4c>
	}
    return AnalogStickChanged;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <AnalogStickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void AnalogStickIOInit(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10d      	bne.n	8000ae4 <AnalogStickIOInit+0x28>
	    ADC_GPIO_Init();
 8000ac8:	f001 fa0e 	bl	8001ee8 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000acc:	f000 ffac 	bl	8001a28 <ADC_DMA_Init>
	    ADC1_Init();
 8000ad0:	f000 fee2 	bl	8001898 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	4905      	ldr	r1, [pc, #20]	; (8000aec <AnalogStickIOInit+0x30>)
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <AnalogStickIOInit+0x34>)
 8000ada:	f002 f9a3 	bl	8002e24 <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200004cc 	.word	0x200004cc
 8000aec:	200004c0 	.word	0x200004c0
 8000af0:	20000414 	.word	0x20000414

08000af4 <AnalogStickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from AnalogStick will be stopped.
 **************************************//**************************************/
static void AnalogStickIODeInit(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <AnalogStickIODeInit+0x1c>)
 8000afa:	f002 fa4f 	bl	8002f9c <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000afe:	200b      	movs	r0, #11
 8000b00:	f003 fb0f 	bl	8004122 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f003 fb26 	bl	8004156 <HAL_NVIC_ClearPendingIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000414 	.word	0x20000414

08000b14 <AnalogStickIORead1>:
 *@Params: AnalogStick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the AnalogStick
 *@Precondition: AnalogStick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw AnalogStick value.
 **************************************//**************************************/
static void AnalogStickIORead1(int16_t *X_Pos, int16_t *Y_Pos){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_LX_INDEX] << 4) - 32767;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <AnalogStickIORead1+0x80>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b2c:	3b7f      	subs	r3, #127	; 0x7f
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	81fb      	strh	r3, [r7, #14]
	if(Convert < 3276 && Convert > -3277){ //10% of Max
 8000b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b36:	f640 42cb 	movw	r2, #3275	; 0xccb
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	dc06      	bgt.n	8000b4c <AnalogStickIORead1+0x38>
 8000b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <AnalogStickIORead1+0x84>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	db01      	blt.n	8000b4c <AnalogStickIORead1+0x38>
		Convert = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	81fb      	strh	r3, [r7, #14]
	}
	*X_Pos = Convert;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	89fa      	ldrh	r2, [r7, #14]
 8000b50:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_LY_INDEX] << 4) - 32767;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <AnalogStickIORead1+0x80>)
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b60:	3b7f      	subs	r3, #127	; 0x7f
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	81fb      	strh	r3, [r7, #14]
	if(Convert < 3276 && Convert > -3277){ //10% of Max
 8000b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6a:	f640 42cb 	movw	r2, #3275	; 0xccb
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	dc06      	bgt.n	8000b80 <AnalogStickIORead1+0x6c>
 8000b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <AnalogStickIORead1+0x84>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	db01      	blt.n	8000b80 <AnalogStickIORead1+0x6c>
		Convert = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81fb      	strh	r3, [r7, #14]
	}
	*Y_Pos = Convert;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	801a      	strh	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200004c0 	.word	0x200004c0
 8000b98:	fffff334 	.word	0xfffff334

08000b9c <AnalogStickIORead2>:

static void AnalogStickIORead2(int16_t *X_Pos, int16_t *Y_Pos){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_RX_INDEX] << 4) - 32767;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <AnalogStickIORead2+0x80>)
 8000ba8:	889b      	ldrh	r3, [r3, #4]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000bb4:	3b7f      	subs	r3, #127	; 0x7f
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	81fb      	strh	r3, [r7, #14]
	if(Convert < 3276 && Convert > -3277){ //10% of Max
 8000bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bbe:	f640 42cb 	movw	r2, #3275	; 0xccb
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dc06      	bgt.n	8000bd4 <AnalogStickIORead2+0x38>
 8000bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <AnalogStickIORead2+0x84>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	db01      	blt.n	8000bd4 <AnalogStickIORead2+0x38>
		Convert = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	81fb      	strh	r3, [r7, #14]
	}
	*X_Pos = Convert;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	89fa      	ldrh	r2, [r7, #14]
 8000bd8:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_RY_INDEX] << 4) - 32767;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <AnalogStickIORead2+0x80>)
 8000bdc:	88db      	ldrh	r3, [r3, #6]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000be8:	3b7f      	subs	r3, #127	; 0x7f
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	81fb      	strh	r3, [r7, #14]
	if(Convert < 3276 && Convert > -3277){ //10% of Max
 8000bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bf2:	f640 42cb 	movw	r2, #3275	; 0xccb
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	dc06      	bgt.n	8000c08 <AnalogStickIORead2+0x6c>
 8000bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <AnalogStickIORead2+0x84>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	db01      	blt.n	8000c08 <AnalogStickIORead2+0x6c>
		Convert = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	81fb      	strh	r3, [r7, #14]
	}
	*Y_Pos = Convert;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	89fa      	ldrh	r2, [r7, #14]
 8000c0c:	801a      	strh	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200004c0 	.word	0x200004c0
 8000c20:	fffff334 	.word	0xfffff334

08000c24 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(ButtonIDNumber_t ButtonID, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8000c24:	b082      	sub	sp, #8
 8000c26:	b5b0      	push	{r4, r5, r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	f107 0118 	add.w	r1, r7, #24
 8000c32:	e881 000c 	stmia.w	r1, {r2, r3}
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	Button->IO_Driver   = IO;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	1d1c      	adds	r4, r3, #4
 8000c3e:	f107 0518 	add.w	r5, r7, #24
 8000c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	6023      	str	r3, [r4, #0]
	Button->IO_Driver.init();
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4798      	blx	r3
	Button->ButtonIDNumber = ButtonID;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	701a      	strb	r2, [r3, #0]
	Button->State = ButtonUnpressed;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	705a      	strb	r2, [r3, #1]
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c66:	b002      	add	sp, #8
 8000c68:	4770      	bx	lr

08000c6a <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	4610      	mov	r0, r2
 8000c82:	4798      	blx	r3
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	705a      	strb	r2, [r3, #1]
    if(Previous_State != Button->State){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d001      	beq.n	8000c9a <ButtonRead+0x30>
    	return ButtonChanged;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8000c9a:	2301      	movs	r3, #1
    }
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO Peripheral and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Uninitialized){
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <Button_IO_init+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d104      	bne.n	8000cba <Button_IO_init+0x16>
		Button_GPIO_Init();
 8000cb0:	f001 f888 	bl	8001dc4 <Button_GPIO_Init>
	    initialize_status = ButtonIO_Initialized;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <Button_IO_init+0x1c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
	}
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000202 	.word	0x20000202

08000cc4 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <Button_IO_deinit+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <Button_IO_deinit+0x12>
	    //de init GPIO. implement later.
	    initialize_status = ButtonIO_Uninitialized;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <Button_IO_deinit+0x1c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20000202 	.word	0x20000202

08000ce4 <Button_IO_ReadPosLogic>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_ReadPosLogic(uint8_t ButtonNumber){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <Button_IO_ReadPosLogic+0x3c>)
 8000cf2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4909      	ldr	r1, [pc, #36]	; (8000d20 <Button_IO_ReadPosLogic+0x3c>)
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4610      	mov	r0, r2
 8000d04:	f003 ff68 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <Button_IO_ReadPosLogic+0x32>
		return ButtonPressed;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <Button_IO_ReadPosLogic+0x34>
	} else {
		return ButtonUnpressed;
 8000d16:	2300      	movs	r3, #0
	}
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	08009cc4 	.word	0x08009cc4

08000d24 <Button_IO_ReadNegLogic>:

static ButtonState_t Button_IO_ReadNegLogic(uint8_t ButtonNumber){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <Button_IO_ReadNegLogic+0x3c>)
 8000d32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4909      	ldr	r1, [pc, #36]	; (8000d60 <Button_IO_ReadNegLogic+0x3c>)
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4610      	mov	r0, r2
 8000d44:	f003 ff48 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <Button_IO_ReadNegLogic+0x32>
		return ButtonUnpressed;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <Button_IO_ReadNegLogic+0x34>
	} else {
		return ButtonPressed;
 8000d56:	2301      	movs	r3, #1
	}
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009cc4 	.word	0x08009cc4

08000d64 <TriggerInit>:
 *@Params: Init struct with desired user settings, Trigger handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Trigger handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void TriggerInit(Trigger_Handle_t *Trigger, Trigger_IO_Drv_t IO){
 8000d64:	b084      	sub	sp, #16
 8000d66:	b5b0      	push	{r4, r5, r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	f107 001c 	add.w	r0, r7, #28
 8000d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Trigger->IO_Driver = IO;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	1d1c      	adds	r4, r3, #4
 8000d7a:	f107 051c 	add.w	r5, r7, #28
 8000d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d82:	682b      	ldr	r3, [r5, #0]
 8000d84:	6023      	str	r3, [r4, #0]
	Trigger->IO_Driver.init();
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4798      	blx	r3
	Trigger->Position = 0;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000d9c:	b004      	add	sp, #16
 8000d9e:	4770      	bx	lr

08000da0 <TriggerRead>:
 *@Params: Trigger Handle
 *@Return: TriggerChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: TriggerHandle must be initialized
 *@Postcondition: Trigger XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
TriggerStatus_t TriggerRead(Trigger_Handle_t *Trigger){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint8_t Previous = Trigger->Position;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	73fb      	strb	r3, [r7, #15]
	Trigger->IO_Driver.read(&(Trigger->Position));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4610      	mov	r0, r2
 8000db6:	4798      	blx	r3
    if((Trigger->Position == 0 && Previous == 0)){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <TriggerRead+0x2a>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <TriggerRead+0x2a>
        return TriggerUnchanged;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <TriggerRead+0x2c>
	}
    return TriggerChanged;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <TriggerIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void TriggerIOInit(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <TriggerIOInit+0x2c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10d      	bne.n	8000dfc <TriggerIOInit+0x28>
	    ADC_GPIO_Init();
 8000de0:	f001 f882 	bl	8001ee8 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000de4:	f000 fe20 	bl	8001a28 <ADC_DMA_Init>
	    ADC1_Init();
 8000de8:	f000 fd56 	bl	8001898 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000dec:	220c      	movs	r2, #12
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <TriggerIOInit+0x30>)
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <TriggerIOInit+0x34>)
 8000df2:	f002 f817 	bl	8002e24 <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <TriggerIOInit+0x2c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200004cc 	.word	0x200004cc
 8000e04:	200004c0 	.word	0x200004c0
 8000e08:	20000414 	.word	0x20000414

08000e0c <TriggerIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Trigger will be stopped.
 **************************************//**************************************/
static void TriggerIODeInit(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <TriggerIODeInit+0x1c>)
 8000e12:	f002 f8c3 	bl	8002f9c <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f003 f983 	bl	8004122 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000e1c:	200b      	movs	r0, #11
 8000e1e:	f003 f99a 	bl	8004156 <HAL_NVIC_ClearPendingIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000414 	.word	0x20000414

08000e2c <TriggerIORead1>:
 *@Params: Trigger Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the Trigger
 *@Precondition: Trigger IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw Trigger value.
 **************************************//**************************************/
static void TriggerIORead1(uint8_t *Pos){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
    uint16_t Value = adc_buffer[ADC_LT_INDEX];
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <TriggerIORead1+0x44>)
 8000e36:	891b      	ldrh	r3, [r3, #8]
 8000e38:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	f640 1298 	movw	r2, #2456	; 0x998
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d802      	bhi.n	8000e4a <TriggerIORead1+0x1e>
		Convert = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e004      	b.n	8000e54 <TriggerIORead1+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b19      	cmp	r3, #25
 8000e58:	d801      	bhi.n	8000e5e <TriggerIORead1+0x32>
		Convert = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	701a      	strb	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	200004c0 	.word	0x200004c0

08000e74 <TriggerIORead2>:

static void TriggerIORead2(uint8_t *Pos){
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
	uint16_t Value = adc_buffer[ADC_RT_INDEX];
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <TriggerIORead2+0x44>)
 8000e7e:	895b      	ldrh	r3, [r3, #10]
 8000e80:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	f640 1298 	movw	r2, #2456	; 0x998
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <TriggerIORead2+0x1e>
		Convert = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e004      	b.n	8000e9c <TriggerIORead2+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 8000e92:	89bb      	ldrh	r3, [r7, #12]
 8000e94:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b19      	cmp	r3, #25
 8000ea0:	d801      	bhi.n	8000ea6 <TriggerIORead2+0x32>
		Convert = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	701a      	strb	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	200004c0 	.word	0x200004c0

08000ebc <AddDeviceInfoService>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void);


DeviceInfoServiceStatus_t AddDeviceInfoService(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
	tBleStatus status;
	DeviceInfoServiceStatus_t ret;
	uint16_t uuid = DEVICEINFO_SERVICE_UUID;
 8000ec2:	f641 030a 	movw	r3, #6154	; 0x180a
 8000ec6:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &DeviceInfoServiceHandle);
 8000ec8:	1d39      	adds	r1, r7, #4
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <AddDeviceInfoService+0x44>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2310      	movs	r3, #16
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f006 fcec 	bl	80078b0 <aci_gatt_add_serv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <AddDeviceInfoService+0x30>
		printf("Adding Device Info Service Failed\n\r");
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <AddDeviceInfoService+0x48>)
 8000ee4:	f007 fcfc 	bl	80088e0 <iprintf>
		return DeviceInfo_AddServiceErr;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e004      	b.n	8000ef6 <AddDeviceInfoService+0x3a>
	}
	ret = AddDeviceInfoCharacteristics();
 8000eec:	f000 f852 	bl	8000f94 <AddDeviceInfoCharacteristics>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71bb      	strb	r3, [r7, #6]
    return ret;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]

}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000204 	.word	0x20000204
 8000f04:	08009a44 	.word	0x08009a44

08000f08 <InitDeviceInfoCharacteristics>:

uint16_t GetDeviceInfoServiceHandle(void){
	return DeviceInfoServiceHandle;
}

static DeviceInfoServiceStatus_t InitDeviceInfoCharacteristics(void){
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af02      	add	r7, sp, #8
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	e029      	b.n	8000f68 <InitDeviceInfoCharacteristics+0x60>
    	status = aci_gatt_update_char_value(DeviceInfoServiceHandle, DeviceInfoCharHandleLookUpTable[i], 0, DeviceInfoCharValueLengthLookUpTable[i], DeviceInfoCharValueStrings[i]);
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <InitDeviceInfoCharacteristics+0x70>)
 8000f16:	8818      	ldrh	r0, [r3, #0]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <InitDeviceInfoCharacteristics+0x74>)
 8000f1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <InitDeviceInfoCharacteristics+0x78>)
 8000f24:	5cd2      	ldrb	r2, [r2, r3]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4c16      	ldr	r4, [pc, #88]	; (8000f84 <InitDeviceInfoCharacteristics+0x7c>)
 8000f2a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	f006 fe10 	bl	8007b58 <aci_gatt_update_char_value>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71bb      	strb	r3, [r7, #6]
    	if(status != BLE_STATUS_SUCCESS){
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00f      	beq.n	8000f62 <InitDeviceInfoCharacteristics+0x5a>
    		printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <InitDeviceInfoCharacteristics+0x80>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 fcc8 	bl	80088e0 <iprintf>
    		printf("Fail on Init Device Info with return code %u",status);
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	4619      	mov	r1, r3
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <InitDeviceInfoCharacteristics+0x84>)
 8000f56:	f007 fcc3 	bl	80088e0 <iprintf>
    		return DeviceInfoCharErrorReturnLookUpTable[i];
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <InitDeviceInfoCharacteristics+0x88>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	e006      	b.n	8000f70 <InitDeviceInfoCharacteristics+0x68>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3301      	adds	r3, #1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d9d2      	bls.n	8000f14 <InitDeviceInfoCharacteristics+0xc>
    	}
    }
    return DeviceInfo_OK;
 8000f6e:	2306      	movs	r3, #6
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	20000208 	.word	0x20000208
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20000014 	.word	0x20000014
 8000f88:	20000024 	.word	0x20000024
 8000f8c:	08009a68 	.word	0x08009a68
 8000f90:	08009dcc 	.word	0x08009dcc

08000f94 <AddDeviceInfoCharacteristics>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void){
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e03c      	b.n	800101a <AddDeviceInfoCharacteristics+0x86>
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <AddDeviceInfoCharacteristics+0x9c>)
 8000fa2:	881c      	ldrh	r4, [r3, #0]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <AddDeviceInfoCharacteristics+0xa0>)
 8000fa8:	5cd5      	ldrb	r5, [r2, r3]
        		                   DeviceInfoCharUUIDTypeLookUpTable[i],               //UUID Type
				                   (const uint8_t*)&DeviceInfoCharUUIDLookUpTable[i],  //UUID Value
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <AddDeviceInfoCharacteristics+0xa4>)
 8000fb0:	189e      	adds	r6, r3, r2
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <AddDeviceInfoCharacteristics+0xa8>)
 8000fb6:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <AddDeviceInfoCharacteristics+0xac>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	491f      	ldr	r1, [pc, #124]	; (8001044 <AddDeviceInfoCharacteristics+0xb0>)
 8000fc6:	5c8a      	ldrb	r2, [r1, r2]
 8000fc8:	7bf9      	ldrb	r1, [r7, #15]
 8000fca:	481f      	ldr	r0, [pc, #124]	; (8001048 <AddDeviceInfoCharacteristics+0xb4>)
 8000fcc:	5c41      	ldrb	r1, [r0, r1]
				                   DeviceInfo_CharPropertiesLookUpTable[i],            //Char Properties
				                   DeviceInfoCharPermissionsLookUpTable[i],            //Char SecPermissions
								   DeviceInfoCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                                 //Encryption Key Size
				                   1,                                                  //variable length value field (1) or not (0).
				                   &DeviceInfoCharHandleLookUpTable[i]);               //DeviceInfo Char Handle Address
 8000fce:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000fd0:	0040      	lsls	r0, r0, #1
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <AddDeviceInfoCharacteristics+0xb8>)
 8000fd4:	4418      	add	r0, r3
 8000fd6:	9005      	str	r0, [sp, #20]
 8000fd8:	2001      	movs	r0, #1
 8000fda:	9004      	str	r0, [sp, #16]
 8000fdc:	2010      	movs	r0, #16
 8000fde:	9003      	str	r0, [sp, #12]
 8000fe0:	9102      	str	r1, [sp, #8]
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4663      	mov	r3, ip
 8000fea:	4632      	mov	r2, r6
 8000fec:	4629      	mov	r1, r5
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f006 fce7 	bl	80079c2 <aci_gatt_add_char>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <AddDeviceInfoCharacteristics+0x80>
        	printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <AddDeviceInfoCharacteristics+0xbc>)
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fc6a 	bl	80088e0 <iprintf>
        	return DeviceInfoCharErrorReturnLookUpTable[i];
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <AddDeviceInfoCharacteristics+0xc0>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	e008      	b.n	8001026 <AddDeviceInfoCharacteristics+0x92>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d9bf      	bls.n	8000fa0 <AddDeviceInfoCharacteristics+0xc>
        }
    }
    return InitDeviceInfoCharacteristics();
 8001020:	f7ff ff72 	bl	8000f08 <InitDeviceInfoCharacteristics>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	bf00      	nop
 8001030:	20000204 	.word	0x20000204
 8001034:	08009db8 	.word	0x08009db8
 8001038:	08009dbc 	.word	0x08009dbc
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000010 	.word	0x20000010
 8001044:	08009dc4 	.word	0x08009dc4
 8001048:	08009dc8 	.word	0x08009dc8
 800104c:	20000208 	.word	0x20000208
 8001050:	20000024 	.word	0x20000024
 8001054:	08009dcc 	.word	0x08009dcc

08001058 <FitnessControllerBLEInit>:
		0x4000, //x
		0x8000  //y
};


void FitnessControllerBLEInit(void){
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af02      	add	r7, sp, #8
	tBleStatus status; //Var for storing return status

	uint8_t bdaddr[BD_ADDR_SIZE]; //Device address
	const char *DeviceName = "Evan's Fitness Controller"; //Device Name
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <FitnessControllerBLEInit+0xf8>)
 8001060:	617b      	str	r3, [r7, #20]
	uint16_t service_handle,  dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8001062:	4a3c      	ldr	r2, [pc, #240]	; (8001154 <FitnessControllerBLEInit+0xfc>)
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800106c:	6018      	str	r0, [r3, #0]
 800106e:	3304      	adds	r3, #4
 8001070:	8019      	strh	r1, [r3, #0]
	//Init HCI
	hci_init(ControllerEventNotify,NULL);
 8001072:	2100      	movs	r1, #0
 8001074:	4838      	ldr	r0, [pc, #224]	; (8001158 <FitnessControllerBLEInit+0x100>)
 8001076:	f007 f8e5 	bl	8008244 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 800107a:	1cba      	adds	r2, r7, #2
 800107c:	1d7b      	adds	r3, r7, #5
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f006 ff5a 	bl	8007f3a <getBlueNRGVersion>
	hci_reset();
 8001086:	f006 ff9c 	bl	8007fc2 <hci_reset>
	HAL_Delay(100);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f001 fb2c 	bl	80026e8 <HAL_Delay>

	status = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	461a      	mov	r2, r3
 8001096:	2106      	movs	r1, #6
 8001098:	2000      	movs	r0, #0
 800109a:	f006 fec3 	bl	8007e24 <aci_hal_write_config_data>
 800109e:	4603      	mov	r3, r0
 80010a0:	74fb      	strb	r3, [r7, #19]

	if(status != BLE_STATUS_SUCCESS){
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <FitnessControllerBLEInit+0x58>
		printf("aci_hal_write_config_data failed\n\r");
 80010a8:	482c      	ldr	r0, [pc, #176]	; (800115c <FitnessControllerBLEInit+0x104>)
 80010aa:	f007 fc19 	bl	80088e0 <iprintf>
		while(1);
 80010ae:	e7fe      	b.n	80010ae <FitnessControllerBLEInit+0x56>
	}

	status = aci_gatt_init();
 80010b0:	f006 fbdb 	bl	800786a <aci_gatt_init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <FitnessControllerBLEInit+0x6e>
		printf("aci_gatt_init failed\n\r");
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <FitnessControllerBLEInit+0x108>)
 80010c0:	f007 fc0e 	bl	80088e0 <iprintf>
		while(1);
 80010c4:	e7fe      	b.n	80010c4 <FitnessControllerBLEInit+0x6c>
	}


    status = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, strlen(DeviceName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff f882 	bl	80001d0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	f107 010a 	add.w	r1, r7, #10
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	460b      	mov	r3, r1
 80010e0:	2100      	movs	r1, #0
 80010e2:	2001      	movs	r0, #1
 80010e4:	f006 fa87 	bl	80075f6 <aci_gap_init_IDB05A1>
 80010e8:	4603      	mov	r3, r0
 80010ea:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 80010ec:	7cfb      	ldrb	r3, [r7, #19]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <FitnessControllerBLEInit+0xa2>
		printf("aci_gap_init failed\n\r");
 80010f2:	481c      	ldr	r0, [pc, #112]	; (8001164 <FitnessControllerBLEInit+0x10c>)
 80010f4:	f007 fbf4 	bl	80088e0 <iprintf>
		while(1);
 80010f8:	e7fe      	b.n	80010f8 <FitnessControllerBLEInit+0xa0>
	}


	status = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(DeviceName), DeviceName);
 80010fa:	897c      	ldrh	r4, [r7, #10]
 80010fc:	893d      	ldrh	r5, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff f866 	bl	80001d0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	4629      	mov	r1, r5
 8001112:	4620      	mov	r0, r4
 8001114:	f006 fd20 	bl	8007b58 <aci_gatt_update_char_value>
 8001118:	4603      	mov	r3, r0
 800111a:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 800111c:	7cfb      	ldrb	r3, [r7, #19]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <FitnessControllerBLEInit+0xd2>
		printf("aci_gatt_update_char_value failed\n\r");
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <FitnessControllerBLEInit+0x110>)
 8001124:	f007 fbdc 	bl	80088e0 <iprintf>
		while(1);
 8001128:	e7fe      	b.n	8001128 <FitnessControllerBLEInit+0xd0>
	}
	uint16_t test_appearance_value = 0x03C4;
 800112a:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 800112e:	803b      	strh	r3, [r7, #0]
	status = aci_gatt_update_char_value(service_handle,appearance_char_handle,0,2,&test_appearance_value);
 8001130:	8978      	ldrh	r0, [r7, #10]
 8001132:	88f9      	ldrh	r1, [r7, #6]
 8001134:	463b      	mov	r3, r7
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	2200      	movs	r2, #0
 800113c:	f006 fd0c 	bl	8007b58 <aci_gatt_update_char_value>
 8001140:	4603      	mov	r3, r0
 8001142:	74fb      	strb	r3, [r7, #19]
	AddServices();
 8001144:	f000 f902 	bl	800134c <AddServices>


}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	08009a98 	.word	0x08009a98
 8001154:	08009dd0 	.word	0x08009dd0
 8001158:	08001405 	.word	0x08001405
 800115c:	08009ab4 	.word	0x08009ab4
 8001160:	08009ad8 	.word	0x08009ad8
 8001164:	08009af0 	.word	0x08009af0
 8001168:	08009b08 	.word	0x08009b08

0800116c <FitnessController_BLE_Process>:

void FitnessController_BLE_Process(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	//make device discoverable
	if(connected){
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <FitnessController_BLE_Process+0x34>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <FitnessController_BLE_Process+0x12>
		SetConnectable();
 800117a:	f000 f915 	bl	80013a8 <SetConnectable>
	}
	FitnessControllerDataFlag_t DataFlag = FitnessControllerUpdateState(&FitnessController);
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <FitnessController_BLE_Process+0x38>)
 8001180:	f000 f824 	bl	80011cc <FitnessControllerUpdateState>
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
    if(DataFlag == FC_NewDataAvailable){
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <FitnessController_BLE_Process+0x26>
    	SendHIDData();
 800118e:	f000 facb 	bl	8001728 <SendHIDData>
    }
	hci_user_evt_proc();
 8001192:	f007 f9d3 	bl	800853c <hci_user_evt_proc>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000034 	.word	0x20000034
 80011a4:	20000210 	.word	0x20000210

080011a8 <FitnessControllerHardwareInit>:

void FitnessControllerHardwareInit(FitnessControllerHandle_t *FitnessController){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	ControllerButtonInit(FitnessController);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f931 	bl	8001418 <ControllerButtonInit>
	ControllerTriggerInit(FitnessController);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f984 	bl	80014c4 <ControllerTriggerInit>
	ControllerStickInit(FitnessController);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f9ab 	bl	8001518 <ControllerStickInit>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <FitnessControllerUpdateState>:

FitnessControllerDataFlag_t FitnessControllerUpdateState(FitnessControllerHandle_t *FitnessController){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	FitnessControllerDataFlag_t ReturnStatus = FC_NoDataAvailable;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80011d8:	2300      	movs	r3, #0
 80011da:	73bb      	strb	r3, [r7, #14]
 80011dc:	e044      	b.n	8001268 <FitnessControllerUpdateState+0x9c>
    	if(ButtonRead(&FitnessController->Buttons[i].Button) == ButtonChanged){
 80011de:	7bba      	ldrb	r2, [r7, #14]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fd3c 	bl	8000c6a <ButtonRead>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d134      	bne.n	8001262 <FitnessControllerUpdateState+0x96>
    		ReturnStatus |= FC_NewDataAvailable;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
            if(FitnessController->Buttons[i].Button.State == ButtonPressed){
 8001200:	7bba      	ldrb	r2, [r7, #14]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d110      	bne.n	8001238 <FitnessControllerUpdateState+0x6c>
            	HIDReport.Buttons |= FitnessController->Buttons[i].ButtonMsk;
 8001216:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 8001218:	895b      	ldrh	r3, [r3, #10]
 800121a:	b299      	uxth	r1, r3
 800121c:	7bba      	ldrb	r2, [r7, #14]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4403      	add	r3, r0
 800122a:	3318      	adds	r3, #24
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	430b      	orrs	r3, r1
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 8001234:	815a      	strh	r2, [r3, #10]
 8001236:	e014      	b.n	8001262 <FitnessControllerUpdateState+0x96>
            } else {
            	HIDReport.Buttons &= ~(FitnessController->Buttons[i].ButtonMsk);
 8001238:	4b43      	ldr	r3, [pc, #268]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 800123a:	895b      	ldrh	r3, [r3, #10]
 800123c:	b29b      	uxth	r3, r3
 800123e:	b219      	sxth	r1, r3
 8001240:	7bba      	ldrb	r2, [r7, #14]
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4403      	add	r3, r0
 800124e:	3318      	adds	r3, #24
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b21b      	sxth	r3, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	b21b      	sxth	r3, r3
 8001258:	400b      	ands	r3, r1
 800125a:	b21b      	sxth	r3, r3
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 8001260:	815a      	strh	r2, [r3, #10]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	3301      	adds	r3, #1
 8001266:	73bb      	strb	r3, [r7, #14]
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	2b0d      	cmp	r3, #13
 800126c:	d9b7      	bls.n	80011de <FitnessControllerUpdateState+0x12>
            }
    	}
    }

    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 800126e:	2300      	movs	r3, #0
 8001270:	737b      	strb	r3, [r7, #13]
 8001272:	e023      	b.n	80012bc <FitnessControllerUpdateState+0xf0>
        if(TriggerRead(&FitnessController->Triggers[i]) == TriggerChanged){
 8001274:	7b7a      	ldrb	r2, [r7, #13]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd8a 	bl	8000da0 <TriggerRead>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d111      	bne.n	80012b6 <FitnessControllerUpdateState+0xea>
        	ReturnStatus |= FC_NewDataAvailable;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Triggers[i] = FitnessController->Triggers[i].Position;
 800129a:	7b7a      	ldrb	r2, [r7, #13]
 800129c:	7b79      	ldrb	r1, [r7, #13]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4403      	add	r3, r0
 80012aa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 80012b2:	440b      	add	r3, r1
 80012b4:	721a      	strb	r2, [r3, #8]
    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	3301      	adds	r3, #1
 80012ba:	737b      	strb	r3, [r7, #13]
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d9d8      	bls.n	8001274 <FitnessControllerUpdateState+0xa8>
        }
    }

    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 80012c2:	2300      	movs	r3, #0
 80012c4:	733b      	strb	r3, [r7, #12]
 80012c6:	e036      	b.n	8001336 <FitnessControllerUpdateState+0x16a>
        if(AnalogStickRead(&FitnessController->Sticks[i]) == AnalogStickChanged){
 80012c8:	7b3a      	ldrb	r2, [r7, #12]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fbc3 	bl	8000a66 <AnalogStickRead>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d124      	bne.n	8001330 <FitnessControllerUpdateState+0x164>
        	ReturnStatus |= FC_NewDataAvailable;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Sticks[i*2] = FitnessController->Sticks[i].X_Position;
 80012ee:	7b3a      	ldrb	r2, [r7, #12]
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	0059      	lsls	r1, r3, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4403      	add	r3, r0
 8001300:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001304:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 800130a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        	HIDReport.Sticks[i*2+1] = FitnessController->Sticks[i].Y_Position;
 800130e:	7b3a      	ldrb	r2, [r7, #12]
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1c59      	adds	r1, r3, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4403      	add	r3, r0
 8001322:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 8001326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <FitnessControllerUpdateState+0x17c>)
 800132c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	733b      	strb	r3, [r7, #12]
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d9c5      	bls.n	80012c8 <FitnessControllerUpdateState+0xfc>
        }
    }
    return ReturnStatus;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003fc 	.word	0x200003fc

0800134c <AddServices>:

static void AddServices(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

	  HIDServiceStatus_t HIDStatus;
	  HIDStatus = AddHIDService();
 8001352:	f000 f90b 	bl	800156c <AddHIDService>
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	  if(HIDStatus != HID_OK){
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d003      	beq.n	8001368 <AddServices+0x1c>
          printf("Add HID Service Failed\n\r");
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <AddServices+0x50>)
 8001362:	f007 fabd 	bl	80088e0 <iprintf>
          while(1);
 8001366:	e7fe      	b.n	8001366 <AddServices+0x1a>
	  }

	  BatteryServiceStatus_t BatStatus;
	  BatStatus = AddBatteryService();
 8001368:	f7ff fa9e 	bl	80008a8 <AddBatteryService>
 800136c:	4603      	mov	r3, r0
 800136e:	71bb      	strb	r3, [r7, #6]
	  if(BatStatus != Battery_OK){
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d003      	beq.n	800137e <AddServices+0x32>
		  printf("Add Battery Service Failed\n\r");
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <AddServices+0x54>)
 8001378:	f007 fab2 	bl	80088e0 <iprintf>
          while(1);
 800137c:	e7fe      	b.n	800137c <AddServices+0x30>
	  }

	  DeviceInfoServiceStatus_t DIStatus;
	  DIStatus = AddDeviceInfoService();
 800137e:	f7ff fd9d 	bl	8000ebc <AddDeviceInfoService>
 8001382:	4603      	mov	r3, r0
 8001384:	717b      	strb	r3, [r7, #5]
	  if(DIStatus != DeviceInfo_OK){
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	2b06      	cmp	r3, #6
 800138a:	d003      	beq.n	8001394 <AddServices+0x48>
		  printf("Add Device Service Failed\n\r");
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <AddServices+0x58>)
 800138e:	f007 faa7 	bl	80088e0 <iprintf>
          while(1);
 8001392:	e7fe      	b.n	8001392 <AddServices+0x46>
	  }

}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08009b2c 	.word	0x08009b2c
 80013a0:	08009b48 	.word	0x08009b48
 80013a4:	08009b68 	.word	0x08009b68

080013a8 <SetConnectable>:

static tBleStatus SetConnectable(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af08      	add	r7, sp, #32
	tBleStatus status;
    status = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 80013ae:	2300      	movs	r3, #0
 80013b0:	9306      	str	r3, [sp, #24]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9305      	str	r3, [sp, #20]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9303      	str	r3, [sp, #12]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SetConnectable+0x50>)
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2313      	movs	r3, #19
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f006 f960 	bl	8007696 <aci_gap_set_discoverable>
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
    connected = DEVICE_CONNECTED;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SetConnectable+0x54>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
	if(status != BLE_STATUS_SUCCESS){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <SetConnectable+0x44>
		printf("aci_gap_set_discoverable failed\n\r");
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <SetConnectable+0x58>)
 80013e8:	f007 fa7a 	bl	80088e0 <iprintf>
	}

	return status;
 80013ec:	79fb      	ldrb	r3, [r7, #7]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08009dd8 	.word	0x08009dd8
 80013fc:	20000034 	.word	0x20000034
 8001400:	08009b84 	.word	0x08009b84

08001404 <ControllerEventNotify>:

static void ControllerEventNotify(void *pData){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <ControllerButtonInit>:

static void ControllerButtonInit(FitnessControllerHandle_t *FitnessController){
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e03f      	b.n	80014a6 <ControllerButtonInit+0x8e>
		FitnessController->Buttons[i].ButtonMsk = ButtonMskLUT[i];
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	4923      	ldr	r1, [pc, #140]	; (80014b8 <ControllerButtonInit+0xa0>)
 800142c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3318      	adds	r3, #24
 800143e:	4602      	mov	r2, r0
 8001440:	801a      	strh	r2, [r3, #0]
		if(i != XINPUT_LEFT_THUMB_INDEX && i != XINPUT_RIGHT_THUMB_INDEX){
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b06      	cmp	r3, #6
 8001446:	d017      	beq.n	8001478 <ControllerButtonInit+0x60>
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b07      	cmp	r3, #7
 800144c:	d014      	beq.n	8001478 <ControllerButtonInit+0x60>
		    ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverPosLogic);
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	18d6      	adds	r6, r2, r3
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <ControllerButtonInit+0xa4>)
 800145e:	7bfd      	ldrb	r5, [r7, #15]
 8001460:	466c      	mov	r4, sp
 8001462:	f103 0208 	add.w	r2, r3, #8
 8001466:	ca07      	ldmia	r2, {r0, r1, r2}
 8001468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800146c:	cb0c      	ldmia	r3, {r2, r3}
 800146e:	4631      	mov	r1, r6
 8001470:	4628      	mov	r0, r5
 8001472:	f7ff fbd7 	bl	8000c24 <ButtonInit>
 8001476:	e013      	b.n	80014a0 <ControllerButtonInit+0x88>
		} else {
			ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverNegLogic);
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	18d6      	adds	r6, r2, r3
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <ControllerButtonInit+0xa8>)
 8001488:	7bfd      	ldrb	r5, [r7, #15]
 800148a:	466c      	mov	r4, sp
 800148c:	f103 0208 	add.w	r2, r3, #8
 8001490:	ca07      	ldmia	r2, {r0, r1, r2}
 8001492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001496:	cb0c      	ldmia	r3, {r2, r3}
 8001498:	4631      	mov	r1, r6
 800149a:	4628      	mov	r0, r5
 800149c:	f7ff fbc2 	bl	8000c24 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d9bc      	bls.n	8001426 <ControllerButtonInit+0xe>
		}
	}

}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08009dec 	.word	0x08009dec
 80014bc:	08009d34 	.word	0x08009d34
 80014c0:	08009d48 	.word	0x08009d48

080014c4 <ControllerTriggerInit>:

static void ControllerTriggerInit(FitnessControllerHandle_t *FitnessController){
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
	TriggerInit(&FitnessController->Triggers[XINPUT_LEFTANALOG_INDEX], TriggerIO_Driver1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <ControllerTriggerInit+0x4c>)
 80014d4:	466d      	mov	r5, sp
 80014d6:	f103 020c 	add.w	r2, r3, #12
 80014da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014de:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fc3d 	bl	8000d64 <TriggerInit>
	TriggerInit(&FitnessController->Triggers[XINPUT_RIGHTANALOG_INDEX], TriggerIO_Driver2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <ControllerTriggerInit+0x50>)
 80014f2:	466d      	mov	r5, sp
 80014f4:	f103 020c 	add.w	r2, r3, #12
 80014f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fc2e 	bl	8000d64 <TriggerInit>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	08009d5c 	.word	0x08009d5c
 8001514:	08009d70 	.word	0x08009d70

08001518 <ControllerStickInit>:

static void ControllerStickInit(FitnessControllerHandle_t *FitnessController){
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
   AnalogStickInit(&FitnessController->Sticks[XINPUT_LEFTANALOG_INDEX], AnalogStickIO_Driver1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <ControllerStickInit+0x4c>)
 8001528:	466d      	mov	r5, sp
 800152a:	f103 020c 	add.w	r2, r3, #12
 800152e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fa73 	bl	8000a24 <AnalogStickInit>
   AnalogStickInit(&FitnessController->Sticks[XINPUT_RIGHTANALOG_INDEX], AnalogStickIO_Driver2);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <ControllerStickInit+0x50>)
 8001546:	466d      	mov	r5, sp
 8001548:	f103 020c 	add.w	r2, r3, #12
 800154c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001550:	e885 0003 	stmia.w	r5, {r0, r1}
 8001554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fa64 	bl	8000a24 <AnalogStickInit>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	08009c9c 	.word	0x08009c9c
 8001568:	08009cb0 	.word	0x08009cb0

0800156c <AddHIDService>:
};

static HIDServiceStatus_t AddHIDCharacteristics(void);
static HIDServiceStatus_t InitHIDCharacteristicValues(void);

HIDServiceStatus_t AddHIDService(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af02      	add	r7, sp, #8
	tBleStatus status;
	HIDServiceStatus_t ret;
	uint16_t uuid = HID_SERVICE_UUID;
 8001572:	f641 0309 	movw	r3, #6153	; 0x1809
 8001576:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &HidServiceHandle);
 8001578:	1d39      	adds	r1, r7, #4
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <AddHIDService+0x44>)
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2310      	movs	r3, #16
 8001580:	2201      	movs	r2, #1
 8001582:	2001      	movs	r0, #1
 8001584:	f006 f994 	bl	80078b0 <aci_gatt_add_serv>
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <AddHIDService+0x30>
		printf("Adding HID Service Failed\n\r");
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <AddHIDService+0x48>)
 8001594:	f007 f9a4 	bl	80088e0 <iprintf>
		return HID_AddServiceErr;
 8001598:	2304      	movs	r3, #4
 800159a:	e004      	b.n	80015a6 <AddHIDService+0x3a>
	}
	ret = AddHIDCharacteristics();
 800159c:	f000 f80c 	bl	80015b8 <AddHIDCharacteristics>
 80015a0:	4603      	mov	r3, r0
 80015a2:	71bb      	strb	r3, [r7, #6]
    return ret;
 80015a4:	79bb      	ldrb	r3, [r7, #6]

}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000408 	.word	0x20000408
 80015b4:	08009c40 	.word	0x08009c40

080015b8 <AddHIDCharacteristics>:

uint16_t GetHIDServiceHandle(void){
	return HidServiceHandle;
}

static HIDServiceStatus_t AddHIDCharacteristics(void){
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b08b      	sub	sp, #44	; 0x2c
 80015bc:	af06      	add	r7, sp, #24
	tBleStatus status;
	HIDServiceStatus_t ret;
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e040      	b.n	8001646 <AddHIDCharacteristics+0x8e>
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <AddHIDCharacteristics+0xa8>)
 80015c6:	881c      	ldrh	r4, [r3, #0]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4a26      	ldr	r2, [pc, #152]	; (8001664 <AddHIDCharacteristics+0xac>)
 80015cc:	5cd5      	ldrb	r5, [r2, r3]
        		                   HIDCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&HIDCharUUIDLookUpTable[i],  //UUID Value
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4a25      	ldr	r2, [pc, #148]	; (8001668 <AddHIDCharacteristics+0xb0>)
 80015d4:	189e      	adds	r6, r3, r2
								   HIDCharValueLenLookUpTable[i],               //Char Value Length
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <AddHIDCharacteristics+0xb4>)
 80015da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80015de:	fa5f fc83 	uxtb.w	ip, r3
				                   HIDCharPropertiesLookUpTable[i],             //Char Properties
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <AddHIDCharacteristics+0xb8>)
 80015e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	4920      	ldr	r1, [pc, #128]	; (8001674 <AddHIDCharacteristics+0xbc>)
 80015f2:	5c8a      	ldrb	r2, [r1, r2]
 80015f4:	7bf9      	ldrb	r1, [r7, #15]
 80015f6:	4820      	ldr	r0, [pc, #128]	; (8001678 <AddHIDCharacteristics+0xc0>)
 80015f8:	5c41      	ldrb	r1, [r0, r1]
				                   HIDCharPermissionsLookUpTable[i],            //Char SecPermissions
								   HID_CharNotifyModeLookUpTable[i],            //Char Application (Server Side)Notify Mode e.g. Will the BLE Controller Notify me when a r/w occurs
				                   16,                                          //Encyption Key Size
				                   0,                                           //Does the value field have variable length? 1= yes, 0 = no
				                   &HIDCharHandleLookUpTable[i]);               //HID Char Handle Address
 80015fa:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80015fc:	0040      	lsls	r0, r0, #1
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <AddHIDCharacteristics+0xc4>)
 8001600:	4418      	add	r0, r3
 8001602:	9005      	str	r0, [sp, #20]
 8001604:	2000      	movs	r0, #0
 8001606:	9004      	str	r0, [sp, #16]
 8001608:	2010      	movs	r0, #16
 800160a:	9003      	str	r0, [sp, #12]
 800160c:	9102      	str	r1, [sp, #8]
 800160e:	9201      	str	r2, [sp, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4663      	mov	r3, ip
 8001616:	4632      	mov	r2, r6
 8001618:	4629      	mov	r1, r5
 800161a:	4620      	mov	r0, r4
 800161c:	f006 f9d1 	bl	80079c2 <aci_gatt_add_char>
 8001620:	4603      	mov	r3, r0
 8001622:	737b      	strb	r3, [r7, #13]
        if(status != BLE_STATUS_SUCCESS){
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <AddHIDCharacteristics+0x88>
        	printf(HIDCharErrorStringLookUpTable[i]);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <AddHIDCharacteristics+0xc8>)
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	4618      	mov	r0, r3
 8001634:	f007 f954 	bl	80088e0 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <AddHIDCharacteristics+0xcc>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	e00a      	b.n	8001656 <AddHIDCharacteristics+0x9e>
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d9bb      	bls.n	80015c4 <AddHIDCharacteristics+0xc>
        }
    }
    ret = InitHIDCharacteristicValues();
 800164c:	f000 f81c 	bl	8001688 <InitHIDCharacteristicValues>
 8001650:	4603      	mov	r3, r0
 8001652:	73bb      	strb	r3, [r7, #14]
    return ret;
 8001654:	7bbb      	ldrb	r3, [r7, #14]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165e:	bf00      	nop
 8001660:	20000408 	.word	0x20000408
 8001664:	08009e48 	.word	0x08009e48
 8001668:	08009e4c 	.word	0x08009e4c
 800166c:	20000038 	.word	0x20000038
 8001670:	20000040 	.word	0x20000040
 8001674:	08009e54 	.word	0x08009e54
 8001678:	08009e58 	.word	0x08009e58
 800167c:	2000040c 	.word	0x2000040c
 8001680:	20000048 	.word	0x20000048
 8001684:	08009e5c 	.word	0x08009e5c

08001688 <InitHIDCharacteristicValues>:

static HIDServiceStatus_t InitHIDCharacteristicValues(void){
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b087      	sub	sp, #28
 800168c:	af04      	add	r7, sp, #16
	tBleStatus status;

	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
 8001692:	e032      	b.n	80016fa <InitHIDCharacteristicValues+0x72>

		if(HIDCharValueLenLookUpTable[i]){
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <InitHIDCharacteristicValues+0x84>)
 8001698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d018      	beq.n	80016d2 <InitHIDCharacteristicValues+0x4a>
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <InitHIDCharacteristicValues+0x88>)
 80016a2:	8818      	ldrh	r0, [r3, #0]
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <InitHIDCharacteristicValues+0x8c>)
 80016a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														0,                                 //The offset from which the attribute value has to be updated
														0,
														0,
														HIDCharValueLenLookUpTable[i],     //Length of the value to be updated
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <InitHIDCharacteristicValues+0x84>)
 80016b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	79ba      	ldrb	r2, [r7, #6]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 80016b8:	4c17      	ldr	r4, [pc, #92]	; (8001718 <InitHIDCharacteristicValues+0x90>)
 80016ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 80016be:	9202      	str	r2, [sp, #8]
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	2200      	movs	r2, #0
 80016ca:	f006 fb14 	bl	8007cf6 <aci_gatt_update_char_value_ext_IDB05A1>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
		}

        if(status != BLE_STATUS_SUCCESS){
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00d      	beq.n	80016f4 <InitHIDCharacteristicValues+0x6c>
        	printf("Error Initializing Characteristic\n\r");
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <InitHIDCharacteristicValues+0x94>)
 80016da:	f007 f901 	bl	80088e0 <iprintf>
        	printf(HIDCharErrorStringLookUpTable[i]);
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <InitHIDCharacteristicValues+0x98>)
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f007 f8fa 	bl	80088e0 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <InitHIDCharacteristicValues+0x9c>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	e006      	b.n	8001702 <InitHIDCharacteristicValues+0x7a>
	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	3301      	adds	r3, #1
 80016f8:	71bb      	strb	r3, [r7, #6]
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d9c9      	bls.n	8001694 <InitHIDCharacteristicValues+0xc>
        }
	}
	return HID_OK;
 8001700:	2305      	movs	r3, #5
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	20000038 	.word	0x20000038
 8001710:	20000408 	.word	0x20000408
 8001714:	2000040c 	.word	0x2000040c
 8001718:	20000058 	.word	0x20000058
 800171c:	08009c5c 	.word	0x08009c5c
 8001720:	20000048 	.word	0x20000048
 8001724:	08009e5c 	.word	0x08009e5c

08001728 <SendHIDData>:

void SendHIDData(void){
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af04      	add	r7, sp, #16
	aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <SendHIDData+0x30>)
 8001730:	8818      	ldrh	r0, [r3, #0]
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <SendHIDData+0x34>)
 8001734:	88d9      	ldrh	r1, [r3, #6]
					                            HIDCharHandleLookUpTable[HID_REPORT_INDEX],       //Handle of the characteristic.
												0,                                                //The offset from which the attribute value has to be updated
												0,
												0,
												HIDCharValueLenLookUpTable[HID_REPORT_INDEX],     //Length of the value to be updated
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SendHIDData+0x38>)
 8001738:	88db      	ldrh	r3, [r3, #6]
	aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 800173a:	b2db      	uxtb	r3, r3
												HIDCharValueLookUpTable[HID_REPORT_INDEX]);       //Updated characteristic value
 800173c:	4a09      	ldr	r2, [pc, #36]	; (8001764 <SendHIDData+0x3c>)
 800173e:	68d2      	ldr	r2, [r2, #12]
	aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8001740:	9202      	str	r2, [sp, #8]
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	f006 fad3 	bl	8007cf6 <aci_gatt_update_char_value_ext_IDB05A1>
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000408 	.word	0x20000408
 800175c:	2000040c 	.word	0x2000040c
 8001760:	20000038 	.word	0x20000038
 8001764:	20000058 	.word	0x20000058

08001768 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0ac      	sub	sp, #176	; 0xb0
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2288      	movs	r2, #136	; 0x88
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f007 f8a1 	bl	80088d0 <memset>
  if(adcHandle->Instance==ADC1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a3c      	ldr	r2, [pc, #240]	; (8001884 <HAL_ADC_MspInit+0x11c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d171      	bne.n	800187c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800179e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80017ae:	2318      	movs	r3, #24
 80017b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017b2:	2307      	movs	r3, #7
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 f8cd 	bl	8005968 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017d4:	f000 fc1c 	bl	8002010 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_ADC_MspInit+0x120>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LeftStick_X_Pin|LeftStick_Y_Pin|RightStick_X_Pin|RightStick_Y_Pin
 8001808:	233f      	movs	r3, #63	; 0x3f
 800180a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |LeftTrigger_Pin|RightTrigger_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800180e:	230b      	movs	r3, #11
 8001810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800181e:	4619      	mov	r1, r3
 8001820:	481a      	ldr	r0, [pc, #104]	; (800188c <HAL_ADC_MspInit+0x124>)
 8001822:	f002 ff3b 	bl	800469c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_ADC_MspInit+0x12c>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_ADC_MspInit+0x128>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_ADC_MspInit+0x128>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_ADC_MspInit+0x128>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001856:	2220      	movs	r2, #32
 8001858:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_ADC_MspInit+0x128>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001862:	f002 fc87 	bl	8004174 <HAL_DMA_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800186c:	f000 fbd0 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
 8001876:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_ADC_MspInit+0x128>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	37b0      	adds	r7, #176	; 0xb0
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50040000 	.word	0x50040000
 8001888:	40021000 	.word	0x40021000
 800188c:	48000800 	.word	0x48000800
 8001890:	20000478 	.word	0x20000478
 8001894:	40020008 	.word	0x40020008

08001898 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(){
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
	  ADC_MultiModeTypeDef multimode = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]

	  hadc1.Instance = ADC1;
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <ADC1_Init+0x170>)
 80018bc:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <ADC1_Init+0x174>)
 80018be:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018c0:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <ADC1_Init+0x170>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <ADC1_Init+0x170>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <ADC1_Init+0x170>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <ADC1_Init+0x170>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <ADC1_Init+0x170>)
 80018da:	2204      	movs	r2, #4
 80018dc:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <ADC1_Init+0x170>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80018e4:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <ADC1_Init+0x170>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 6;
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <ADC1_Init+0x170>)
 80018ec:	2206      	movs	r2, #6
 80018ee:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <ADC1_Init+0x170>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <ADC1_Init+0x170>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <ADC1_Init+0x170>)
 8001900:	2200      	movs	r2, #0
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <ADC1_Init+0x170>)
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <ADC1_Init+0x170>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <ADC1_Init+0x170>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191a:	483b      	ldr	r0, [pc, #236]	; (8001a08 <ADC1_Init+0x170>)
 800191c:	f001 f92c 	bl	8002b78 <HAL_ADC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <ADC1_Init+0x92>
	  {
	    Error_Handler();
 8001926:	f000 fb73 	bl	8002010 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4834      	ldr	r0, [pc, #208]	; (8001a08 <ADC1_Init+0x170>)
 8001936:	f002 f9fd 	bl	8003d34 <HAL_ADCEx_MultiModeConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001940:	f000 fb66 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <ADC1_Init+0x178>)
 8001946:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001948:	2306      	movs	r3, #6
 800194a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800194c:	2304      	movs	r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001950:	237f      	movs	r3, #127	; 0x7f
 8001952:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001954:	2304      	movs	r3, #4
 8001956:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4829      	ldr	r0, [pc, #164]	; (8001a08 <ADC1_Init+0x170>)
 8001962:	f001 fb9b 	bl	800309c <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <ADC1_Init+0xd8>
	  {
	    Error_Handler();
 800196c:	f000 fb50 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <ADC1_Init+0x17c>)
 8001972:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001974:	230c      	movs	r3, #12
 8001976:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4822      	ldr	r0, [pc, #136]	; (8001a08 <ADC1_Init+0x170>)
 800197e:	f001 fb8d 	bl	800309c <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <ADC1_Init+0xf4>
	  {
	    Error_Handler();
 8001988:	f000 fb42 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <ADC1_Init+0x180>)
 800198e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001990:	2312      	movs	r3, #18
 8001992:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <ADC1_Init+0x170>)
 800199a:	f001 fb7f 	bl	800309c <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <ADC1_Init+0x110>
	  {
	    Error_Handler();
 80019a4:	f000 fb34 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <ADC1_Init+0x184>)
 80019aa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019ac:	2318      	movs	r3, #24
 80019ae:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4814      	ldr	r0, [pc, #80]	; (8001a08 <ADC1_Init+0x170>)
 80019b6:	f001 fb71 	bl	800309c <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <ADC1_Init+0x12c>
	  {
	    Error_Handler();
 80019c0:	f000 fb26 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_13;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <ADC1_Init+0x188>)
 80019c6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <ADC1_Init+0x170>)
 80019d4:	f001 fb62 	bl	800309c <HAL_ADC_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <ADC1_Init+0x14a>
	  {
	    Error_Handler();
 80019de:	f000 fb17 	bl	8002010 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <ADC1_Init+0x18c>)
 80019e4:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 80019e6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80019ea:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <ADC1_Init+0x170>)
 80019f2:	f001 fb53 	bl	800309c <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <ADC1_Init+0x168>
	  {
	    Error_Handler();
 80019fc:	f000 fb08 	bl	8002010 <Error_Handler>
	  }
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000414 	.word	0x20000414
 8001a0c:	50040000 	.word	0x50040000
 8001a10:	04300002 	.word	0x04300002
 8001a14:	08600004 	.word	0x08600004
 8001a18:	0c900008 	.word	0x0c900008
 8001a1c:	10c00010 	.word	0x10c00010
 8001a20:	36902000 	.word	0x36902000
 8001a24:	3ac04000 	.word	0x3ac04000

08001a28 <ADC_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/* USER CODE BEGIN 2 */
void ADC_DMA_Init(){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <ADC_DMA_Init+0x38>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <ADC_DMA_Init+0x38>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6493      	str	r3, [r2, #72]	; 0x48
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <ADC_DMA_Init+0x38>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	200b      	movs	r0, #11
 8001a4c:	f002 fb3f 	bl	80040ce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a50:	200b      	movs	r0, #11
 8001a52:	f002 fb58 	bl	8004106 <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <BLE_GPIO_Init>:
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 2 */
void BLE_GPIO_Init(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	4bbc      	ldr	r3, [pc, #752]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4abb      	ldr	r2, [pc, #748]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001a80:	f043 0310 	orr.w	r3, r3, #16
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4bb9      	ldr	r3, [pc, #740]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4bb6      	ldr	r3, [pc, #728]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4ab5      	ldr	r2, [pc, #724]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4bb3      	ldr	r3, [pc, #716]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4aaf      	ldr	r2, [pc, #700]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4aa9      	ldr	r2, [pc, #676]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4aa3      	ldr	r2, [pc, #652]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <BLE_GPIO_Init+0x308>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001af8:	489d      	ldr	r0, [pc, #628]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001afa:	f003 f885 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001b04:	489b      	ldr	r0, [pc, #620]	; (8001d74 <BLE_GPIO_Init+0x310>)
 8001b06:	f003 f87f 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f241 0181 	movw	r1, #4225	; 0x1081
 8001b10:	4899      	ldr	r0, [pc, #612]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001b12:	f003 f879 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	4896      	ldr	r0, [pc, #600]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001b1e:	f003 f873 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001b28:	4894      	ldr	r0, [pc, #592]	; (8001d7c <BLE_GPIO_Init+0x318>)
 8001b2a:	f003 f86d 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f003 f866 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2120      	movs	r1, #32
 8001b40:	488c      	ldr	r0, [pc, #560]	; (8001d74 <BLE_GPIO_Init+0x310>)
 8001b42:	f003 f861 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4889      	ldr	r0, [pc, #548]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001b4c:	f003 f85c 	bl	8004c08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
	  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001b50:	f240 1315 	movw	r3, #277	; 0x115
 8001b54:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4881      	ldr	r0, [pc, #516]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001b6a:	f002 fd97 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001b6e:	236a      	movs	r3, #106	; 0x6a
 8001b70:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b76:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	487b      	ldr	r0, [pc, #492]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001b84:	f002 fd8a 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b92:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4877      	ldr	r0, [pc, #476]	; (8001d7c <BLE_GPIO_Init+0x318>)
 8001ba0:	f002 fd7c 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin */
	  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001ba4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ba8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	486b      	ldr	r0, [pc, #428]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001bc2:	f002 fd6b 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
	                           PEPin PEPin */
	  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001bc6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001bca:	617b      	str	r3, [r7, #20]
	                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bd8:	230a      	movs	r3, #10
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4863      	ldr	r0, [pc, #396]	; (8001d70 <BLE_GPIO_Init+0x30c>)
 8001be4:	f002 fd5a 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bec:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	485b      	ldr	r0, [pc, #364]	; (8001d74 <BLE_GPIO_Init+0x310>)
 8001c06:	f002 fd49 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
	                           PBPin */
	  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001c0a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8001c0e:	617b      	str	r3, [r7, #20]
	                          |SPSGRF_915_SPI3_CSN_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4854      	ldr	r0, [pc, #336]	; (8001d74 <BLE_GPIO_Init+0x310>)
 8001c24:	f002 fd3a 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin */
	  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c2c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	484c      	ldr	r0, [pc, #304]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001c46:	f002 fd29 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8001c4a:	f648 4304 	movw	r3, #35844	; 0x8c04
 8001c4e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c54:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4845      	ldr	r0, [pc, #276]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001c62:	f002 fd1b 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001c66:	f243 0381 	movw	r3, #12417	; 0x3081
 8001c6a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	483e      	ldr	r0, [pc, #248]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001c80:	f002 fd0c 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PCPin PCPin */
	  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001c84:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c88:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4837      	ldr	r0, [pc, #220]	; (8001d7c <BLE_GPIO_Init+0x318>)
 8001c9e:	f002 fcfd 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PCPin PCPin */
	  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ca2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ca6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cac:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4830      	ldr	r0, [pc, #192]	; (8001d7c <BLE_GPIO_Init+0x318>)
 8001cba:	f002 fcef 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f002 fcdf 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf6:	f002 fcd1 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PAPin PAPin PAPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001cfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cfe:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f002 fcbf 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001d3a:	f002 fcaf 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001d3e:	2378      	movs	r3, #120	; 0x78
 8001d40:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <BLE_GPIO_Init+0x314>)
 8001d5a:	f002 fc9f 	bl	800469c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d62:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e00a      	b.n	8001d80 <BLE_GPIO_Init+0x31c>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48001000 	.word	0x48001000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000c00 	.word	0x48000c00
 8001d7c:	48000800 	.word	0x48000800
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <BLE_GPIO_Init+0x35c>)
 8001d94:	f002 fc82 	bl	800469c <HAL_GPIO_Init>
	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f002 f996 	bl	80040ce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001da2:	2017      	movs	r0, #23
 8001da4:	f002 f9af 	bl	8004106 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f002 f98e 	bl	80040ce <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001db2:	2028      	movs	r0, #40	; 0x28
 8001db4:	f002 f9a7 	bl	8004106 <HAL_NVIC_EnableIRQ>
}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <Button_GPIO_Init>:

void Button_GPIO_Init(void){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dda:	4b40      	ldr	r3, [pc, #256]	; (8001edc <Button_GPIO_Init+0x118>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <Button_GPIO_Init+0x118>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <Button_GPIO_Init+0x118>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <Button_GPIO_Init+0x118>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a39      	ldr	r2, [pc, #228]	; (8001edc <Button_GPIO_Init+0x118>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a27      	ldr	r2, [pc, #156]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <Button_GPIO_Init+0x118>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_DOWN_Pin|XINPUT_GAMEPAD_DPAD_UP_Pin|XINPUT_GAMEPAD_A_Pin|XINPUT_GAMEPAD_START_Pin
 8001e52:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001e56:	617b      	str	r3, [r7, #20]
	                          |XINPUT_GAMEPAD_RIGHT_THUMB_Pin|XINPUT_GAMEPAD_Y_Pin|XINPUT_GAMEPAD_X_Pin|XINPUT_GAMEPAD_B_Pin
	                          |XINPUT_GAMEPAD_RIGHT_SHOULDER_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6a:	f002 fc17 	bl	800469c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_RIGHT_THUMB_Pin;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f002 fc0a 	bl	800469c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_LEFT_Pin;
 8001e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(XINPUT_GAMEPAD_DPAD_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <Button_GPIO_Init+0x11c>)
 8001e9e:	f002 fbfd 	bl	800469c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_RIGHT_Pin|XINPUT_GAMEPAD_LEFT_THUMB_Pin|XINPUT_GAMEPAD_LEFT_SHOULDER_Pin|XINPUT_GAMEPAD_BACK_Pin;
 8001ea2:	2317      	movs	r3, #23
 8001ea4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <Button_GPIO_Init+0x120>)
 8001eb6:	f002 fbf1 	bl	800469c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_LEFT_THUMB_Pin;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <Button_GPIO_Init+0x120>)
 8001ece:	f002 fbe5 	bl	800469c <HAL_GPIO_Init>

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000c00 	.word	0x48000c00
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <ADC_GPIO_Init+0x2c>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <ADC_GPIO_Init+0x2c>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <ADC_GPIO_Init+0x2c>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1c:	f000 fb70 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f20:	f000 f814 	bl	8001f4c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_DMA_Init();
  MX_USART1_UART_Init();
 8001f24:	f000 f9b0 	bl	8002288 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BLE_GPIO_Init();
 8001f28:	f7ff fd9c 	bl	8001a64 <BLE_GPIO_Init>
  FitnessControllerBLEInit();
 8001f2c:	f7ff f894 	bl	8001058 <FitnessControllerBLEInit>
  printf("Initialization Success!\n");
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <main+0x2c>)
 8001f32:	f006 fd5b 	bl	80089ec <puts>
  FitnessControllerHardwareInit(&FitnessController);
 8001f36:	4804      	ldr	r0, [pc, #16]	; (8001f48 <main+0x30>)
 8001f38:	f7ff f936 	bl	80011a8 <FitnessControllerHardwareInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	FitnessController_BLE_Process();
 8001f3c:	f7ff f916 	bl	800116c <FitnessController_BLE_Process>
 8001f40:	e7fc      	b.n	8001f3c <main+0x24>
 8001f42:	bf00      	nop
 8001f44:	08009c80 	.word	0x08009c80
 8001f48:	20000210 	.word	0x20000210

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	; 0x58
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2244      	movs	r2, #68	; 0x44
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f006 fcb8 	bl	80088d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f72:	f002 fea3 	bl	8004cbc <HAL_PWREx_ControlVoltageScaling>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f7c:	f000 f848 	bl	8002010 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f80:	f002 fe7e 	bl	8004c80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <SystemClock_Config+0xc0>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a20      	ldr	r2, [pc, #128]	; (800200c <SystemClock_Config+0xc0>)
 8001f8c:	f023 0318 	bic.w	r3, r3, #24
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001f94:	2314      	movs	r3, #20
 8001f96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fa4:	2360      	movs	r3, #96	; 0x60
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fac:	2301      	movs	r3, #1
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fb4:	2328      	movs	r3, #40	; 0x28
 8001fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fecd 	bl	8004d68 <HAL_RCC_OscConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fd4:	f000 f81c 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd8:	230f      	movs	r3, #15
 8001fda:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fa95 	bl	8005520 <HAL_RCC_ClockConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ffc:	f000 f808 	bl	8002010 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002000:	f003 ff9c 	bl	8005f3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002004:	bf00      	nop
 8002006:	3758      	adds	r7, #88	; 0x58
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002018:	e7fe      	b.n	8002018 <Error_Handler+0x8>
	...

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_MspInit+0x44>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_MspInit+0x44>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6613      	str	r3, [r2, #96]	; 0x60
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_MspInit+0x44>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x44>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x44>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x44>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 fafa 	bl	80026a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA1_Channel1_IRQHandler+0x10>)
 80020be:	f002 f9af 	bl	8004420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000478 	.word	0x20000478

080020cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020d0:	2020      	movs	r0, #32
 80020d2:	f002 fdb1 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80020d6:	4806      	ldr	r0, [pc, #24]	; (80020f0 <EXTI9_5_IRQHandler+0x24>)
 80020d8:	f002 fab0 	bl	800463c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020dc:	2080      	movs	r0, #128	; 0x80
 80020de:	f002 fdab 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020e6:	f002 fda7 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200000f4 	.word	0x200000f4

080020f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020fc:	f002 fd9c 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002100:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002104:	f002 fd98 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002108:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800210c:	f002 fd94 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002110:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002114:	f002 fd90 	bl	8004c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e00a      	b.n	8002144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800212e:	f3af 8000 	nop.w
 8002132:	4601      	mov	r1, r0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf0      	blt.n	800212e <_read+0x12>
	}

return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e009      	b.n	800217c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f917 	bl	80023a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf1      	blt.n	8002168 <_write+0x12>
	}
	return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_close>:

int _close(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b6:	605a      	str	r2, [r3, #4]
	return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_isatty>:

int _isatty(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f006 fb1a 	bl	8008860 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20018000 	.word	0x20018000
 8002258:	00000400 	.word	0x00000400
 800225c:	200004d0 	.word	0x200004d0
 8002260:	20000b40 	.word	0x20000b40

08002264 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <MX_USART1_UART_Init+0x5c>)
 8002290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART1_UART_Init+0x58>)
 80022cc:	f004 fc4a 	bl	8006b64 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022d6:	f7ff fe9b 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200004d4 	.word	0x200004d4
 80022e4:	40013800 	.word	0x40013800

080022e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0ac      	sub	sp, #176	; 0xb0
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2288      	movs	r2, #136	; 0x88
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f006 fae1 	bl	80088d0 <memset>
  if(uartHandle->Instance==USART1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_UART_MspInit+0xb0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d13a      	bne.n	800238e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002318:	2301      	movs	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800231c:	2300      	movs	r3, #0
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fb1f 	bl	8005968 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002330:	f7ff fe6e 	bl	8002010 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_UART_MspInit+0xb4>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_UART_MspInit+0xb4>)
 800233a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233e:	6613      	str	r3, [r2, #96]	; 0x60
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_UART_MspInit+0xb4>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_UART_MspInit+0xb4>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_UART_MspInit+0xb4>)
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_UART_MspInit+0xb4>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800237c:	2307      	movs	r3, #7
 800237e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_UART_MspInit+0xb8>)
 800238a:	f002 f987 	bl	800469c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800238e:	bf00      	nop
 8002390:	37b0      	adds	r7, #176	; 0xb0
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40013800 	.word	0x40013800
 800239c:	40021000 	.word	0x40021000
 80023a0:	48000400 	.word	0x48000400

080023a4 <__io_putchar>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 10);
 80023ac:	1d39      	adds	r1, r7, #4
 80023ae:	230a      	movs	r3, #10
 80023b0:	2201      	movs	r2, #1
 80023b2:	4804      	ldr	r0, [pc, #16]	; (80023c4 <__io_putchar+0x20>)
 80023b4:	f004 fc24 	bl	8006c00 <HAL_UART_Transmit>
	return ch;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200004d4 	.word	0x200004d4

080023c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023cc:	f7ff ff4a 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d2:	490d      	ldr	r1, [pc, #52]	; (8002408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <LoopForever+0xe>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e8:	4c0a      	ldr	r4, [pc, #40]	; (8002414 <LoopForever+0x16>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f6:	f006 fa39 	bl	800886c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fa:	f7ff fd8d 	bl	8001f18 <main>

080023fe <LoopForever>:

LoopForever:
    b LoopForever
 80023fe:	e7fe      	b.n	80023fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800240c:	08009f50 	.word	0x08009f50
  ldr r2, =_sbss
 8002410:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002414:	20000b40 	.word	0x20000b40

08002418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_2_IRQHandler>
	...

0800241c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <BSP_SPI3_Init+0x54>)
 8002428:	4a12      	ldr	r2, [pc, #72]	; (8002474 <BSP_SPI3_Init+0x58>)
 800242a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <BSP_SPI3_Init+0x5c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4911      	ldr	r1, [pc, #68]	; (8002478 <BSP_SPI3_Init+0x5c>)
 8002434:	600a      	str	r2, [r1, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <BSP_SPI3_Init+0x54>)
 800243c:	f004 fa20 	bl	8006880 <HAL_SPI_GetState>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10e      	bne.n	8002464 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8002446:	480a      	ldr	r0, [pc, #40]	; (8002470 <BSP_SPI3_Init+0x54>)
 8002448:	f000 f882 	bl	8002550 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d108      	bne.n	8002464 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <BSP_SPI3_Init+0x54>)
 8002454:	f000 f83a 	bl	80024cc <MX_SPI3_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800245e:	f06f 0307 	mvn.w	r3, #7
 8002462:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000558 	.word	0x20000558
 8002474:	40003c00 	.word	0x40003c00
 8002478:	200005bc 	.word	0x200005bc

0800247c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <BSP_SPI3_SendRecv+0x3c>)
 800249c:	f003 ffdd 	bl	800645a <HAL_SPI_TransmitReceive>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80024a6:	f06f 0305 	mvn.w	r3, #5
 80024aa:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000558 	.word	0x20000558

080024bc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80024c0:	f000 f906 	bl	80026d0 <HAL_GetTick>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <MX_SPI3_Init+0x80>)
 80024dc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024f2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002506:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2218      	movs	r2, #24
 800250c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2207      	movs	r2, #7
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2208      	movs	r2, #8
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f003 fee4 	bl	8006300 <HAL_SPI_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40003c00 	.word	0x40003c00

08002550 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <SPI3_MspInit+0xa8>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <SPI3_MspInit+0xa8>)
 800255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <SPI3_MspInit+0xa8>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <SPI3_MspInit+0xa8>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <SPI3_MspInit+0xa8>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <SPI3_MspInit+0xa8>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8002588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800259a:	2306      	movs	r3, #6
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4815      	ldr	r0, [pc, #84]	; (80025fc <SPI3_MspInit+0xac>)
 80025a6:	f002 f879 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80025aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80025bc:	2306      	movs	r3, #6
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <SPI3_MspInit+0xac>)
 80025c8:	f002 f868 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80025cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80025de:	2306      	movs	r3, #6
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <SPI3_MspInit+0xac>)
 80025ea:	f002 f857 	bl	800469c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000800 	.word	0x48000800

08002600 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260a:	2003      	movs	r0, #3
 800260c:	f001 fd54 	bl	80040b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002610:	2000      	movs	r0, #0
 8002612:	f000 f80d 	bl	8002630 <HAL_InitTick>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	e001      	b.n	8002626 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002622:	f7ff fcfb 	bl	800201c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002626:	79fb      	ldrb	r3, [r7, #7]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_InitTick+0x6c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d023      	beq.n	800268c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_InitTick+0x70>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_InitTick+0x6c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fd6f 	bl	800413e <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d809      	bhi.n	8002680 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f001 fd2b 	bl	80040ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_InitTick+0x74>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e007      	b.n	8002690 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e004      	b.n	8002690 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e001      	b.n	8002690 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000070 	.word	0x20000070
 80026a0:	20000068 	.word	0x20000068
 80026a4:	2000006c 	.word	0x2000006c

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000070 	.word	0x20000070
 80026cc:	200005c0 	.word	0x200005c0

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200005c0 	.word	0x200005c0

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff ffee 	bl	80026d0 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d005      	beq.n	800270e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_Delay+0x44>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270e:	bf00      	nop
 8002710:	f7ff ffde 	bl	80026d0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d8f7      	bhi.n	8002710 <HAL_Delay+0x28>
  {
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000070 	.word	0x20000070

08002730 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	609a      	str	r2, [r3, #8]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3360      	adds	r3, #96	; 0x60
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <LL_ADC_SetOffset+0x44>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	03fff000 	.word	0x03fff000

080027e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3360      	adds	r3, #96	; 0x60
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	431a      	orrs	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3330      	adds	r3, #48	; 0x30
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	4413      	add	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	211f      	movs	r1, #31
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 011f 	and.w	r1, r3, #31
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	431a      	orrs	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3314      	adds	r3, #20
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0e5b      	lsrs	r3, r3, #25
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0d1b      	lsrs	r3, r3, #20
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2107      	movs	r1, #7
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0318 	and.w	r3, r3, #24
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <LL_ADC_SetChannelSingleDiff+0x44>)
 800293c:	40d9      	lsrs	r1, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	400b      	ands	r3, r1
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0007ffff 	.word	0x0007ffff

08002960 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 031f 	and.w	r3, r3, #31
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800298c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6093      	str	r3, [r2, #8]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d101      	bne.n	80029ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a54:	f043 0202 	orr.w	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_IsEnabled+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_IsEnabled+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_IsDisableOngoing+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_IsDisableOngoing+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d101      	bne.n	8002b1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e136      	b.n	8002e00 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fde1 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fef1 	bl	80029a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fed7 	bl	800297c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff0c 	bl	80029f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fef0 	bl	80029c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be8:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <HAL_ADC_Init+0x290>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <HAL_ADC_Init+0x294>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff feee 	bl	80029f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff62 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8002c40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 80cf 	bne.w	8002dee <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 80cb 	bne.w	8002dee <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fefb 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d115      	bne.n	8002ca4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	4865      	ldr	r0, [pc, #404]	; (8002e10 <HAL_ADC_Init+0x298>)
 8002c7a:	f7ff fef5 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	4864      	ldr	r0, [pc, #400]	; (8002e14 <HAL_ADC_Init+0x29c>)
 8002c82:	f7ff fef1 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	431c      	orrs	r4, r3
 8002c8a:	4863      	ldr	r0, [pc, #396]	; (8002e18 <HAL_ADC_Init+0x2a0>)
 8002c8c:	f7ff feec 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4323      	orrs	r3, r4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	485f      	ldr	r0, [pc, #380]	; (8002e1c <HAL_ADC_Init+0x2a4>)
 8002ca0:	f7ff fd46 	bl	8002730 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7e5b      	ldrb	r3, [r3, #25]
 8002ca8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002cba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	045b      	lsls	r3, r3, #17
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_ADC_Init+0x2a8>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fef5 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8002d1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff16 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8002d26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d13d      	bne.n	8002daa <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d13a      	bne.n	8002daa <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d50:	f023 0302 	bic.w	r3, r3, #2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d118      	bne.n	8002d9a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	611a      	str	r2, [r3, #16]
 8002d98:	e007      	b.n	8002daa <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10c      	bne.n	8002dcc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f023 010f 	bic.w	r1, r3, #15
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dca:	e007      	b.n	8002ddc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020f 	bic.w	r2, r2, #15
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f023 0303 	bic.w	r3, r3, #3
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
 8002dec:	e007      	b.n	8002dfe <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3724      	adds	r7, #36	; 0x24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	20000068 	.word	0x20000068
 8002e0c:	053e2d63 	.word	0x053e2d63
 8002e10:	50040000 	.word	0x50040000
 8002e14:	50040100 	.word	0x50040100
 8002e18:	50040200 	.word	0x50040200
 8002e1c:	50040300 	.word	0x50040300
 8002e20:	fff0c007 	.word	0xfff0c007

08002e24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e30:	4853      	ldr	r0, [pc, #332]	; (8002f80 <HAL_ADC_Start_DMA+0x15c>)
 8002e32:	f7ff fd95 	bl	8002960 <LL_ADC_GetMultimode>
 8002e36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe61 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 8093 	bne.w	8002f70 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_Start_DMA+0x34>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e08e      	b.n	8002f76 <HAL_ADC_Start_DMA+0x152>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <HAL_ADC_Start_DMA+0x160>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d008      	beq.n	8002e7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d002      	beq.n	8002e7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d172      	bne.n	8002f62 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fdb9 	bl	80039f4 <ADC_Enable>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d165      	bne.n	8002f58 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_ADC_Start_DMA+0x164>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d002      	beq.n	8002eb0 <HAL_ADC_Start_DMA+0x8c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	e000      	b.n	8002eb2 <HAL_ADC_Start_DMA+0x8e>
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_ADC_Start_DMA+0x168>)
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d002      	beq.n	8002ec0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f023 0206 	bic.w	r2, r3, #6
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_ADC_Start_DMA+0x16c>)
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_ADC_Start_DMA+0x170>)
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_ADC_Start_DMA+0x174>)
 8002f02:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	221c      	movs	r2, #28
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0210 	orr.w	r2, r2, #16
 8002f22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3340      	adds	r3, #64	; 0x40
 8002f3e:	4619      	mov	r1, r3
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f001 f9ce 	bl	80042e4 <HAL_DMA_Start_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fdaf 	bl	8002ab4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f56:	e00d      	b.n	8002f74 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002f60:	e008      	b.n	8002f74 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f6e:	e001      	b.n	8002f74 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
 8002f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	50040300 	.word	0x50040300
 8002f84:	50040200 	.word	0x50040200
 8002f88:	50040100 	.word	0x50040100
 8002f8c:	50040000 	.word	0x50040000
 8002f90:	08003bbf 	.word	0x08003bbf
 8002f94:	08003c97 	.word	0x08003c97
 8002f98:	08003cb3 	.word	0x08003cb3

08002f9c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Stop_DMA+0x16>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e051      	b.n	8003056 <HAL_ADC_Stop_DMA+0xba>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fba:	2103      	movs	r1, #3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fc5d 	bl	800387c <ADC_ConversionStop>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d13f      	bne.n	800304c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d10f      	bne.n	800300a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 f9d8 	bl	80043a4 <HAL_DMA_Abort>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0210 	bic.w	r2, r2, #16
 8003018:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fd6d 	bl	8003b00 <ADC_Disable>
 8003026:	4603      	mov	r3, r0
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	e002      	b.n	8003032 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fd67 	bl	8003b00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0b6      	sub	sp, #216	; 0xd8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x22>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e3c7      	b.n	800384e <HAL_ADC_ConfigChannel+0x7b2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fd1a 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 83a8 	bne.w	8003828 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d824      	bhi.n	800312a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	3b02      	subs	r3, #2
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d81b      	bhi.n	8003122 <HAL_ADC_ConfigChannel+0x86>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_ADC_ConfigChannel+0x54>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003109 	.word	0x08003109
 80030f8:	08003111 	.word	0x08003111
 80030fc:	08003119 	.word	0x08003119
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	220c      	movs	r2, #12
 8003104:	605a      	str	r2, [r3, #4]
          break;
 8003106:	e011      	b.n	800312c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2212      	movs	r2, #18
 800310c:	605a      	str	r2, [r3, #4]
          break;
 800310e:	e00d      	b.n	800312c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2218      	movs	r2, #24
 8003114:	605a      	str	r2, [r3, #4]
          break;
 8003116:	e009      	b.n	800312c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311e:	605a      	str	r2, [r3, #4]
          break;
 8003120:	e004      	b.n	800312c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2206      	movs	r2, #6
 8003126:	605a      	str	r2, [r3, #4]
          break;
 8003128:	e000      	b.n	800312c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800312a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff fb95 	bl	8002868 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fcde 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8003148:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fcfe 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8003156:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 81a6 	bne.w	80034b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 81a1 	bne.w	80034b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	461a      	mov	r2, r3
 800317c:	f7ff fba0 	bl	80028c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	08db      	lsrs	r3, r3, #3
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00a      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031b2:	f7ff faf1 	bl	8002798 <LL_ADC_SetOffset>
 80031b6:	e17b      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fb0e 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x148>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fb03 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 021f 	and.w	r2, r3, #31
 80031e2:	e01e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x186>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff faf8 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800320a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e004      	b.n	8003220 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_ADC_ConfigChannel+0x19e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	e018      	b.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800324e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e004      	b.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800326c:	429a      	cmp	r2, r3
 800326e:	d106      	bne.n	800327e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fac7 	bl	800280c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff faab 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff faa0 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	e01e      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x24c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa95 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e004      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80032dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x264>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	e018      	b.n	8003332 <HAL_ADC_ConfigChannel+0x296>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e004      	b.n	8003332 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003332:	429a      	cmp	r2, r3
 8003334:	d106      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fa64 	bl	800280c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fa48 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x2d4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fa3d 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	e01e      	b.n	80033ae <HAL_ADC_ConfigChannel+0x312>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fa32 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800338e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80033a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x32a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	e016      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x358>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80033e6:	2320      	movs	r3, #32
 80033e8:	e004      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80033ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d106      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fa03 	bl	800280c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2103      	movs	r1, #3
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f9e7 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x396>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2103      	movs	r1, #3
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f9dc 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	e017      	b.n	8003462 <HAL_ADC_ConfigChannel+0x3c6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2103      	movs	r1, #3
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f9d1 	bl	80027e0 <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800344a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800344e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_ConfigChannel+0x3de>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	e011      	b.n	800349e <HAL_ADC_ConfigChannel+0x402>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800348a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e003      	b.n	800349e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800349e:	429a      	cmp	r2, r3
 80034a0:	d106      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2103      	movs	r1, #3
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f9ae 	bl	800280c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fad7 	bl	8002a68 <LL_ADC_IsEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 813f 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f7ff fa22 	bl	8002918 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a8e      	ldr	r2, [pc, #568]	; (8003714 <HAL_ADC_ConfigChannel+0x678>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f040 8130 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x46c>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e019      	b.n	800353c <HAL_ADC_ConfigChannel+0x4a0>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800351a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2b09      	cmp	r3, #9
 8003534:	bf94      	ite	ls
 8003536:	2301      	movls	r3, #1
 8003538:	2300      	movhi	r3, #0
 800353a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	2b00      	cmp	r3, #0
 800353e:	d079      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_ADC_ConfigChannel+0x4c0>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	3301      	adds	r3, #1
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355a:	e015      	b.n	8003588 <HAL_ADC_ConfigChannel+0x4ec>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800356e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003574:	2320      	movs	r3, #32
 8003576:	e003      	b.n	8003580 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3301      	adds	r3, #1
 8003582:	069b      	lsls	r3, r3, #26
 8003584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x50c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	3301      	adds	r3, #1
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	e017      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x53c>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	ea42 0103 	orr.w	r1, r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x562>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0e9b      	lsrs	r3, r3, #26
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	051b      	lsls	r3, r3, #20
 80035fc:	e018      	b.n	8003630 <HAL_ADC_ConfigChannel+0x594>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e003      	b.n	8003622 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003630:	430b      	orrs	r3, r1
 8003632:	e080      	b.n	8003736 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x5b4>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	3301      	adds	r3, #1
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364e:	e015      	b.n	800367c <HAL_ADC_ConfigChannel+0x5e0>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e003      	b.n	8003674 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	069b      	lsls	r3, r3, #26
 8003678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_ADC_ConfigChannel+0x600>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0e9b      	lsrs	r3, r3, #26
 800368e:	3301      	adds	r3, #1
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	e017      	b.n	80036cc <HAL_ADC_ConfigChannel+0x630>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	61fb      	str	r3, [r7, #28]
  return result;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	ea42 0103 	orr.w	r1, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10d      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x65c>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	3b1e      	subs	r3, #30
 80036f0:	051b      	lsls	r3, r3, #20
 80036f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f6:	e01d      	b.n	8003734 <HAL_ADC_ConfigChannel+0x698>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	613b      	str	r3, [r7, #16]
  return result;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e005      	b.n	8003720 <HAL_ADC_ConfigChannel+0x684>
 8003714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff f8c0 	bl	80028c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_ADC_ConfigChannel+0x7bc>)
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07a      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374c:	4843      	ldr	r0, [pc, #268]	; (800385c <HAL_ADC_ConfigChannel+0x7c0>)
 800374e:	f7ff f815 	bl	800277c <LL_ADC_GetCommonPathInternalCh>
 8003752:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a41      	ldr	r2, [pc, #260]	; (8003860 <HAL_ADC_ConfigChannel+0x7c4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d12c      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d126      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_ADC_ConfigChannel+0x7c8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x6e4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3b      	ldr	r2, [pc, #236]	; (8003868 <HAL_ADC_ConfigChannel+0x7cc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d15d      	bne.n	800383c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003788:	4619      	mov	r1, r3
 800378a:	4834      	ldr	r0, [pc, #208]	; (800385c <HAL_ADC_ConfigChannel+0x7c0>)
 800378c:	f7fe ffe3 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_ADC_ConfigChannel+0x7d0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4a36      	ldr	r2, [pc, #216]	; (8003870 <HAL_ADC_ConfigChannel+0x7d4>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	4613      	mov	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037aa:	e002      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b8:	e040      	b.n	800383c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <HAL_ADC_ConfigChannel+0x7d8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d118      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x75a>
 80037c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d112      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_ADC_ConfigChannel+0x7c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_ADC_ConfigChannel+0x748>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a22      	ldr	r2, [pc, #136]	; (8003868 <HAL_ADC_ConfigChannel+0x7cc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d12d      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ec:	4619      	mov	r1, r3
 80037ee:	481b      	ldr	r0, [pc, #108]	; (800385c <HAL_ADC_ConfigChannel+0x7c0>)
 80037f0:	f7fe ffb1 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f4:	e024      	b.n	8003840 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_ADC_ConfigChannel+0x7dc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d120      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_ADC_ConfigChannel+0x7c8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d115      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800381e:	4619      	mov	r1, r3
 8003820:	480e      	ldr	r0, [pc, #56]	; (800385c <HAL_ADC_ConfigChannel+0x7c0>)
 8003822:	f7fe ff98 	bl	8002756 <LL_ADC_SetCommonPathInternalCh>
 8003826:	e00c      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800383a:	e002      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003840:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800384a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800384e:	4618      	mov	r0, r3
 8003850:	37d8      	adds	r7, #216	; 0xd8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	80080000 	.word	0x80080000
 800385c:	50040300 	.word	0x50040300
 8003860:	c7520000 	.word	0xc7520000
 8003864:	50040000 	.word	0x50040000
 8003868:	50040200 	.word	0x50040200
 800386c:	20000068 	.word	0x20000068
 8003870:	053e2d63 	.word	0x053e2d63
 8003874:	cb840000 	.word	0xcb840000
 8003878:	80000001 	.word	0x80000001

0800387c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f936 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8003898:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f957 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 80038a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8098 	beq.w	80039e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02a      	beq.n	8003918 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7e5b      	ldrb	r3, [r3, #25]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d126      	bne.n	8003918 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7e1b      	ldrb	r3, [r3, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d122      	bne.n	8003918 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038d6:	e014      	b.n	8003902 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4a45      	ldr	r2, [pc, #276]	; (80039f0 <ADC_ConversionStop+0x174>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d90d      	bls.n	80038fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0210 	orr.w	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e074      	b.n	80039e6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	3301      	adds	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d1e3      	bne.n	80038d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d014      	beq.n	8003948 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f8ee 	bl	8002b04 <LL_ADC_REG_IsConversionOngoing>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f8ab 	bl	8002a8e <LL_ADC_IsDisableOngoing>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff f8ca 	bl	8002adc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d014      	beq.n	8003978 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f8fd 	bl	8002b52 <LL_ADC_INJ_IsConversionOngoing>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f893 	bl	8002a8e <LL_ADC_IsDisableOngoing>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff f8d9 	bl	8002b2a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d005      	beq.n	800398a <ADC_ConversionStop+0x10e>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d105      	bne.n	8003990 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003984:	230c      	movs	r3, #12
 8003986:	617b      	str	r3, [r7, #20]
        break;
 8003988:	e005      	b.n	8003996 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800398a:	2308      	movs	r3, #8
 800398c:	617b      	str	r3, [r7, #20]
        break;
 800398e:	e002      	b.n	8003996 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003990:	2304      	movs	r3, #4
 8003992:	617b      	str	r3, [r7, #20]
        break;
 8003994:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003996:	f7fe fe9b 	bl	80026d0 <HAL_GetTick>
 800399a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800399c:	e01b      	b.n	80039d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800399e:	f7fe fe97 	bl	80026d0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d914      	bls.n	80039d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f043 0210 	orr.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e007      	b.n	80039e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1dc      	bne.n	800399e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	a33fffff 	.word	0xa33fffff

080039f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff f82f 	bl	8002a68 <LL_ADC_IsEnabled>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d169      	bne.n	8003ae4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <ADC_Enable+0xfc>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e055      	b.n	8003ae6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe ffea 	bl	8002a18 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a44:	482b      	ldr	r0, [pc, #172]	; (8003af4 <ADC_Enable+0x100>)
 8003a46:	f7fe fe99 	bl	800277c <LL_ADC_GetCommonPathInternalCh>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a54:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <ADC_Enable+0x104>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	4a28      	ldr	r2, [pc, #160]	; (8003afc <ADC_Enable+0x108>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003a6e:	e002      	b.n	8003a76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fe28 	bl	80026d0 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a82:	e028      	b.n	8003ad6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe ffed 	bl	8002a68 <LL_ADC_IsEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe ffbd 	bl	8002a18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a9e:	f7fe fe17 	bl	80026d0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d914      	bls.n	8003ad6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d00d      	beq.n	8003ad6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d1cf      	bne.n	8003a84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	8000003f 	.word	0x8000003f
 8003af4:	50040300 	.word	0x50040300
 8003af8:	20000068 	.word	0x20000068
 8003afc:	053e2d63 	.word	0x053e2d63

08003b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe ffbe 	bl	8002a8e <LL_ADC_IsDisableOngoing>
 8003b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe ffa5 	bl	8002a68 <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d047      	beq.n	8003bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d144      	bne.n	8003bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030d 	and.w	r3, r3, #13
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10c      	bne.n	8003b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ff7f 	bl	8002a40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2203      	movs	r2, #3
 8003b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe fdc1 	bl	80026d0 <HAL_GetTick>
 8003b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b50:	e029      	b.n	8003ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e023      	b.n	8003bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b6e:	f7fe fdaf 	bl	80026d0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d914      	bls.n	8003ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e007      	b.n	8003bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1dc      	bne.n	8003b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d14b      	bne.n	8003c70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d021      	beq.n	8003c36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fe23 	bl	8002842 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d032      	beq.n	8003c68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12b      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11f      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
 8003c34:	e018      	b.n	8003c68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff f9f8 	bl	800305e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c6e:	e00e      	b.n	8003c8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fa02 	bl	8003086 <HAL_ADC_ErrorCallback>
}
 8003c82:	e004      	b.n	8003c8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff f9e4 	bl	8003072 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff f9d4 	bl	8003086 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <LL_ADC_IsEnabled>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsEnabled+0x18>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsEnabled+0x1a>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_REG_IsConversionOngoing>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d101      	bne.n	8003d24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b09f      	sub	sp, #124	; 0x7c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e093      	b.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a47      	ldr	r2, [pc, #284]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d102      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	e001      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e072      	b.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ffb8 	bl	8003d0c <LL_ADC_REG_IsConversionOngoing>
 8003d9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ffb2 	bl	8003d0c <LL_ADC_REG_IsConversionOngoing>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d154      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d151      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d02c      	beq.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dd2:	035b      	lsls	r3, r3, #13
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ddc:	4829      	ldr	r0, [pc, #164]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dde:	f7ff ff82 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003de2:	4604      	mov	r4, r0
 8003de4:	4828      	ldr	r0, [pc, #160]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003de6:	f7ff ff7e 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	431c      	orrs	r4, r3
 8003dee:	4828      	ldr	r0, [pc, #160]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003df0:	f7ff ff79 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4323      	orrs	r3, r4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d137      	bne.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	6811      	ldr	r1, [r2, #0]
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	431a      	orrs	r2, r3
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e18:	e028      	b.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e26:	4817      	ldr	r0, [pc, #92]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e28:	f7ff ff5d 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	4816      	ldr	r0, [pc, #88]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e30:	f7ff ff59 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	431c      	orrs	r4, r3
 8003e38:	4815      	ldr	r0, [pc, #84]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e3a:	f7ff ff54 	bl	8003ce6 <LL_ADC_IsEnabled>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4323      	orrs	r3, r4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d112      	bne.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e4e:	f023 030f 	bic.w	r3, r3, #15
 8003e52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e56:	e009      	b.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e6a:	e000      	b.n	8003e6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	377c      	adds	r7, #124	; 0x7c
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd90      	pop	{r4, r7, pc}
 8003e82:	bf00      	nop
 8003e84:	50040000 	.word	0x50040000
 8003e88:	50040100 	.word	0x50040100
 8003e8c:	50040300 	.word	0x50040300
 8003e90:	50040200 	.word	0x50040200

08003e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	db12      	blt.n	8003f6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	f003 021f 	and.w	r2, r3, #31
 8003f4c:	490a      	ldr	r1, [pc, #40]	; (8003f78 <__NVIC_DisableIRQ+0x44>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2001      	movs	r0, #1
 8003f56:	fa00 f202 	lsl.w	r2, r0, r2
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f60:	f3bf 8f4f 	dsb	sy
}
 8003f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f66:	f3bf 8f6f 	isb	sy
}
 8003f6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100

08003f7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db0c      	blt.n	8003fa8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4907      	ldr	r1, [pc, #28]	; (8003fb4 <__NVIC_ClearPendingIRQ+0x38>)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa2:	3360      	adds	r3, #96	; 0x60
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	db0a      	blt.n	8003fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	490c      	ldr	r1, [pc, #48]	; (8004004 <__NVIC_SetPriority+0x4c>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	0112      	lsls	r2, r2, #4
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe0:	e00a      	b.n	8003ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4908      	ldr	r1, [pc, #32]	; (8004008 <__NVIC_SetPriority+0x50>)
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	3b04      	subs	r3, #4
 8003ff0:	0112      	lsls	r2, r2, #4
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	761a      	strb	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000e100 	.word	0xe000e100
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f1c3 0307 	rsb	r3, r3, #7
 8004026:	2b04      	cmp	r3, #4
 8004028:	bf28      	it	cs
 800402a:	2304      	movcs	r3, #4
 800402c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3304      	adds	r3, #4
 8004032:	2b06      	cmp	r3, #6
 8004034:	d902      	bls.n	800403c <NVIC_EncodePriority+0x30>
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3b03      	subs	r3, #3
 800403a:	e000      	b.n	800403e <NVIC_EncodePriority+0x32>
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	401a      	ands	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004054:	f04f 31ff 	mov.w	r1, #4294967295
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	43d9      	mvns	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	4313      	orrs	r3, r2
         );
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	; 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004084:	d301      	bcc.n	800408a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004086:	2301      	movs	r3, #1
 8004088:	e00f      	b.n	80040aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <SysTick_Config+0x40>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004092:	210f      	movs	r1, #15
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	f7ff ff8e 	bl	8003fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <SysTick_Config+0x40>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <SysTick_Config+0x40>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000e010 	.word	0xe000e010

080040b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fee7 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040e0:	f7ff fefc 	bl	8003edc <__NVIC_GetPriorityGrouping>
 80040e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff ff8e 	bl	800400c <NVIC_EncodePriority>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff5d 	bl	8003fb8 <__NVIC_SetPriority>
}
 80040fe:	bf00      	nop
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	4603      	mov	r3, r0
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff feef 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	4603      	mov	r3, r0
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff feff 	bl	8003f34 <__NVIC_DisableIRQ>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff94 	bl	8004074 <SysTick_Config>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff09 	bl	8003f7c <__NVIC_ClearPendingIRQ>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e098      	b.n	80042b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_DMA_Init+0x150>)
 800418e:	429a      	cmp	r2, r3
 8004190:	d80f      	bhi.n	80041b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <HAL_DMA_Init+0x154>)
 800419a:	4413      	add	r3, r2
 800419c:	4a4b      	ldr	r2, [pc, #300]	; (80042cc <HAL_DMA_Init+0x158>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	009a      	lsls	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a48      	ldr	r2, [pc, #288]	; (80042d0 <HAL_DMA_Init+0x15c>)
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
 80041b0:	e00e      	b.n	80041d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <HAL_DMA_Init+0x160>)
 80041ba:	4413      	add	r3, r2
 80041bc:	4a43      	ldr	r2, [pc, #268]	; (80042cc <HAL_DMA_Init+0x158>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	009a      	lsls	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_DMA_Init+0x164>)
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422a:	d039      	beq.n	80042a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <HAL_DMA_Init+0x15c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d11a      	bne.n	800426c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004236:	4b29      	ldr	r3, [pc, #164]	; (80042dc <HAL_DMA_Init+0x168>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f003 031c 	and.w	r3, r3, #28
 8004242:	210f      	movs	r1, #15
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	4924      	ldr	r1, [pc, #144]	; (80042dc <HAL_DMA_Init+0x168>)
 800424c:	4013      	ands	r3, r2
 800424e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004250:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_DMA_Init+0x168>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f003 031c 	and.w	r3, r3, #28
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	491d      	ldr	r1, [pc, #116]	; (80042dc <HAL_DMA_Init+0x168>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
 800426a:	e019      	b.n	80042a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_DMA_Init+0x16c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f003 031c 	and.w	r3, r3, #28
 8004278:	210f      	movs	r1, #15
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	4917      	ldr	r1, [pc, #92]	; (80042e0 <HAL_DMA_Init+0x16c>)
 8004282:	4013      	ands	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_DMA_Init+0x16c>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f003 031c 	and.w	r3, r3, #28
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	4911      	ldr	r1, [pc, #68]	; (80042e0 <HAL_DMA_Init+0x16c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40020407 	.word	0x40020407
 80042c8:	bffdfff8 	.word	0xbffdfff8
 80042cc:	cccccccd 	.word	0xcccccccd
 80042d0:	40020000 	.word	0x40020000
 80042d4:	bffdfbf8 	.word	0xbffdfbf8
 80042d8:	40020400 	.word	0x40020400
 80042dc:	400200a8 	.word	0x400200a8
 80042e0:	400204a8 	.word	0x400204a8

080042e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_DMA_Start_IT+0x20>
 8004300:	2302      	movs	r3, #2
 8004302:	e04b      	b.n	800439c <HAL_DMA_Start_IT+0xb8>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13a      	bne.n	800438e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f91e 	bl	800457e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 020e 	orr.w	r2, r2, #14
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e00f      	b.n	800437c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 020a 	orr.w	r2, r2, #10
 800437a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e005      	b.n	800439a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004396:	2302      	movs	r3, #2
 8004398:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d008      	beq.n	80043ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e022      	b.n	8004414 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 020e 	bic.w	r2, r2, #14
 80043dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 021c 	and.w	r2, r3, #28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2101      	movs	r1, #1
 80043fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004400:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 031c 	and.w	r3, r3, #28
 8004440:	2204      	movs	r2, #4
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d026      	beq.n	800449a <HAL_DMA_IRQHandler+0x7a>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d021      	beq.n	800449a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d107      	bne.n	8004474 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0204 	bic.w	r2, r2, #4
 8004472:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 021c 	and.w	r2, r3, #28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2104      	movs	r1, #4
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d071      	beq.n	8004574 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004498:	e06c      	b.n	8004574 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f003 031c 	and.w	r3, r3, #28
 80044a2:	2202      	movs	r2, #2
 80044a4:	409a      	lsls	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02e      	beq.n	800450c <HAL_DMA_IRQHandler+0xec>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d029      	beq.n	800450c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 020a 	bic.w	r2, r2, #10
 80044d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f003 021c 	and.w	r2, r3, #28
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2102      	movs	r1, #2
 80044ec:	fa01 f202 	lsl.w	r2, r1, r2
 80044f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d038      	beq.n	8004574 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800450a:	e033      	b.n	8004574 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	f003 031c 	and.w	r3, r3, #28
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02a      	beq.n	8004576 <HAL_DMA_IRQHandler+0x156>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d025      	beq.n	8004576 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 020e 	bic.w	r2, r2, #14
 8004538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 021c 	and.w	r2, r3, #28
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2101      	movs	r1, #1
 8004548:	fa01 f202 	lsl.w	r2, r1, r2
 800454c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004574:	bf00      	nop
 8004576:	bf00      	nop
}
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f003 021c 	and.w	r2, r3, #28
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f202 	lsl.w	r2, r1, r2
 800459e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d108      	bne.n	80045c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045c0:	e007      	b.n	80045d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	460b      	mov	r3, r1
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	605a      	str	r2, [r3, #4]
      break;
 80045fc:	e002      	b.n	8004604 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
      break;
 8004602:	bf00      	nop
  }

  return status;
 8004604:	7dfb      	ldrb	r3, [r7, #23]
}
 8004606:	4618      	mov	r0, r3
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e003      	b.n	800462e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800462c:	2300      	movs	r3, #0
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2201      	movs	r2, #1
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_EXTI_IRQHandler+0x5c>)
 8004666:	4413      	add	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4798      	blx	r3
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40010414 	.word	0x40010414

0800469c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046aa:	e17f      	b.n	80049ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	4013      	ands	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8171 	beq.w	80049a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d005      	beq.n	80046dc <HAL_GPIO_Init+0x40>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d130      	bne.n	800473e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004712:	2201      	movs	r2, #1
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0201 	and.w	r2, r3, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d118      	bne.n	800477c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004750:	2201      	movs	r2, #1
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f003 0201 	and.w	r2, r3, #1
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d017      	beq.n	80047b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d123      	bne.n	800480c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80ac 	beq.w	80049a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <HAL_GPIO_Init+0x330>)
 8004850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <HAL_GPIO_Init+0x330>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6613      	str	r3, [r2, #96]	; 0x60
 800485a:	4b5c      	ldr	r3, [pc, #368]	; (80049cc <HAL_GPIO_Init+0x330>)
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004866:	4a5a      	ldr	r2, [pc, #360]	; (80049d0 <HAL_GPIO_Init+0x334>)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	3302      	adds	r3, #2
 800486e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004890:	d025      	beq.n	80048de <HAL_GPIO_Init+0x242>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4f      	ldr	r2, [pc, #316]	; (80049d4 <HAL_GPIO_Init+0x338>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01f      	beq.n	80048da <HAL_GPIO_Init+0x23e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <HAL_GPIO_Init+0x33c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d019      	beq.n	80048d6 <HAL_GPIO_Init+0x23a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4d      	ldr	r2, [pc, #308]	; (80049dc <HAL_GPIO_Init+0x340>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_GPIO_Init+0x236>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4c      	ldr	r2, [pc, #304]	; (80049e0 <HAL_GPIO_Init+0x344>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_GPIO_Init+0x232>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4b      	ldr	r2, [pc, #300]	; (80049e4 <HAL_GPIO_Init+0x348>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_GPIO_Init+0x22e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4a      	ldr	r2, [pc, #296]	; (80049e8 <HAL_GPIO_Init+0x34c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_GPIO_Init+0x22a>
 80048c2:	2306      	movs	r3, #6
 80048c4:	e00c      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048c6:	2307      	movs	r3, #7
 80048c8:	e00a      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048ca:	2305      	movs	r3, #5
 80048cc:	e008      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048ce:	2304      	movs	r3, #4
 80048d0:	e006      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048d2:	2303      	movs	r3, #3
 80048d4:	e004      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_GPIO_Init+0x244>
 80048de:	2300      	movs	r3, #0
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	f002 0203 	and.w	r2, r2, #3
 80048e6:	0092      	lsls	r2, r2, #2
 80048e8:	4093      	lsls	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048f0:	4937      	ldr	r1, [pc, #220]	; (80049d0 <HAL_GPIO_Init+0x334>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	3302      	adds	r3, #2
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048fe:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_GPIO_Init+0x350>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004922:	4a32      	ldr	r2, [pc, #200]	; (80049ec <HAL_GPIO_Init+0x350>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_GPIO_Init+0x350>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_GPIO_Init+0x350>)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004952:	4b26      	ldr	r3, [pc, #152]	; (80049ec <HAL_GPIO_Init+0x350>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004976:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_GPIO_Init+0x350>)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_GPIO_Init+0x350>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43db      	mvns	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <HAL_GPIO_Init+0x350>)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f47f ae78 	bne.w	80046ac <HAL_GPIO_Init+0x10>
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010000 	.word	0x40010000
 80049d4:	48000400 	.word	0x48000400
 80049d8:	48000800 	.word	0x48000800
 80049dc:	48000c00 	.word	0x48000c00
 80049e0:	48001000 	.word	0x48001000
 80049e4:	48001400 	.word	0x48001400
 80049e8:	48001800 	.word	0x48001800
 80049ec:	40010400 	.word	0x40010400

080049f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049fe:	e0cd      	b.n	8004b9c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a00:	2201      	movs	r2, #1
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80c0 	beq.w	8004b96 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004a16:	4a68      	ldr	r2, [pc, #416]	; (8004bb8 <HAL_GPIO_DeInit+0x1c8>)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4013      	ands	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a3e:	d025      	beq.n	8004a8c <HAL_GPIO_DeInit+0x9c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a5e      	ldr	r2, [pc, #376]	; (8004bbc <HAL_GPIO_DeInit+0x1cc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01f      	beq.n	8004a88 <HAL_GPIO_DeInit+0x98>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a5d      	ldr	r2, [pc, #372]	; (8004bc0 <HAL_GPIO_DeInit+0x1d0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d019      	beq.n	8004a84 <HAL_GPIO_DeInit+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a5c      	ldr	r2, [pc, #368]	; (8004bc4 <HAL_GPIO_DeInit+0x1d4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_GPIO_DeInit+0x90>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a5b      	ldr	r2, [pc, #364]	; (8004bc8 <HAL_GPIO_DeInit+0x1d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00d      	beq.n	8004a7c <HAL_GPIO_DeInit+0x8c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a5a      	ldr	r2, [pc, #360]	; (8004bcc <HAL_GPIO_DeInit+0x1dc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <HAL_GPIO_DeInit+0x88>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a59      	ldr	r2, [pc, #356]	; (8004bd0 <HAL_GPIO_DeInit+0x1e0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_GPIO_DeInit+0x84>
 8004a70:	2306      	movs	r3, #6
 8004a72:	e00c      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a74:	2307      	movs	r3, #7
 8004a76:	e00a      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a78:	2305      	movs	r3, #5
 8004a7a:	e008      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	e006      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a80:	2303      	movs	r3, #3
 8004a82:	e004      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e002      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_GPIO_DeInit+0x9e>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	f002 0203 	and.w	r2, r2, #3
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	4093      	lsls	r3, r2
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d132      	bne.n	8004b04 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a9e:	4b4d      	ldr	r3, [pc, #308]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	494b      	ldr	r1, [pc, #300]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004aac:	4b49      	ldr	r3, [pc, #292]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	4947      	ldr	r1, [pc, #284]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004aba:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	4944      	ldr	r1, [pc, #272]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	4940      	ldr	r1, [pc, #256]	; (8004bd4 <HAL_GPIO_DeInit+0x1e4>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	220f      	movs	r2, #15
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <HAL_GPIO_DeInit+0x1c8>)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	3302      	adds	r3, #2
 8004aee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	43da      	mvns	r2, r3
 8004af6:	4830      	ldr	r0, [pc, #192]	; (8004bb8 <HAL_GPIO_DeInit+0x1c8>)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	400a      	ands	r2, r1
 8004afe:	3302      	adds	r3, #2
 8004b00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	2103      	movs	r1, #3
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	08da      	lsrs	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3208      	adds	r2, #8
 8004b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	08d2      	lsrs	r2, r2, #3
 8004b38:	4019      	ands	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2103      	movs	r1, #3
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2103      	movs	r1, #3
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	2101      	movs	r1, #1
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	401a      	ands	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f af2b 	bne.w	8004a00 <HAL_GPIO_DeInit+0x10>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	48000400 	.word	0x48000400
 8004bc0:	48000800 	.word	0x48000800
 8004bc4:	48000c00 	.word	0x48000c00
 8004bc8:	48001000 	.word	0x48001000
 8004bcc:	48001400 	.word	0x48001400
 8004bd0:	48001800 	.word	0x48001800
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	e001      	b.n	8004bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c24:	e002      	b.n	8004c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d006      	beq.n	8004c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c4e:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f806 	bl	8004c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40007000 	.word	0x40007000

08004ca0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40007000 	.word	0x40007000

08004cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cca:	d130      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ccc:	4b23      	ldr	r3, [pc, #140]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd8:	d038      	beq.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ce8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2232      	movs	r2, #50	; 0x32
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d00:	e002      	b.n	8004d08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d14:	d102      	bne.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f2      	bne.n	8004d02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d110      	bne.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e00f      	b.n	8004d4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3a:	d007      	beq.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d44:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	20000068 	.word	0x20000068
 8004d64:	431bde83 	.word	0x431bde83

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e3ca      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d7a:	4b97      	ldr	r3, [pc, #604]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d84:	4b94      	ldr	r3, [pc, #592]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80e4 	beq.w	8004f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_RCC_OscConfig+0x4a>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	f040 808b 	bne.w	8004ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 8087 	bne.w	8004ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004db2:	4b89      	ldr	r3, [pc, #548]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e3a2      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	4b82      	ldr	r3, [pc, #520]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_RCC_OscConfig+0x7c>
 8004dda:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de2:	e005      	b.n	8004df0 <HAL_RCC_OscConfig+0x88>
 8004de4:	4b7c      	ldr	r3, [pc, #496]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d223      	bcs.n	8004e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fd55 	bl	80058a8 <RCC_SetFlashLatencyFromMSIRange>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e383      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e08:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a72      	ldr	r2, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	f043 0308 	orr.w	r3, r3, #8
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	496d      	ldr	r1, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e26:	4b6c      	ldr	r3, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4968      	ldr	r1, [pc, #416]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	604b      	str	r3, [r1, #4]
 8004e3a:	e025      	b.n	8004e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e3c:	4b66      	ldr	r3, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e42:	f043 0308 	orr.w	r3, r3, #8
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4b63      	ldr	r3, [pc, #396]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4960      	ldr	r1, [pc, #384]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5a:	4b5f      	ldr	r3, [pc, #380]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	495b      	ldr	r1, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fd15 	bl	80058a8 <RCC_SetFlashLatencyFromMSIRange>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e343      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e88:	f000 fc4a 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b52      	ldr	r3, [pc, #328]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	4950      	ldr	r1, [pc, #320]	; (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	4a4e      	ldr	r2, [pc, #312]	; (8004fe0 <HAL_RCC_OscConfig+0x278>)
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fbbf 	bl	8002630 <HAL_InitTick>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d052      	beq.n	8004f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	e327      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d032      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ec8:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a42      	ldr	r2, [pc, #264]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fbfc 	bl	80026d0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004edc:	f7fd fbf8 	bl	80026d0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e310      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eee:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a36      	ldr	r2, [pc, #216]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b34      	ldr	r3, [pc, #208]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4931      	ldr	r1, [pc, #196]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f18:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	492c      	ldr	r1, [pc, #176]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
 8004f2c:	e01a      	b.n	8004f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fbc9 	bl	80026d0 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f42:	f7fd fbc5 	bl	80026d0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e2dd      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x1da>
 8004f60:	e000      	b.n	8004f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d074      	beq.n	800505a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x21a>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b0c      	cmp	r3, #12
 8004f7a:	d10e      	bne.n	8004f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d064      	beq.n	8005058 <HAL_RCC_OscConfig+0x2f0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d160      	bne.n	8005058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e2ba      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x24a>
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e026      	b.n	8005000 <HAL_RCC_OscConfig+0x298>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fba:	d115      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x280>
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a05      	ldr	r2, [pc, #20]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a02      	ldr	r2, [pc, #8]	; (8004fd8 <HAL_RCC_OscConfig+0x270>)
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e014      	b.n	8005000 <HAL_RCC_OscConfig+0x298>
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	08009e60 	.word	0x08009e60
 8004fe0:	20000068 	.word	0x20000068
 8004fe4:	2000006c 	.word	0x2000006c
 8004fe8:	4ba0      	ldr	r3, [pc, #640]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a9f      	ldr	r2, [pc, #636]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	4b9d      	ldr	r3, [pc, #628]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a9c      	ldr	r2, [pc, #624]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fb62 	bl	80026d0 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005010:	f7fd fb5e 	bl	80026d0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e276      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005022:	4b92      	ldr	r3, [pc, #584]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x2a8>
 800502e:	e014      	b.n	800505a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd fb4e 	bl	80026d0 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fd fb4a 	bl	80026d0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	; 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e262      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504a:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x2d0>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d060      	beq.n	8005128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d005      	beq.n	8005078 <HAL_RCC_OscConfig+0x310>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d119      	bne.n	80050a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d116      	bne.n	80050a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005078:	4b7c      	ldr	r3, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_OscConfig+0x328>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e23f      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4b76      	ldr	r3, [pc, #472]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	4973      	ldr	r1, [pc, #460]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a4:	e040      	b.n	8005128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ae:	4b6f      	ldr	r3, [pc, #444]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6e      	ldr	r2, [pc, #440]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fd fb09 	bl	80026d0 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fd fb05 	bl	80026d0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e21d      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d4:	4b65      	ldr	r3, [pc, #404]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b62      	ldr	r3, [pc, #392]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	495f      	ldr	r1, [pc, #380]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	e018      	b.n	8005128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b5d      	ldr	r3, [pc, #372]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a5c      	ldr	r2, [pc, #368]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80050fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fd fae5 	bl	80026d0 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fd fae1 	bl	80026d0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1f9      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511c:	4b53      	ldr	r3, [pc, #332]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d03c      	beq.n	80051ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01c      	beq.n	8005176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513c:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005142:	4a4a      	ldr	r2, [pc, #296]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd fac0 	bl	80026d0 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005154:	f7fd fabc 	bl	80026d0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e1d4      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005166:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <HAL_RCC_OscConfig+0x3ec>
 8005174:	e01b      	b.n	80051ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005176:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517c:	4a3b      	ldr	r2, [pc, #236]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fd faa3 	bl	80026d0 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518e:	f7fd fa9f 	bl	80026d0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1b7      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a0:	4b32      	ldr	r3, [pc, #200]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ef      	bne.n	800518e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80a6 	beq.w	8005308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051c0:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6593      	str	r3, [r2, #88]	; 0x58
 80051d8:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_RCC_OscConfig+0x504>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCC_OscConfig+0x508>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d118      	bne.n	8005226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <HAL_RCC_OscConfig+0x508>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <HAL_RCC_OscConfig+0x508>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005200:	f7fd fa66 	bl	80026d0 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fd fa62 	bl	80026d0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e17a      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <HAL_RCC_OscConfig+0x508>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <HAL_RCC_OscConfig+0x4d8>
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800523e:	e029      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b05      	cmp	r3, #5
 8005246:	d115      	bne.n	8005274 <HAL_RCC_OscConfig+0x50c>
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <HAL_RCC_OscConfig+0x504>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	4a03      	ldr	r2, [pc, #12]	; (800526c <HAL_RCC_OscConfig+0x504>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005268:	e014      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	40007000 	.word	0x40007000
 8005274:	4b9c      	ldr	r3, [pc, #624]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	4a9b      	ldr	r2, [pc, #620]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005284:	4b98      	ldr	r3, [pc, #608]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	4a97      	ldr	r2, [pc, #604]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fd fa18 	bl	80026d0 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7fd fa14 	bl	80026d0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e12a      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b8b      	ldr	r3, [pc, #556]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCC_OscConfig+0x53c>
 80052c8:	e015      	b.n	80052f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fd fa01 	bl	80026d0 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fd f9fd 	bl	80026d0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e113      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e8:	4b7f      	ldr	r3, [pc, #508]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ed      	bne.n	80052d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b7a      	ldr	r3, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	4a79      	ldr	r2, [pc, #484]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80fe 	beq.w	800550e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	2b02      	cmp	r3, #2
 8005318:	f040 80d0 	bne.w	80054bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800531c:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f003 0203 	and.w	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	429a      	cmp	r2, r3
 800532e:	d130      	bne.n	8005392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	3b01      	subs	r3, #1
 800533c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d127      	bne.n	8005392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d11f      	bne.n	8005392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800535c:	2a07      	cmp	r2, #7
 800535e:	bf14      	ite	ne
 8005360:	2201      	movne	r2, #1
 8005362:	2200      	moveq	r2, #0
 8005364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005366:	4293      	cmp	r3, r2
 8005368:	d113      	bne.n	8005392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d109      	bne.n	8005392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d06e      	beq.n	8005470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d069      	beq.n	800546c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005398:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053a4:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0ad      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053b4:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a4b      	ldr	r2, [pc, #300]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80053ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053c0:	f7fd f986 	bl	80026d0 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fd f982 	bl	80026d0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e09a      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e6:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b40      	ldr	r3, [pc, #256]	; (80054ec <HAL_RCC_OscConfig+0x784>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005400:	0212      	lsls	r2, r2, #8
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005408:	0852      	lsrs	r2, r2, #1
 800540a:	3a01      	subs	r2, #1
 800540c:	0552      	lsls	r2, r2, #21
 800540e:	4311      	orrs	r1, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005414:	0852      	lsrs	r2, r2, #1
 8005416:	3a01      	subs	r2, #1
 8005418:	0652      	lsls	r2, r2, #25
 800541a:	4311      	orrs	r1, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005420:	0912      	lsrs	r2, r2, #4
 8005422:	0452      	lsls	r2, r2, #17
 8005424:	430a      	orrs	r2, r1
 8005426:	4930      	ldr	r1, [pc, #192]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005428:	4313      	orrs	r3, r2
 800542a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2d      	ldr	r2, [pc, #180]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800543e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005444:	f7fd f944 	bl	80026d0 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fd f940 	bl	80026d0 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e058      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800546a:	e050      	b.n	800550e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e04f      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d148      	bne.n	800550e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 8005482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005488:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 800548e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005494:	f7fd f91c 	bl	80026d0 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fd f918 	bl	80026d0 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e030      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x734>
 80054ba:	e028      	b.n	800550e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d023      	beq.n	800550a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <HAL_RCC_OscConfig+0x780>)
 80054c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fd f8ff 	bl	80026d0 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	e00c      	b.n	80054f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fd f8fb 	bl	80026d0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d905      	bls.n	80054f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e013      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCC_OscConfig+0x7b0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ec      	bne.n	80054d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_RCC_OscConfig+0x7b0>)
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	4905      	ldr	r1, [pc, #20]	; (8005518 <HAL_RCC_OscConfig+0x7b0>)
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCC_OscConfig+0x7b4>)
 8005504:	4013      	ands	r3, r2
 8005506:	60cb      	str	r3, [r1, #12]
 8005508:	e001      	b.n	800550e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	feeefffc 	.word	0xfeeefffc

08005520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0e7      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005534:	4b75      	ldr	r3, [pc, #468]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d910      	bls.n	8005564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b72      	ldr	r3, [pc, #456]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 0207 	bic.w	r2, r3, #7
 800554a:	4970      	ldr	r1, [pc, #448]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b6e      	ldr	r3, [pc, #440]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0cf      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	4b66      	ldr	r3, [pc, #408]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800557c:	429a      	cmp	r2, r3
 800557e:	d908      	bls.n	8005592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4960      	ldr	r1, [pc, #384]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d04c      	beq.n	8005638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a6:	4b5a      	ldr	r3, [pc, #360]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d121      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0a6      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055be:	4b54      	ldr	r3, [pc, #336]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d115      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e09a      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d107      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d6:	4b4e      	ldr	r3, [pc, #312]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e08e      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e6:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e086      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4943      	ldr	r1, [pc, #268]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005608:	f7fd f862 	bl	80026d0 <HAL_GetTick>
 800560c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560e:	e00a      	b.n	8005626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005610:	f7fd f85e 	bl	80026d0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e06e      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	4b3a      	ldr	r3, [pc, #232]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 020c 	and.w	r2, r3, #12
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	429a      	cmp	r2, r3
 8005636:	d1eb      	bne.n	8005610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	4b31      	ldr	r3, [pc, #196]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005650:	429a      	cmp	r2, r3
 8005652:	d208      	bcs.n	8005666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	492b      	ldr	r1, [pc, #172]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d210      	bcs.n	8005696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 0207 	bic.w	r2, r3, #7
 800567c:	4923      	ldr	r1, [pc, #140]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <HAL_RCC_ClockConfig+0x1ec>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d001      	beq.n	8005696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e036      	b.n	8005704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	4918      	ldr	r1, [pc, #96]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c0:	4b13      	ldr	r3, [pc, #76]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4910      	ldr	r1, [pc, #64]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056d4:	f000 f824 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	490b      	ldr	r1, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1f4>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	4a09      	ldr	r2, [pc, #36]	; (8005718 <HAL_RCC_ClockConfig+0x1f8>)
 80056f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1fc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fc ff99 	bl	8002630 <HAL_InitTick>
 80056fe:	4603      	mov	r3, r0
 8005700:	72fb      	strb	r3, [r7, #11]

  return status;
 8005702:	7afb      	ldrb	r3, [r7, #11]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40022000 	.word	0x40022000
 8005710:	40021000 	.word	0x40021000
 8005714:	08009e60 	.word	0x08009e60
 8005718:	20000068 	.word	0x20000068
 800571c:	2000006c 	.word	0x2000006c

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x34>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d121      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11e      	bne.n	8005792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005754:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e005      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800577c:	4a2b      	ldr	r2, [pc, #172]	; (800582c <HAL_RCC_GetSysClockFreq+0x10c>)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d102      	bne.n	800579e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <HAL_RCC_GetSysClockFreq+0x110>)
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e004      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a4:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_RCC_GetSysClockFreq+0x114>)
 80057a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d134      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ae:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d003      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0xac>
 80057c4:	e005      	b.n	80057d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057c6:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCC_GetSysClockFreq+0x110>)
 80057c8:	617b      	str	r3, [r7, #20]
      break;
 80057ca:	e005      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ce:	617b      	str	r3, [r7, #20]
      break;
 80057d0:	e002      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	617b      	str	r3, [r7, #20]
      break;
 80057d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	fb03 f202 	mul.w	r2, r3, r2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_GetSysClockFreq+0x108>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	0e5b      	lsrs	r3, r3, #25
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	3301      	adds	r3, #1
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005818:	69bb      	ldr	r3, [r7, #24]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	08009e78 	.word	0x08009e78
 8005830:	00f42400 	.word	0x00f42400
 8005834:	007a1200 	.word	0x007a1200

08005838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <HAL_RCC_GetHCLKFreq+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000068 	.word	0x20000068

08005850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005854:	f7ff fff0 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005858:	4602      	mov	r2, r0
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4904      	ldr	r1, [pc, #16]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005866:	5ccb      	ldrb	r3, [r1, r3]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000
 8005878:	08009e70 	.word	0x08009e70

0800587c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005880:	f7ff ffda 	bl	8005838 <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	0adb      	lsrs	r3, r3, #11
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4904      	ldr	r1, [pc, #16]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000
 80058a4:	08009e70 	.word	0x08009e70

080058a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058c0:	f7ff f9ee 	bl	8004ca0 <HAL_PWREx_GetVoltageRange>
 80058c4:	6178      	str	r0, [r7, #20]
 80058c6:	e014      	b.n	80058f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c8:	4b25      	ldr	r3, [pc, #148]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	4a24      	ldr	r2, [pc, #144]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6593      	str	r3, [r2, #88]	; 0x58
 80058d4:	4b22      	ldr	r3, [pc, #136]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058e0:	f7ff f9de 	bl	8004ca0 <HAL_PWREx_GetVoltageRange>
 80058e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f8:	d10b      	bne.n	8005912 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d919      	bls.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2ba0      	cmp	r3, #160	; 0xa0
 8005904:	d902      	bls.n	800590c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005906:	2302      	movs	r3, #2
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	e013      	b.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800590c:	2301      	movs	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e010      	b.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d902      	bls.n	800591e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005918:	2303      	movs	r3, #3
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e00a      	b.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d102      	bne.n	800592a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005924:	2302      	movs	r3, #2
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	e004      	b.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b70      	cmp	r3, #112	; 0x70
 800592e:	d101      	bne.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005930:	2301      	movs	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f023 0207 	bic.w	r2, r3, #7
 800593c:	4909      	ldr	r1, [pc, #36]	; (8005964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	d001      	beq.n	8005956 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40021000 	.word	0x40021000
 8005964:	40022000 	.word	0x40022000

08005968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005970:	2300      	movs	r3, #0
 8005972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005974:	2300      	movs	r3, #0
 8005976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005980:	2b00      	cmp	r3, #0
 8005982:	d041      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005988:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800598c:	d02a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800598e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005992:	d824      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005994:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005998:	d008      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800599a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800599e:	d81e      	bhi.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a8:	d010      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059aa:	e018      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059ac:	4b86      	ldr	r3, [pc, #536]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a85      	ldr	r2, [pc, #532]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059b8:	e015      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 facb 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ca:	e00c      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3320      	adds	r3, #32
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fbb6 	bl	8006144 <RCCEx_PLLSAI2_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059dc:	e003      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	74fb      	strb	r3, [r7, #19]
      break;
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059ec:	4b76      	ldr	r3, [pc, #472]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fa:	4973      	ldr	r1, [pc, #460]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a02:	e001      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d041      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a1c:	d02a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a22:	d824      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a2e:	d81e      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a38:	d010      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a3a:	e018      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a3c:	4b62      	ldr	r3, [pc, #392]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a61      	ldr	r2, [pc, #388]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a48:	e015      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fa83 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a5a:	e00c      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3320      	adds	r3, #32
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fb6e 	bl	8006144 <RCCEx_PLLSAI2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	74fb      	strb	r3, [r7, #19]
      break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a7c:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8a:	494f      	ldr	r1, [pc, #316]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a92:	e001      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80a0 	beq.w	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac0:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6593      	str	r3, [r2, #88]	; 0x58
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005adc:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae8:	f7fc fdf2 	bl	80026d0 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005aee:	e009      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af0:	f7fc fdee 	bl	80026d0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d902      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	74fb      	strb	r3, [r7, #19]
        break;
 8005b02:	e005      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ef      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b10:	7cfb      	ldrb	r3, [r7, #19]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d15c      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01f      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d019      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b60:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fc fdad 	bl	80026d0 <HAL_GetTick>
 8005b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b78:	e00b      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7a:	f7fc fda9 	bl	80026d0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d902      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ec      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb6:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bbe:	e009      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	74bb      	strb	r3, [r7, #18]
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bd4:	7c7b      	ldrb	r3, [r7, #17]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b9e      	ldr	r3, [pc, #632]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a9d      	ldr	r2, [pc, #628]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf2:	4b98      	ldr	r3, [pc, #608]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	4994      	ldr	r1, [pc, #592]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c14:	4b8f      	ldr	r3, [pc, #572]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f023 020c 	bic.w	r2, r3, #12
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	498c      	ldr	r1, [pc, #560]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c36:	4b87      	ldr	r3, [pc, #540]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	4983      	ldr	r1, [pc, #524]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c58:	4b7e      	ldr	r3, [pc, #504]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	497b      	ldr	r1, [pc, #492]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c7a:	4b76      	ldr	r3, [pc, #472]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	4972      	ldr	r1, [pc, #456]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c9c:	4b6d      	ldr	r3, [pc, #436]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	496a      	ldr	r1, [pc, #424]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cbe:	4b65      	ldr	r3, [pc, #404]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	4961      	ldr	r1, [pc, #388]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce0:	4b5c      	ldr	r3, [pc, #368]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	4959      	ldr	r1, [pc, #356]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d02:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	4950      	ldr	r1, [pc, #320]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d24:	4b4b      	ldr	r3, [pc, #300]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	4948      	ldr	r1, [pc, #288]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d46:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	493f      	ldr	r1, [pc, #252]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d028      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d68:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d76:	4937      	ldr	r1, [pc, #220]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d86:	d106      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d88:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d92:	60d3      	str	r3, [r2, #12]
 8005d94:	e011      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f8d8 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005db0:	7cfb      	ldrb	r3, [r7, #19]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d028      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dc6:	4b23      	ldr	r3, [pc, #140]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	491f      	ldr	r1, [pc, #124]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de4:	d106      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de6:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df0:	60d3      	str	r3, [r2, #12]
 8005df2:	e011      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2101      	movs	r1, #1
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f8a9 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
 8005e16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e32:	4908      	ldr	r1, [pc, #32]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e42:	d109      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	4a02      	ldr	r2, [pc, #8]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e4e:	60d3      	str	r3, [r2, #12]
 8005e50:	e014      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e60:	d10c      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	2101      	movs	r1, #1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 f877 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e72:	7cfb      	ldrb	r3, [r7, #19]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e78:	7cfb      	ldrb	r3, [r7, #19]
 8005e7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d02f      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e88:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e96:	4928      	ldr	r1, [pc, #160]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	2102      	movs	r1, #2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f854 	bl	8005f5c <RCCEx_PLLSAI1_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eb8:	7cfb      	ldrb	r3, [r7, #19]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d014      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	74bb      	strb	r3, [r7, #18]
 8005ec2:	e011      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3320      	adds	r3, #32
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f935 	bl	8006144 <RCCEx_PLLSAI2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ede:	7cfb      	ldrb	r3, [r7, #19]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ef4:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f02:	490d      	ldr	r1, [pc, #52]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f26:	4904      	ldr	r1, [pc, #16]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000

08005f3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000

08005f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f6a:	4b75      	ldr	r3, [pc, #468]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d018      	beq.n	8005fa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f76:	4b72      	ldr	r3, [pc, #456]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0203 	and.w	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d10d      	bne.n	8005fa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
       ||
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f8e:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d047      	beq.n	8006032 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
 8005fa6:	e044      	b.n	8006032 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d018      	beq.n	8005fe2 <RCCEx_PLLSAI1_Config+0x86>
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d825      	bhi.n	8006000 <RCCEx_PLLSAI1_Config+0xa4>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d002      	beq.n	8005fbe <RCCEx_PLLSAI1_Config+0x62>
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d009      	beq.n	8005fd0 <RCCEx_PLLSAI1_Config+0x74>
 8005fbc:	e020      	b.n	8006000 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11d      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fce:	e01a      	b.n	8006006 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fd0:	4b5b      	ldr	r3, [pc, #364]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d116      	bne.n	800600a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe0:	e013      	b.n	800600a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fe2:	4b57      	ldr	r3, [pc, #348]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fee:	4b54      	ldr	r3, [pc, #336]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ffe:	e006      	b.n	800600e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e004      	b.n	8006010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800600e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006016:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	3b01      	subs	r3, #1
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	430b      	orrs	r3, r1
 800602c:	4944      	ldr	r1, [pc, #272]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d17d      	bne.n	8006134 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006038:	4b41      	ldr	r3, [pc, #260]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a40      	ldr	r2, [pc, #256]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800603e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006044:	f7fc fb44 	bl	80026d0 <HAL_GetTick>
 8006048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800604a:	e009      	b.n	8006060 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800604c:	f7fc fb40 	bl	80026d0 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d902      	bls.n	8006060 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
        break;
 800605e:	e005      	b.n	800606c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006060:	4b37      	ldr	r3, [pc, #220]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1ef      	bne.n	800604c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d160      	bne.n	8006134 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d111      	bne.n	800609c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006078:	4b31      	ldr	r3, [pc, #196]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	0211      	lsls	r1, r2, #8
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68d2      	ldr	r2, [r2, #12]
 800608e:	0912      	lsrs	r2, r2, #4
 8006090:	0452      	lsls	r2, r2, #17
 8006092:	430a      	orrs	r2, r1
 8006094:	492a      	ldr	r1, [pc, #168]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
 800609a:	e027      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d112      	bne.n	80060c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060a2:	4b27      	ldr	r3, [pc, #156]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6892      	ldr	r2, [r2, #8]
 80060b2:	0211      	lsls	r1, r2, #8
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6912      	ldr	r2, [r2, #16]
 80060b8:	0852      	lsrs	r2, r2, #1
 80060ba:	3a01      	subs	r2, #1
 80060bc:	0552      	lsls	r2, r2, #21
 80060be:	430a      	orrs	r2, r1
 80060c0:	491f      	ldr	r1, [pc, #124]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
 80060c6:	e011      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6892      	ldr	r2, [r2, #8]
 80060d8:	0211      	lsls	r1, r2, #8
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6952      	ldr	r2, [r2, #20]
 80060de:	0852      	lsrs	r2, r2, #1
 80060e0:	3a01      	subs	r2, #1
 80060e2:	0652      	lsls	r2, r2, #25
 80060e4:	430a      	orrs	r2, r1
 80060e6:	4916      	ldr	r1, [pc, #88]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060ec:	4b14      	ldr	r3, [pc, #80]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a13      	ldr	r2, [pc, #76]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fc faea 	bl	80026d0 <HAL_GetTick>
 80060fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060fe:	e009      	b.n	8006114 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006100:	f7fc fae6 	bl	80026d0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d902      	bls.n	8006114 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	73fb      	strb	r3, [r7, #15]
          break;
 8006112:	e005      	b.n	8006120 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ef      	beq.n	8006100 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	4904      	ldr	r1, [pc, #16]	; (8006140 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006130:	4313      	orrs	r3, r2
 8006132:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000

08006144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006152:	4b6a      	ldr	r3, [pc, #424]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800615e:	4b67      	ldr	r3, [pc, #412]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0203 	and.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d10d      	bne.n	800618a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
       ||
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006176:	4b61      	ldr	r3, [pc, #388]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
       ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d047      	beq.n	800621a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
 800618e:	e044      	b.n	800621a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d018      	beq.n	80061ca <RCCEx_PLLSAI2_Config+0x86>
 8006198:	2b03      	cmp	r3, #3
 800619a:	d825      	bhi.n	80061e8 <RCCEx_PLLSAI2_Config+0xa4>
 800619c:	2b01      	cmp	r3, #1
 800619e:	d002      	beq.n	80061a6 <RCCEx_PLLSAI2_Config+0x62>
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d009      	beq.n	80061b8 <RCCEx_PLLSAI2_Config+0x74>
 80061a4:	e020      	b.n	80061e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061a6:	4b55      	ldr	r3, [pc, #340]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d11d      	bne.n	80061ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b6:	e01a      	b.n	80061ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061b8:	4b50      	ldr	r3, [pc, #320]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061c8:	e013      	b.n	80061f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061ca:	4b4c      	ldr	r3, [pc, #304]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061d6:	4b49      	ldr	r3, [pc, #292]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061e6:	e006      	b.n	80061f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e004      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061fe:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	430b      	orrs	r3, r1
 8006214:	4939      	ldr	r1, [pc, #228]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d167      	bne.n	80062f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006220:	4b36      	ldr	r3, [pc, #216]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a35      	ldr	r2, [pc, #212]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800622a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622c:	f7fc fa50 	bl	80026d0 <HAL_GetTick>
 8006230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006232:	e009      	b.n	8006248 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006234:	f7fc fa4c 	bl	80026d0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d902      	bls.n	8006248 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	73fb      	strb	r3, [r7, #15]
        break;
 8006246:	e005      	b.n	8006254 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006248:	4b2c      	ldr	r3, [pc, #176]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1ef      	bne.n	8006234 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d14a      	bne.n	80062f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d111      	bne.n	8006284 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006260:	4b26      	ldr	r3, [pc, #152]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6892      	ldr	r2, [r2, #8]
 8006270:	0211      	lsls	r1, r2, #8
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68d2      	ldr	r2, [r2, #12]
 8006276:	0912      	lsrs	r2, r2, #4
 8006278:	0452      	lsls	r2, r2, #17
 800627a:	430a      	orrs	r2, r1
 800627c:	491f      	ldr	r1, [pc, #124]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800627e:	4313      	orrs	r3, r2
 8006280:	614b      	str	r3, [r1, #20]
 8006282:	e011      	b.n	80062a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006284:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800628c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6892      	ldr	r2, [r2, #8]
 8006294:	0211      	lsls	r1, r2, #8
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6912      	ldr	r2, [r2, #16]
 800629a:	0852      	lsrs	r2, r2, #1
 800629c:	3a01      	subs	r2, #1
 800629e:	0652      	lsls	r2, r2, #25
 80062a0:	430a      	orrs	r2, r1
 80062a2:	4916      	ldr	r1, [pc, #88]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80062a8:	4b14      	ldr	r3, [pc, #80]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fc fa0c 	bl	80026d0 <HAL_GetTick>
 80062b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062ba:	e009      	b.n	80062d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062bc:	f7fc fa08 	bl	80026d0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d902      	bls.n	80062d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	73fb      	strb	r3, [r7, #15]
          break;
 80062ce:	e005      	b.n	80062dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0ef      	beq.n	80062bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4904      	ldr	r1, [pc, #16]	; (80062fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000

08006300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e095      	b.n	800643e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006322:	d009      	beq.n	8006338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	61da      	str	r2, [r3, #28]
 800632a:	e005      	b.n	8006338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f877 	bl	8006446 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006378:	d902      	bls.n	8006380 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e002      	b.n	8006386 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006384:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800638e:	d007      	beq.n	80063a0 <HAL_SPI_Init+0xa0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	ea42 0103 	orr.w	r1, r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	f003 0204 	and.w	r2, r3, #4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800641c:	ea42 0103 	orr.w	r1, r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b08a      	sub	sp, #40	; 0x28
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006468:	2301      	movs	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x26>
 800647c:	2302      	movs	r3, #2
 800647e:	e1fb      	b.n	8006878 <HAL_SPI_TransmitReceive+0x41e>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006488:	f7fc f922 	bl	80026d0 <HAL_GetTick>
 800648c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006494:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d00e      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x6e>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b0:	d106      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x66>
 80064ba:	7efb      	ldrb	r3, [r7, #27]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d003      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064c6:	e1cd      	b.n	8006864 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_SPI_TransmitReceive+0x80>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_SPI_TransmitReceive+0x80>
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064e0:	e1c0      	b.n	8006864 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d003      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2205      	movs	r2, #5
 80064f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	887a      	ldrh	r2, [r7, #2]
 8006506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	887a      	ldrh	r2, [r7, #2]
 800650e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	887a      	ldrh	r2, [r7, #2]
 800651c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	887a      	ldrh	r2, [r7, #2]
 8006522:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006538:	d802      	bhi.n	8006540 <HAL_SPI_TransmitReceive+0xe6>
 800653a:	8a3b      	ldrh	r3, [r7, #16]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d908      	bls.n	8006552 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	e007      	b.n	8006562 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006560:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d007      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006588:	d97c      	bls.n	8006684 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_SPI_TransmitReceive+0x13e>
 8006592:	8a7b      	ldrh	r3, [r7, #18]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d169      	bne.n	800666c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065bc:	e056      	b.n	800666c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d11b      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x1aa>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d016      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x1aa>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d113      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11c      	bne.n	800664c <HAL_SPI_TransmitReceive+0x1f2>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	b292      	uxth	r2, r2
 800662a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800664c:	f7fc f840 	bl	80026d0 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	429a      	cmp	r2, r3
 800665a:	d807      	bhi.n	800666c <HAL_SPI_TransmitReceive+0x212>
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d003      	beq.n	800666c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800666a:	e0fb      	b.n	8006864 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1a3      	bne.n	80065be <HAL_SPI_TransmitReceive+0x164>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d19d      	bne.n	80065be <HAL_SPI_TransmitReceive+0x164>
 8006682:	e0df      	b.n	8006844 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x23a>
 800668c:	8a7b      	ldrh	r3, [r7, #18]
 800668e:	2b01      	cmp	r3, #1
 8006690:	f040 80cb 	bne.w	800682a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d912      	bls.n	80066c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	881a      	ldrh	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	1c9a      	adds	r2, r3, #2
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b02      	subs	r3, #2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066c2:	e0b2      	b.n	800682a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ea:	e09e      	b.n	800682a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d134      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x30a>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02f      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x30a>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2b01      	cmp	r3, #1
 8006708:	d12c      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d912      	bls.n	800673a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c9a      	adds	r2, r3, #2
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b02      	subs	r3, #2
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006738:	e012      	b.n	8006760 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d148      	bne.n	8006804 <HAL_SPI_TransmitReceive+0x3aa>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d042      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d923      	bls.n	80067d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	b292      	uxth	r2, r2
 8006796:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b02      	subs	r3, #2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d81f      	bhi.n	8006800 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	e016      	b.n	8006800 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f103 020c 	add.w	r2, r3, #12
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006804:	f7fb ff64 	bl	80026d0 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	429a      	cmp	r2, r3
 8006812:	d803      	bhi.n	800681c <HAL_SPI_TransmitReceive+0x3c2>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d102      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x3c8>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006828:	e01c      	b.n	8006864 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	f47f af5b 	bne.w	80066ec <HAL_SPI_TransmitReceive+0x292>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	f47f af54 	bne.w	80066ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f945 	bl	8006ad8 <SPI_EndRxTxTransaction>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
 8006860:	e000      	b.n	8006864 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006878:	4618      	mov	r0, r3
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800688e:	b2db      	uxtb	r3, r3
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068ac:	f7fb ff10 	bl	80026d0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4413      	add	r3, r2
 80068ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068bc:	f7fb ff08 	bl	80026d0 <HAL_GetTick>
 80068c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068c2:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	015b      	lsls	r3, r3, #5
 80068c8:	0d1b      	lsrs	r3, r3, #20
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068d2:	e054      	b.n	800697e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d050      	beq.n	800697e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068dc:	f7fb fef8 	bl	80026d0 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d902      	bls.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d13d      	bne.n	800696e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690a:	d111      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006914:	d004      	beq.n	8006920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691e:	d107      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006938:	d10f      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e017      	b.n	800699e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3b01      	subs	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	429a      	cmp	r2, r3
 800699a:	d19b      	bne.n	80068d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000068 	.word	0x20000068

080069ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069be:	f7fb fe87 	bl	80026d0 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	4413      	add	r3, r2
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069ce:	f7fb fe7f 	bl	80026d0 <HAL_GetTick>
 80069d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069dc:	4b3d      	ldr	r3, [pc, #244]	; (8006ad4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	00da      	lsls	r2, r3, #3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	0d1b      	lsrs	r3, r3, #20
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069f4:	e060      	b.n	8006ab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069fc:	d107      	bne.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x62>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d050      	beq.n	8006ab8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a16:	f7fb fe5b 	bl	80026d0 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d902      	bls.n	8006a2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d13d      	bne.n	8006aa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a44:	d111      	bne.n	8006a6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4e:	d004      	beq.n	8006a5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a58:	d107      	bne.n	8006a6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	d10f      	bne.n	8006a94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e010      	b.n	8006aca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d196      	bne.n	80069f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3728      	adds	r7, #40	; 0x28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000068 	.word	0x20000068

08006ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff ff5b 	bl	80069ac <SPI_WaitFifoStateUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e027      	b.n	8006b5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2180      	movs	r1, #128	; 0x80
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fec0 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e014      	b.n	8006b5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff ff34 	bl	80069ac <SPI_WaitFifoStateUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e000      	b.n	8006b5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e040      	b.n	8006bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fb fbae 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8c0 	bl	8006d28 <UART_SetConfig>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e022      	b.n	8006bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fb6c 	bl	8007298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fbf3 	bl	80073dc <UART_CheckIdleState>
 8006bf6:	4603      	mov	r3, r0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	f040 8082 	bne.w	8006d1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_UART_Transmit+0x26>
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e07a      	b.n	8006d20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Transmit+0x38>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e073      	b.n	8006d20 <HAL_UART_Transmit+0x120>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2221      	movs	r2, #33	; 0x21
 8006c4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c4e:	f7fb fd3f 	bl	80026d0 <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6c:	d108      	bne.n	8006c80 <HAL_UART_Transmit+0x80>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e003      	b.n	8006c88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006c90:	e02d      	b.n	8006cee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2180      	movs	r1, #128	; 0x80
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fbe6 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e039      	b.n	8006d20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	881a      	ldrh	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e008      	b.n	8006cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1cb      	bne.n	8006c92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2200      	movs	r2, #0
 8006d02:	2140      	movs	r1, #64	; 0x40
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fbb2 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e005      	b.n	8006d20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d2c:	b08a      	sub	sp, #40	; 0x28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4ba4      	ldr	r3, [pc, #656]	; (8006fe8 <UART_SetConfig+0x2c0>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a99      	ldr	r2, [pc, #612]	; (8006fec <UART_SetConfig+0x2c4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	4313      	orrs	r3, r2
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a90      	ldr	r2, [pc, #576]	; (8006ff0 <UART_SetConfig+0x2c8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d126      	bne.n	8006e00 <UART_SetConfig+0xd8>
 8006db2:	4b90      	ldr	r3, [pc, #576]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d81b      	bhi.n	8006df8 <UART_SetConfig+0xd0>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0xa0>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006df1 	.word	0x08006df1
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e116      	b.n	800700e <UART_SetConfig+0x2e6>
 8006de0:	2302      	movs	r3, #2
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e112      	b.n	800700e <UART_SetConfig+0x2e6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e10e      	b.n	800700e <UART_SetConfig+0x2e6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e10a      	b.n	800700e <UART_SetConfig+0x2e6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfe:	e106      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a7c      	ldr	r2, [pc, #496]	; (8006ff8 <UART_SetConfig+0x2d0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d138      	bne.n	8006e7c <UART_SetConfig+0x154>
 8006e0a:	4b7a      	ldr	r3, [pc, #488]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	f003 030c 	and.w	r3, r3, #12
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d82d      	bhi.n	8006e74 <UART_SetConfig+0x14c>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0xf8>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e75 	.word	0x08006e75
 8006e30:	08006e65 	.word	0x08006e65
 8006e34:	08006e75 	.word	0x08006e75
 8006e38:	08006e75 	.word	0x08006e75
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5a:	e0d8      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e62:	e0d4      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6a:	e0d0      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e72:	e0cc      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7a:	e0c8      	b.n	800700e <UART_SetConfig+0x2e6>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <UART_SetConfig+0x2d4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d125      	bne.n	8006ed2 <UART_SetConfig+0x1aa>
 8006e86:	4b5b      	ldr	r3, [pc, #364]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e90:	2b30      	cmp	r3, #48	; 0x30
 8006e92:	d016      	beq.n	8006ec2 <UART_SetConfig+0x19a>
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d818      	bhi.n	8006eca <UART_SetConfig+0x1a2>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d00a      	beq.n	8006eb2 <UART_SetConfig+0x18a>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d814      	bhi.n	8006eca <UART_SetConfig+0x1a2>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <UART_SetConfig+0x182>
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d008      	beq.n	8006eba <UART_SetConfig+0x192>
 8006ea8:	e00f      	b.n	8006eca <UART_SetConfig+0x1a2>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb0:	e0ad      	b.n	800700e <UART_SetConfig+0x2e6>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb8:	e0a9      	b.n	800700e <UART_SetConfig+0x2e6>
 8006eba:	2304      	movs	r3, #4
 8006ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec0:	e0a5      	b.n	800700e <UART_SetConfig+0x2e6>
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec8:	e0a1      	b.n	800700e <UART_SetConfig+0x2e6>
 8006eca:	2310      	movs	r3, #16
 8006ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed0:	e09d      	b.n	800700e <UART_SetConfig+0x2e6>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4a      	ldr	r2, [pc, #296]	; (8007000 <UART_SetConfig+0x2d8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d125      	bne.n	8006f28 <UART_SetConfig+0x200>
 8006edc:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee8:	d016      	beq.n	8006f18 <UART_SetConfig+0x1f0>
 8006eea:	2bc0      	cmp	r3, #192	; 0xc0
 8006eec:	d818      	bhi.n	8006f20 <UART_SetConfig+0x1f8>
 8006eee:	2b80      	cmp	r3, #128	; 0x80
 8006ef0:	d00a      	beq.n	8006f08 <UART_SetConfig+0x1e0>
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d814      	bhi.n	8006f20 <UART_SetConfig+0x1f8>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <UART_SetConfig+0x1d8>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d008      	beq.n	8006f10 <UART_SetConfig+0x1e8>
 8006efe:	e00f      	b.n	8006f20 <UART_SetConfig+0x1f8>
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f06:	e082      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0e:	e07e      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f16:	e07a      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f1e:	e076      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f26:	e072      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <UART_SetConfig+0x2dc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d12a      	bne.n	8006f88 <UART_SetConfig+0x260>
 8006f32:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f40:	d01a      	beq.n	8006f78 <UART_SetConfig+0x250>
 8006f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f46:	d81b      	bhi.n	8006f80 <UART_SetConfig+0x258>
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d00c      	beq.n	8006f68 <UART_SetConfig+0x240>
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d815      	bhi.n	8006f80 <UART_SetConfig+0x258>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <UART_SetConfig+0x238>
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d008      	beq.n	8006f70 <UART_SetConfig+0x248>
 8006f5e:	e00f      	b.n	8006f80 <UART_SetConfig+0x258>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f66:	e052      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6e:	e04e      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f76:	e04a      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7e:	e046      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f86:	e042      	b.n	800700e <UART_SetConfig+0x2e6>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a17      	ldr	r2, [pc, #92]	; (8006fec <UART_SetConfig+0x2c4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d13a      	bne.n	8007008 <UART_SetConfig+0x2e0>
 8006f92:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <UART_SetConfig+0x2cc>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa0:	d01a      	beq.n	8006fd8 <UART_SetConfig+0x2b0>
 8006fa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa6:	d81b      	bhi.n	8006fe0 <UART_SetConfig+0x2b8>
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fac:	d00c      	beq.n	8006fc8 <UART_SetConfig+0x2a0>
 8006fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb2:	d815      	bhi.n	8006fe0 <UART_SetConfig+0x2b8>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <UART_SetConfig+0x298>
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d008      	beq.n	8006fd0 <UART_SetConfig+0x2a8>
 8006fbe:	e00f      	b.n	8006fe0 <UART_SetConfig+0x2b8>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc6:	e022      	b.n	800700e <UART_SetConfig+0x2e6>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fce:	e01e      	b.n	800700e <UART_SetConfig+0x2e6>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd6:	e01a      	b.n	800700e <UART_SetConfig+0x2e6>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e016      	b.n	800700e <UART_SetConfig+0x2e6>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e012      	b.n	800700e <UART_SetConfig+0x2e6>
 8006fe8:	efff69f3 	.word	0xefff69f3
 8006fec:	40008000 	.word	0x40008000
 8006ff0:	40013800 	.word	0x40013800
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	40004400 	.word	0x40004400
 8006ffc:	40004800 	.word	0x40004800
 8007000:	40004c00 	.word	0x40004c00
 8007004:	40005000 	.word	0x40005000
 8007008:	2310      	movs	r3, #16
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a9f      	ldr	r2, [pc, #636]	; (8007290 <UART_SetConfig+0x568>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d17a      	bne.n	800710e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800701c:	2b08      	cmp	r3, #8
 800701e:	d824      	bhi.n	800706a <UART_SetConfig+0x342>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x300>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800704d 	.word	0x0800704d
 800702c:	0800706b 	.word	0x0800706b
 8007030:	08007055 	.word	0x08007055
 8007034:	0800706b 	.word	0x0800706b
 8007038:	0800705b 	.word	0x0800705b
 800703c:	0800706b 	.word	0x0800706b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800706b 	.word	0x0800706b
 8007048:	08007063 	.word	0x08007063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fe fc00 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8007050:	61f8      	str	r0, [r7, #28]
        break;
 8007052:	e010      	b.n	8007076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007054:	4b8f      	ldr	r3, [pc, #572]	; (8007294 <UART_SetConfig+0x56c>)
 8007056:	61fb      	str	r3, [r7, #28]
        break;
 8007058:	e00d      	b.n	8007076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705a:	f7fe fb61 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 800705e:	61f8      	str	r0, [r7, #28]
        break;
 8007060:	e009      	b.n	8007076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007066:	61fb      	str	r3, [r7, #28]
        break;
 8007068:	e005      	b.n	8007076 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80fb 	beq.w	8007274 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	429a      	cmp	r2, r3
 800708c:	d305      	bcc.n	800709a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	429a      	cmp	r2, r3
 8007098:	d903      	bls.n	80070a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070a0:	e0e8      	b.n	8007274 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2200      	movs	r2, #0
 80070a6:	461c      	mov	r4, r3
 80070a8:	4615      	mov	r5, r2
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	022b      	lsls	r3, r5, #8
 80070b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070b8:	0222      	lsls	r2, r4, #8
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6849      	ldr	r1, [r1, #4]
 80070be:	0849      	lsrs	r1, r1, #1
 80070c0:	2000      	movs	r0, #0
 80070c2:	4688      	mov	r8, r1
 80070c4:	4681      	mov	r9, r0
 80070c6:	eb12 0a08 	adds.w	sl, r2, r8
 80070ca:	eb43 0b09 	adc.w	fp, r3, r9
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070dc:	4650      	mov	r0, sl
 80070de:	4659      	mov	r1, fp
 80070e0:	f7f9 f8ce 	bl	8000280 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4613      	mov	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f2:	d308      	bcc.n	8007106 <UART_SetConfig+0x3de>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fa:	d204      	bcs.n	8007106 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	60da      	str	r2, [r3, #12]
 8007104:	e0b6      	b.n	8007274 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800710c:	e0b2      	b.n	8007274 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	d15e      	bne.n	80071d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800711c:	2b08      	cmp	r3, #8
 800711e:	d828      	bhi.n	8007172 <UART_SetConfig+0x44a>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x400>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007173 	.word	0x08007173
 8007138:	08007163 	.word	0x08007163
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
 8007148:	0800716b 	.word	0x0800716b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fe fb80 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8007150:	61f8      	str	r0, [r7, #28]
        break;
 8007152:	e014      	b.n	800717e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007154:	f7fe fb92 	bl	800587c <HAL_RCC_GetPCLK2Freq>
 8007158:	61f8      	str	r0, [r7, #28]
        break;
 800715a:	e010      	b.n	800717e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800715c:	4b4d      	ldr	r3, [pc, #308]	; (8007294 <UART_SetConfig+0x56c>)
 800715e:	61fb      	str	r3, [r7, #28]
        break;
 8007160:	e00d      	b.n	800717e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007162:	f7fe fadd 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8007166:	61f8      	str	r0, [r7, #28]
        break;
 8007168:	e009      	b.n	800717e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	61fb      	str	r3, [r7, #28]
        break;
 8007170:	e005      	b.n	800717e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800717c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d077      	beq.n	8007274 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	005a      	lsls	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	441a      	add	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b0f      	cmp	r3, #15
 800719e:	d916      	bls.n	80071ce <UART_SetConfig+0x4a6>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a6:	d212      	bcs.n	80071ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f023 030f 	bic.w	r3, r3, #15
 80071b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	b29a      	uxth	r2, r3
 80071be:	8afb      	ldrh	r3, [r7, #22]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	8afa      	ldrh	r2, [r7, #22]
 80071ca:	60da      	str	r2, [r3, #12]
 80071cc:	e052      	b.n	8007274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071d4:	e04e      	b.n	8007274 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d827      	bhi.n	800722e <UART_SetConfig+0x506>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <UART_SetConfig+0x4bc>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007219 	.word	0x08007219
 80071f0:	0800722f 	.word	0x0800722f
 80071f4:	0800721f 	.word	0x0800721f
 80071f8:	0800722f 	.word	0x0800722f
 80071fc:	0800722f 	.word	0x0800722f
 8007200:	0800722f 	.word	0x0800722f
 8007204:	08007227 	.word	0x08007227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007208:	f7fe fb22 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 800720c:	61f8      	str	r0, [r7, #28]
        break;
 800720e:	e014      	b.n	800723a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fe fb34 	bl	800587c <HAL_RCC_GetPCLK2Freq>
 8007214:	61f8      	str	r0, [r7, #28]
        break;
 8007216:	e010      	b.n	800723a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007218:	4b1e      	ldr	r3, [pc, #120]	; (8007294 <UART_SetConfig+0x56c>)
 800721a:	61fb      	str	r3, [r7, #28]
        break;
 800721c:	e00d      	b.n	800723a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800721e:	f7fe fa7f 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8007222:	61f8      	str	r0, [r7, #28]
        break;
 8007224:	e009      	b.n	800723a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722a:	61fb      	str	r3, [r7, #28]
        break;
 800722c:	e005      	b.n	800723a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007238:	bf00      	nop
    }

    if (pclk != 0U)
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d019      	beq.n	8007274 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	085a      	lsrs	r2, r3, #1
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	441a      	add	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d909      	bls.n	800726e <UART_SetConfig+0x546>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007260:	d205      	bcs.n	800726e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e002      	b.n	8007274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007284:	4618      	mov	r0, r3
 8007286:	3728      	adds	r7, #40	; 0x28
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728e:	bf00      	nop
 8007290:	40008000 	.word	0x40008000
 8007294:	00f42400 	.word	0x00f42400

08007298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01a      	beq.n	80073ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007396:	d10a      	bne.n	80073ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
  }
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073ec:	f7fb f970 	bl	80026d0 <HAL_GetTick>
 80073f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d10e      	bne.n	800741e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f82d 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e023      	b.n	8007466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b04      	cmp	r3, #4
 800742a:	d10e      	bne.n	800744a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800742c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f817 	bl	800746e <UART_WaitOnFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e00d      	b.n	8007466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2220      	movs	r2, #32
 8007454:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b09c      	sub	sp, #112	; 0x70
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747e:	e0a5      	b.n	80075cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	f000 80a1 	beq.w	80075cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fb f921 	bl	80026d0 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800749a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800749c:	2b00      	cmp	r3, #0
 800749e:	d13e      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074b4:	667b      	str	r3, [r7, #100]	; 0x64
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	663b      	str	r3, [r7, #96]	; 0x60
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80074f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e067      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d04f      	beq.n	80075cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d147      	bne.n	80075cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007544:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
 8007566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e6      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	613b      	str	r3, [r7, #16]
   return(result);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007598:	623a      	str	r2, [r7, #32]
 800759a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	69f9      	ldr	r1, [r7, #28]
 800759e:	6a3a      	ldr	r2, [r7, #32]
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e010      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	429a      	cmp	r2, r3
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	f43f af4a 	beq.w	8007480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3770      	adds	r7, #112	; 0x70
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b08c      	sub	sp, #48	; 0x30
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4603      	mov	r3, r0
 8007600:	71fb      	strb	r3, [r7, #7]
 8007602:	460b      	mov	r3, r1
 8007604:	71bb      	strb	r3, [r7, #6]
 8007606:	4613      	mov	r3, r2
 8007608:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800760e:	79bb      	ldrb	r3, [r7, #6]
 8007610:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007612:	797b      	ldrb	r3, [r7, #5]
 8007614:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	2207      	movs	r2, #7
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f956 	bl	80088d0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007624:	f107 0318 	add.w	r3, r7, #24
 8007628:	2218      	movs	r2, #24
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 f94f 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007632:	233f      	movs	r3, #63	; 0x3f
 8007634:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007636:	238a      	movs	r3, #138	; 0x8a
 8007638:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007640:	2303      	movs	r3, #3
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800764a:	2307      	movs	r3, #7
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fe57 	bl	8008308 <hci_send_req>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	da01      	bge.n	8007664 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007660:	23ff      	movs	r3, #255	; 0xff
 8007662:	e014      	b.n	800768e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007664:	7b3b      	ldrb	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800766a:	7b3b      	ldrb	r3, [r7, #12]
 800766c:	e00f      	b.n	800768e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800766e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007672:	b29a      	uxth	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007678:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800767c:	b29a      	uxth	r2, r3
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007682:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007686:	b29a      	uxth	r2, r3
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3730      	adds	r7, #48	; 0x30
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007696:	b590      	push	{r4, r7, lr}
 8007698:	b095      	sub	sp, #84	; 0x54
 800769a:	af00      	add	r7, sp, #0
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	4623      	mov	r3, r4
 80076a6:	71fb      	strb	r3, [r7, #7]
 80076a8:	4603      	mov	r3, r0
 80076aa:	80bb      	strh	r3, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	807b      	strh	r3, [r7, #2]
 80076b0:	4613      	mov	r3, r2
 80076b2:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80076ba:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80076be:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80076c2:	4413      	add	r3, r2
 80076c4:	330e      	adds	r3, #14
 80076c6:	2b28      	cmp	r3, #40	; 0x28
 80076c8:	d901      	bls.n	80076ce <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80076ca:	2342      	movs	r3, #66	; 0x42
 80076cc:	e0c9      	b.n	8007862 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80076ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076d2:	3350      	adds	r3, #80	; 0x50
 80076d4:	443b      	add	r3, r7
 80076d6:	79fa      	ldrb	r2, [r7, #7]
 80076d8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80076dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076e0:	3301      	adds	r3, #1
 80076e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80076e6:	88bb      	ldrh	r3, [r7, #4]
 80076e8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80076ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076ee:	f107 0208 	add.w	r2, r7, #8
 80076f2:	4413      	add	r3, r2
 80076f4:	88ba      	ldrh	r2, [r7, #4]
 80076f6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80076f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076fc:	3302      	adds	r3, #2
 80076fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8007702:	887b      	ldrh	r3, [r7, #2]
 8007704:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8007706:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800770a:	f107 0208 	add.w	r2, r7, #8
 800770e:	4413      	add	r3, r2
 8007710:	887a      	ldrh	r2, [r7, #2]
 8007712:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007718:	3302      	adds	r3, #2
 800771a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800771e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007722:	3350      	adds	r3, #80	; 0x50
 8007724:	443b      	add	r3, r7
 8007726:	79ba      	ldrb	r2, [r7, #6]
 8007728:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800772c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007730:	3301      	adds	r3, #1
 8007732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8007736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800773a:	3350      	adds	r3, #80	; 0x50
 800773c:	443b      	add	r3, r7
 800773e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007742:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007746:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800774a:	3301      	adds	r3, #1
 800774c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8007750:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007754:	3350      	adds	r3, #80	; 0x50
 8007756:	443b      	add	r3, r7
 8007758:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800775c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007760:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007764:	3301      	adds	r3, #1
 8007766:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800776a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800776e:	f107 0208 	add.w	r2, r7, #8
 8007772:	4413      	add	r3, r2
 8007774:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007778:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f89a 	bl	80088b4 <memcpy>
  indx +=  LocalNameLen;
 8007780:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007784:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8007788:	4413      	add	r3, r2
 800778a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800778e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007792:	3350      	adds	r3, #80	; 0x50
 8007794:	443b      	add	r3, r7
 8007796:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800779a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800779e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077a2:	3301      	adds	r3, #1
 80077a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80077a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077ac:	f107 0208 	add.w	r2, r7, #8
 80077b0:	4413      	add	r3, r2
 80077b2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80077b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 f87b 	bl	80088b4 <memcpy>
  indx +=  ServiceUUIDLen;  
 80077be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80077c2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80077c6:	4413      	add	r3, r2
 80077c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80077cc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80077d0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80077d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077d8:	f107 0208 	add.w	r2, r7, #8
 80077dc:	4413      	add	r3, r2
 80077de:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80077e2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80077e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077e8:	3302      	adds	r3, #2
 80077ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80077ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80077f2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80077f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077fa:	f107 0208 	add.w	r2, r7, #8
 80077fe:	4413      	add	r3, r2
 8007800:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8007804:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8007806:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800780a:	3302      	adds	r3, #2
 800780c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007814:	2218      	movs	r2, #24
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f001 f859 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800781e:	233f      	movs	r3, #63	; 0x3f
 8007820:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8007822:	2383      	movs	r3, #131	; 0x83
 8007824:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800782c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8007832:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8007836:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8007838:	2301      	movs	r3, #1
 800783a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800783c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fd60 	bl	8008308 <hci_send_req>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	da01      	bge.n	8007852 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800784e:	23ff      	movs	r3, #255	; 0xff
 8007850:	e007      	b.n	8007862 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8007852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <aci_gap_set_discoverable+0x1ca>
    return status;
 800785a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800785e:	e000      	b.n	8007862 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3754      	adds	r7, #84	; 0x54
 8007866:	46bd      	mov	sp, r7
 8007868:	bd90      	pop	{r4, r7, pc}

0800786a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b088      	sub	sp, #32
 800786e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007870:	f107 0308 	add.w	r3, r7, #8
 8007874:	2218      	movs	r2, #24
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f829 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800787e:	233f      	movs	r3, #63	; 0x3f
 8007880:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8007882:	f240 1301 	movw	r3, #257	; 0x101
 8007886:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007888:	1dfb      	adds	r3, r7, #7
 800788a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800788c:	2301      	movs	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fd36 	bl	8008308 <hci_send_req>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	da01      	bge.n	80078a6 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80078a2:	23ff      	movs	r3, #255	; 0xff
 80078a4:	e000      	b.n	80078a8 <aci_gatt_init+0x3e>

  return status;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3720      	adds	r7, #32
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b090      	sub	sp, #64	; 0x40
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6039      	str	r1, [r7, #0]
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4603      	mov	r3, r0
 80078be:	71fb      	strb	r3, [r7, #7]
 80078c0:	460b      	mov	r3, r1
 80078c2:	71bb      	strb	r3, [r7, #6]
 80078c4:	4613      	mov	r3, r2
 80078c6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80078ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80078d2:	3340      	adds	r3, #64	; 0x40
 80078d4:	443b      	add	r3, r7
 80078d6:	79fa      	ldrb	r2, [r7, #7]
 80078d8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80078dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80078e0:	3301      	adds	r3, #1
 80078e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d103      	bne.n	80078f4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80078ec:	2302      	movs	r3, #2
 80078ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80078f2:	e002      	b.n	80078fa <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80078f4:	2310      	movs	r3, #16
 80078f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80078fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80078fe:	f107 020c 	add.w	r2, r7, #12
 8007902:	4413      	add	r3, r2
 8007904:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 ffd2 	bl	80088b4 <memcpy>
  indx +=  uuid_len;
 8007910:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007918:	4413      	add	r3, r2
 800791a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800791e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007922:	3340      	adds	r3, #64	; 0x40
 8007924:	443b      	add	r3, r7
 8007926:	79ba      	ldrb	r2, [r7, #6]
 8007928:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800792c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007930:	3301      	adds	r3, #1
 8007932:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8007936:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800793a:	3340      	adds	r3, #64	; 0x40
 800793c:	443b      	add	r3, r7
 800793e:	797a      	ldrb	r2, [r7, #5]
 8007940:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007944:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007948:	3301      	adds	r3, #1
 800794a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800794e:	f107 0320 	add.w	r3, r7, #32
 8007952:	2203      	movs	r2, #3
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 ffba 	bl	80088d0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800795c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007960:	2218      	movs	r2, #24
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 ffb3 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800796a:	233f      	movs	r3, #63	; 0x3f
 800796c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800796e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007972:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8007974:	f107 030c 	add.w	r3, r7, #12
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800797a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800797e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8007980:	f107 0320 	add.w	r3, r7, #32
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8007986:	2303      	movs	r3, #3
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800798a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800798e:	2100      	movs	r1, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fcb9 	bl	8008308 <hci_send_req>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	da01      	bge.n	80079a0 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800799c:	23ff      	movs	r3, #255	; 0xff
 800799e:	e00c      	b.n	80079ba <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80079a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <aci_gatt_add_serv+0xfe>
    return resp.status;
 80079a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079ac:	e005      	b.n	80079ba <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80079ae:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b6:	801a      	strh	r2, [r3, #0]

  return 0;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3740      	adds	r7, #64	; 0x40
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b092      	sub	sp, #72	; 0x48
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	603a      	str	r2, [r7, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	80fb      	strh	r3, [r7, #6]
 80079d0:	460b      	mov	r3, r1
 80079d2:	717b      	strb	r3, [r7, #5]
 80079d4:	4613      	mov	r3, r2
 80079d6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80079e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80079e6:	f107 020c 	add.w	r2, r7, #12
 80079ea:	4413      	add	r3, r2
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80079f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80079f4:	3302      	adds	r3, #2
 80079f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 80079fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80079fe:	3348      	adds	r3, #72	; 0x48
 8007a00:	443b      	add	r3, r7
 8007a02:	797a      	ldrb	r2, [r7, #5]
 8007a04:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007a08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8007a12:	797b      	ldrb	r3, [r7, #5]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d103      	bne.n	8007a20 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a1e:	e002      	b.n	8007a26 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8007a26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a2a:	f107 020c 	add.w	r2, r7, #12
 8007a2e:	4413      	add	r3, r2
 8007a30:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ff3c 	bl	80088b4 <memcpy>
  indx +=  uuid_len;
 8007a3c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007a40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a44:	4413      	add	r3, r2
 8007a46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8007a4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a4e:	3348      	adds	r3, #72	; 0x48
 8007a50:	443b      	add	r3, r7
 8007a52:	793a      	ldrb	r2, [r7, #4]
 8007a54:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007a58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8007a62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a66:	3348      	adds	r3, #72	; 0x48
 8007a68:	443b      	add	r3, r7
 8007a6a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007a6e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007a72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a76:	3301      	adds	r3, #1
 8007a78:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8007a7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a80:	3348      	adds	r3, #72	; 0x48
 8007a82:	443b      	add	r3, r7
 8007a84:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8007a88:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007a8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a90:	3301      	adds	r3, #1
 8007a92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8007a96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a9a:	3348      	adds	r3, #72	; 0x48
 8007a9c:	443b      	add	r3, r7
 8007a9e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8007aa2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007aa6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007aaa:	3301      	adds	r3, #1
 8007aac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8007ab0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ab4:	3348      	adds	r3, #72	; 0x48
 8007ab6:	443b      	add	r3, r7
 8007ab8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8007abc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007ac0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8007aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ace:	3348      	adds	r3, #72	; 0x48
 8007ad0:	443b      	add	r3, r7
 8007ad2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007ad6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007ada:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ade:	3301      	adds	r3, #1
 8007ae0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ae8:	2203      	movs	r2, #3
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 feef 	bl	80088d0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007af6:	2218      	movs	r2, #24
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fee8 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007b00:	233f      	movs	r3, #63	; 0x3f
 8007b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8007b04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8007b10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8007b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8007b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fbee 	bl	8008308 <hci_send_req>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da01      	bge.n	8007b36 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8007b32:	23ff      	movs	r3, #255	; 0xff
 8007b34:	e00c      	b.n	8007b50 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8007b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <aci_gatt_add_char+0x182>
    return resp.status;
 8007b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b42:	e005      	b.n	8007b50 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8007b44:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b4c:	801a      	strh	r2, [r3, #0]

  return 0;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3748      	adds	r7, #72	; 0x48
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8007b58:	b5b0      	push	{r4, r5, r7, lr}
 8007b5a:	b0ca      	sub	sp, #296	; 0x128
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007b6a:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007b6e:	462a      	mov	r2, r5
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007b76:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007b82:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007b86:	4602      	mov	r2, r0
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007b8e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b92:	460a      	mov	r2, r1
 8007b94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8007b9c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ba0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2bfa      	cmp	r3, #250	; 0xfa
 8007ba8:	d901      	bls.n	8007bae <aci_gatt_update_char_value+0x56>
    return BLE_STATUS_INVALID_PARAMS;
 8007baa:	2342      	movs	r3, #66	; 0x42
 8007bac:	e09e      	b.n	8007cec <aci_gatt_update_char_value+0x194>

  servHandle = htobs(servHandle);
 8007bae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bb2:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007bb6:	881a      	ldrh	r2, [r3, #0]
 8007bb8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bbc:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007bc0:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8007bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc6:	f107 0208 	add.w	r2, r7, #8
 8007bca:	4413      	add	r3, r2
 8007bcc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007bd0:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8007bd4:	8812      	ldrh	r2, [r2, #0]
 8007bd6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bdc:	3302      	adds	r3, #2
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  charHandle = htobs(charHandle);
 8007be2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007be6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007bf0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bf4:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8007bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	4413      	add	r3, r2
 8007c00:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007c04:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8007c08:	8812      	ldrh	r2, [r2, #0]
 8007c0a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c10:	3302      	adds	r3, #2
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValOffset;
 8007c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c1a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007c1e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007c22:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007c26:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 8007c2a:	7809      	ldrb	r1, [r1, #0]
 8007c2c:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c32:	3301      	adds	r3, #1
 8007c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValueLen;
 8007c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007c40:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007c44:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007c48:	f5a1 7193 	sub.w	r1, r1, #294	; 0x126
 8007c4c:	7809      	ldrb	r1, [r1, #0]
 8007c4e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c54:	3301      	adds	r3, #1
 8007c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	18d0      	adds	r0, r2, r3
 8007c64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007c68:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8007c74:	f000 fe1e 	bl	80088b4 <memcpy>
  indx +=  charValueLen;
 8007c78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007c7c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007c80:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	4413      	add	r3, r2
 8007c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007c8c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007c90:	2218      	movs	r2, #24
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fe1b 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007c9a:	233f      	movs	r3, #63	; 0x3f
 8007c9c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8007ca0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007ca4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8007cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 8007cb8:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8007cbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 8007cc6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fb1b 	bl	8008308 <hci_send_req>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da01      	bge.n	8007cdc <aci_gatt_update_char_value+0x184>
    return BLE_STATUS_TIMEOUT;
 8007cd8:	23ff      	movs	r3, #255	; 0xff
 8007cda:	e007      	b.n	8007cec <aci_gatt_update_char_value+0x194>

  if (status) {
 8007cdc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <aci_gatt_update_char_value+0x192>
    return status;
 8007ce4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007ce8:	e000      	b.n	8007cec <aci_gatt_update_char_value+0x194>
  }

  return 0;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bdb0      	pop	{r4, r5, r7, pc}

08007cf6 <aci_gatt_update_char_value_ext_IDB05A1>:

tBleStatus aci_gatt_update_char_value_ext_IDB05A1(uint16_t service_handle, uint16_t char_handle,
                                                  uint8_t update_type, uint16_t char_length,
                                                  uint16_t value_offset, uint8_t value_length,
                                                  const uint8_t* value)
{
 8007cf6:	b5b0      	push	{r4, r5, r7, lr}
 8007cf8:	b0ca      	sub	sp, #296	; 0x128
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	4610      	mov	r0, r2
 8007d02:	4619      	mov	r1, r3
 8007d04:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d08:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d18:	4622      	mov	r2, r4
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d20:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007d24:	4602      	mov	r2, r0
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d30:	460a      	mov	r2, r1
 8007d32:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  gatt_upd_char_val_ext_cp cp;
  
  if(value_length > sizeof(cp.value))
 8007d34:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8007d38:	2bf6      	cmp	r3, #246	; 0xf6
 8007d3a:	d901      	bls.n	8007d40 <aci_gatt_update_char_value_ext_IDB05A1+0x4a>
    return BLE_STATUS_INVALID_PARAMS;
 8007d3c:	2342      	movs	r3, #66	; 0x42
 8007d3e:	e06c      	b.n	8007e1a <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  cp.service_handle = htobs(service_handle);
 8007d40:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d48:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007d4c:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8007d50:	8812      	ldrh	r2, [r2, #0]
 8007d52:	801a      	strh	r2, [r3, #0]
  cp.char_handle = htobs(char_handle);
 8007d54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d5c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007d60:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8007d64:	8812      	ldrh	r2, [r2, #0]
 8007d66:	805a      	strh	r2, [r3, #2]
  cp.update_type = update_type;
 8007d68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d70:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007d74:	f2a2 1225 	subw	r2, r2, #293	; 0x125
 8007d78:	7812      	ldrb	r2, [r2, #0]
 8007d7a:	711a      	strb	r2, [r3, #4]
  cp.char_length = htobs(char_length);
 8007d7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d84:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007d88:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	f8a3 2005 	strh.w	r2, [r3, #5]
  cp.value_offset = htobs(value_offset);
 8007d92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007d96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d9a:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8007d9e:	f8a3 2007 	strh.w	r2, [r3, #7]
  cp.value_length = value_length;
 8007da2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007da6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007daa:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8007dae:	725a      	strb	r2, [r3, #9]
  BLUENRG_memcpy(cp.value, value, value_length);
 8007db0:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	330a      	adds	r3, #10
 8007dba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd78 	bl	80088b4 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dc8:	2218      	movs	r2, #24
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fd7f 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007dd2:	233f      	movs	r3, #63	; 0x3f
 8007dd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = OCF_GATT_UPD_CHAR_VAL_EXT;
 8007dd8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007ddc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = &cp;
 8007de0:	f107 030c 	add.w	r3, r7, #12
 8007de4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = GATT_UPD_CHAR_VAL_EXT_CP_SIZE + value_length;
 8007de8:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8007dec:	330a      	adds	r3, #10
 8007dee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007df2:	f207 130f 	addw	r3, r7, #271	; 0x10f
 8007df6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007e00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fa7e 	bl	8008308 <hci_send_req>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	da01      	bge.n	8007e16 <aci_gatt_update_char_value_ext_IDB05A1+0x120>
    return BLE_STATUS_TIMEOUT;
 8007e12:	23ff      	movs	r3, #255	; 0xff
 8007e14:	e001      	b.n	8007e1a <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  return status;
 8007e16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bdb0      	pop	{r4, r5, r7, pc}

08007e24 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b0ca      	sub	sp, #296	; 0x128
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e44:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007e48:	460a      	mov	r2, r1
 8007e4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8007e52:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007e56:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2bff      	cmp	r3, #255	; 0xff
 8007e5e:	d101      	bne.n	8007e64 <aci_hal_write_config_data+0x40>
    return BLE_STATUS_INVALID_PARAMS;
 8007e60:	2342      	movs	r3, #66	; 0x42
 8007e62:	e065      	b.n	8007f30 <aci_hal_write_config_data+0x10c>

  buffer[indx] = offset;
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e68:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007e6c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007e70:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007e74:	f2a1 1121 	subw	r1, r1, #289	; 0x121
 8007e78:	7809      	ldrb	r1, [r1, #0]
 8007e7a:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e80:	3301      	adds	r3, #1
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 8007e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e8a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007e8e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007e92:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007e96:	f5a1 7191 	sub.w	r1, r1, #290	; 0x122
 8007e9a:	7809      	ldrb	r1, [r1, #0]
 8007e9c:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8007ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eac:	f107 0208 	add.w	r2, r7, #8
 8007eb0:	18d0      	adds	r0, r2, r3
 8007eb2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007eb6:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007eba:	781a      	ldrb	r2, [r3, #0]
 8007ebc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ec0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007ec4:	6819      	ldr	r1, [r3, #0]
 8007ec6:	f000 fcf5 	bl	80088b4 <memcpy>
  indx +=  len;
 8007eca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ece:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007ed2:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ede:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007ee2:	2218      	movs	r2, #24
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fcf2 	bl	80088d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007eec:	233f      	movs	r3, #63	; 0x3f
 8007eee:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 8007ef8:	f107 0308 	add.w	r3, r7, #8
 8007efc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 8007f08:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8007f0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 8007f16:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f9f3 	bl	8008308 <hci_send_req>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da01      	bge.n	8007f2c <aci_hal_write_config_data+0x108>
    return BLE_STATUS_TIMEOUT;
 8007f28:	23ff      	movs	r3, #255	; 0xff
 8007f2a:	e001      	b.n	8007f30 <aci_hal_write_config_data+0x10c>

  return status;
 8007f2c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8007f3a:	b590      	push	{r4, r7, lr}
 8007f3c:	b089      	sub	sp, #36	; 0x24
 8007f3e:	af02      	add	r7, sp, #8
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8007f44:	f107 0410 	add.w	r4, r7, #16
 8007f48:	f107 0215 	add.w	r2, r7, #21
 8007f4c:	f107 0112 	add.w	r1, r7, #18
 8007f50:	f107 0016 	add.w	r0, r7, #22
 8007f54:	f107 030e 	add.w	r3, r7, #14
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	f000 f853 	bl	8008006 <hci_le_read_local_version>
 8007f60:	4603      	mov	r3, r0
 8007f62:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d126      	bne.n	8007fb8 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8007f6a:	8a7b      	ldrh	r3, [r7, #18]
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8007f76:	8a7b      	ldrh	r3, [r7, #18]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b21a      	sxth	r2, r3
 8007f86:	89fb      	ldrh	r3, [r7, #14]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	b21b      	sxth	r3, r3
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	b21b      	sxth	r3, r3
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	89fb      	ldrh	r3, [r7, #14]
 8007fa6:	b21b      	sxth	r3, r3
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	b21b      	sxth	r3, r3
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}

08007fc2 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fc8:	f107 0308 	add.w	r3, r7, #8
 8007fcc:	2218      	movs	r2, #24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fc7d 	bl	80088d0 <memset>
  rq.ogf = OGF_HOST_CTL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fde:	1dfb      	adds	r3, r7, #7
 8007fe0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f98b 	bl	8008308 <hci_send_req>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da01      	bge.n	8007ffc <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8007ff8:	23ff      	movs	r3, #255	; 0xff
 8007ffa:	e000      	b.n	8007ffe <hci_reset+0x3c>
  
  return status;  
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b08e      	sub	sp, #56	; 0x38
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008014:	f107 0314 	add.w	r3, r7, #20
 8008018:	2209      	movs	r2, #9
 800801a:	2100      	movs	r1, #0
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fc57 	bl	80088d0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008022:	f107 0320 	add.w	r3, r7, #32
 8008026:	2218      	movs	r2, #24
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fc50 	bl	80088d0 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008030:	2304      	movs	r3, #4
 8008032:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008034:	2301      	movs	r3, #1
 8008036:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008046:	2309      	movs	r3, #9
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800804a:	f107 0320 	add.w	r3, r7, #32
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f959 	bl	8008308 <hci_send_req>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	da01      	bge.n	8008060 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800805c:	23ff      	movs	r3, #255	; 0xff
 800805e:	e018      	b.n	8008092 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008060:	7d3b      	ldrb	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <hci_le_read_local_version+0x64>
    return resp.status;
 8008066:	7d3b      	ldrb	r3, [r7, #20]
 8008068:	e013      	b.n	8008092 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800806a:	7d7a      	ldrb	r2, [r7, #21]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008070:	8afa      	ldrh	r2, [r7, #22]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008076:	7e3a      	ldrb	r2, [r7, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800807c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008080:	b29a      	uxth	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008086:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800808a:	b29a      	uxth	r2, r3
 800808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3738      	adds	r7, #56	; 0x38
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3308      	adds	r3, #8
 80080a6:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d001      	beq.n	80080b4 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80080b0:	2301      	movs	r3, #1
 80080b2:	e00c      	b.n	80080ce <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3302      	adds	r3, #2
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80080c2:	3b03      	subs	r3, #3
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d001      	beq.n	80080cc <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80080c8:	2302      	movs	r3, #2
 80080ca:	e000      	b.n	80080ce <verify_packet+0x34>
  
  return 0;      
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b0c7      	sub	sp, #284	; 0x11c
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80080ec:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80080f6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80080fa:	4622      	mov	r2, r4
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008106:	4602      	mov	r2, r0
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800810e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8008112:	460a      	mov	r2, r1
 8008114:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800811a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800811e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008126:	b21a      	sxth	r2, r3
 8008128:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800812c:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	029b      	lsls	r3, r3, #10
 8008134:	b21b      	sxth	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b21b      	sxth	r3, r3
 800813a:	b29a      	uxth	r2, r3
 800813c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008144:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8008146:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800814a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800814e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008152:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 800815a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800815e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008162:	2201      	movs	r2, #1
 8008164:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008166:	f107 0318 	add.w	r3, r7, #24
 800816a:	3301      	adds	r3, #1
 800816c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008170:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8008174:	8811      	ldrh	r1, [r2, #0]
 8008176:	7892      	ldrb	r2, [r2, #2]
 8008178:	8019      	strh	r1, [r3, #0]
 800817a:	709a      	strb	r2, [r3, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800817c:	f107 0318 	add.w	r3, r7, #24
 8008180:	3304      	adds	r3, #4
 8008182:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008186:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800818a:	7812      	ldrb	r2, [r2, #0]
 800818c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008190:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8008194:	6809      	ldr	r1, [r1, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fb8c 	bl	80088b4 <memcpy>
  
  if (hciContext.io.Send)
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <send_cmd+0xf0>)
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00d      	beq.n	80081c0 <send_cmd+0xe4>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80081a4:	4b09      	ldr	r3, [pc, #36]	; (80081cc <send_cmd+0xf0>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80081ac:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	b292      	uxth	r2, r2
 80081b4:	3204      	adds	r2, #4
 80081b6:	b291      	uxth	r1, r2
 80081b8:	f107 0218 	add.w	r2, r7, #24
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
  }
}
 80081c0:	bf00      	nop
 80081c2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd90      	pop	{r4, r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000b10 	.word	0x20000b10

080081d0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80081da:	e00a      	b.n	80081f2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80081dc:	f107 030c 	add.w	r3, r7, #12
 80081e0:	4619      	mov	r1, r3
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f000 faec 	bl	80087c0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa53 	bl	8008698 <list_insert_head>
  while (!list_is_empty(src_list))
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f000 fa2e 	bl	8008654 <list_is_empty>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ee      	beq.n	80081dc <move_list+0xc>
  }
}
 80081fe:	bf00      	nop
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800820e:	e009      	b.n	8008224 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008210:	1d3b      	adds	r3, r7, #4
 8008212:	4619      	mov	r1, r3
 8008214:	4809      	ldr	r0, [pc, #36]	; (800823c <free_event_list+0x34>)
 8008216:	f000 faac 	bl	8008772 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4619      	mov	r1, r3
 800821e:	4808      	ldr	r0, [pc, #32]	; (8008240 <free_event_list+0x38>)
 8008220:	f000 fa60 	bl	80086e4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <free_event_list+0x38>)
 8008226:	f000 faf2 	bl	800880e <list_get_size>
 800822a:	4603      	mov	r3, r0
 800822c:	2b01      	cmp	r3, #1
 800822e:	ddef      	ble.n	8008210 <free_event_list+0x8>
  }
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200005cc 	.word	0x200005cc
 8008240:	200005c4 	.word	0x200005c4

08008244 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008254:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <hci_init+0x74>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800825a:	4818      	ldr	r0, [pc, #96]	; (80082bc <hci_init+0x78>)
 800825c:	f000 f9ea 	bl	8008634 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008260:	4817      	ldr	r0, [pc, #92]	; (80082c0 <hci_init+0x7c>)
 8008262:	f000 f9e7 	bl	8008634 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008266:	f7f8 fad3 	bl	8000810 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
 800826e:	e00d      	b.n	800828c <hci_init+0x48>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	4a12      	ldr	r2, [pc, #72]	; (80082c4 <hci_init+0x80>)
 800827c:	4413      	add	r3, r2
 800827e:	4619      	mov	r1, r3
 8008280:	480e      	ldr	r0, [pc, #56]	; (80082bc <hci_init+0x78>)
 8008282:	f000 fa2f 	bl	80086e4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	3301      	adds	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d9ee      	bls.n	8008270 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <hci_init+0x74>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <hci_init+0x5e>
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <hci_init+0x74>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2000      	movs	r0, #0
 80082a0:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <hci_init+0x74>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <hci_init+0x6c>
 80082aa:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <hci_init+0x74>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	4798      	blx	r3
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000b10 	.word	0x20000b10
 80082bc:	200005c4 	.word	0x200005c4
 80082c0:	200005cc 	.word	0x200005cc
 80082c4:	200005d4 	.word	0x200005d4

080082c8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <hci_register_io_bus+0x3c>)
 80082d6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	4a09      	ldr	r2, [pc, #36]	; (8008304 <hci_register_io_bus+0x3c>)
 80082de:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	4a07      	ldr	r2, [pc, #28]	; (8008304 <hci_register_io_bus+0x3c>)
 80082e6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <hci_register_io_bus+0x3c>)
 80082ee:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	4a03      	ldr	r2, [pc, #12]	; (8008304 <hci_register_io_bus+0x3c>)
 80082f6:	6093      	str	r3, [r2, #8]
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20000b10 	.word	0x20000b10

08008308 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08e      	sub	sp, #56	; 0x38
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	885b      	ldrh	r3, [r3, #2]
 8008318:	b21b      	sxth	r3, r3
 800831a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800831e:	b21a      	sxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	b21b      	sxth	r3, r3
 8008328:	4313      	orrs	r3, r2
 800832a:	b21b      	sxth	r3, r3
 800832c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008332:	f107 0308 	add.w	r3, r7, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f97c 	bl	8008634 <list_init_head>

  free_event_list();
 800833c:	f7ff ff64 	bl	8008208 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8818      	ldrh	r0, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8859      	ldrh	r1, [r3, #2]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f7ff fec3 	bl	80080dc <send_cmd>
  
  if (async)
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <hci_send_req+0x58>
  {
    return 0;
 800835c:	2300      	movs	r3, #0
 800835e:	e0e5      	b.n	800852c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008360:	f7fa f9b6 	bl	80026d0 <HAL_GetTick>
 8008364:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008366:	f7fa f9b3 	bl	80026d0 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008374:	f200 80b6 	bhi.w	80084e4 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008378:	486e      	ldr	r0, [pc, #440]	; (8008534 <hci_send_req+0x22c>)
 800837a:	f000 f96b 	bl	8008654 <list_is_empty>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d000      	beq.n	8008386 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008384:	e7ef      	b.n	8008366 <hci_send_req+0x5e>
      {
        break;
 8008386:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4619      	mov	r1, r3
 800838e:	4869      	ldr	r0, [pc, #420]	; (8008534 <hci_send_req+0x22c>)
 8008390:	f000 f9ef 	bl	8008772 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	3308      	adds	r3, #8
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d17b      	bne.n	800849a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	3301      	adds	r3, #1
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3308      	adds	r3, #8
 80083ac:	3303      	adds	r3, #3
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80083b6:	3b03      	subs	r3, #3
 80083b8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b3e      	cmp	r3, #62	; 0x3e
 80083c0:	d04d      	beq.n	800845e <hci_send_req+0x156>
 80083c2:	2b3e      	cmp	r3, #62	; 0x3e
 80083c4:	dc6b      	bgt.n	800849e <hci_send_req+0x196>
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	f000 808e 	beq.w	80084e8 <hci_send_req+0x1e0>
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	dc66      	bgt.n	800849e <hci_send_req+0x196>
 80083d0:	2b0e      	cmp	r3, #14
 80083d2:	d024      	beq.n	800841e <hci_send_req+0x116>
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d162      	bne.n	800849e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f040 8081 	bne.w	80084ec <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b0f      	cmp	r3, #15
 80083f0:	d004      	beq.n	80083fc <hci_send_req+0xf4>
          if (cs->status) {
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d053      	beq.n	80084a2 <hci_send_req+0x19a>
            goto failed;
 80083fa:	e07a      	b.n	80084f2 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695a      	ldr	r2, [r3, #20]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	429a      	cmp	r2, r3
 8008404:	bf28      	it	cs
 8008406:	461a      	movcs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6918      	ldr	r0, [r3, #16]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	461a      	mov	r2, r3
 8008416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008418:	f000 fa4c 	bl	80088b4 <memcpy>
        goto done;
 800841c:	e07a      	b.n	8008514 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008428:	b29b      	uxth	r3, r3
 800842a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800842c:	429a      	cmp	r2, r3
 800842e:	d15f      	bne.n	80084f0 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	3303      	adds	r3, #3
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	3b03      	subs	r3, #3
 800843a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	695a      	ldr	r2, [r3, #20]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	429a      	cmp	r2, r3
 8008444:	bf28      	it	cs
 8008446:	461a      	movcs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6918      	ldr	r0, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	461a      	mov	r2, r3
 8008456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008458:	f000 fa2c 	bl	80088b4 <memcpy>
        goto done;
 800845c:	e05a      	b.n	8008514 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d11a      	bne.n	80084a6 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	3b01      	subs	r3, #1
 8008474:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695a      	ldr	r2, [r3, #20]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	429a      	cmp	r2, r3
 800847e:	bf28      	it	cs
 8008480:	461a      	movcs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6918      	ldr	r0, [r3, #16]
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	1c59      	adds	r1, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	461a      	mov	r2, r3
 8008494:	f000 fa0e 	bl	80088b4 <memcpy>
        goto done;
 8008498:	e03c      	b.n	8008514 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800849a:	bf00      	nop
 800849c:	e004      	b.n	80084a8 <hci_send_req+0x1a0>
        break;
 800849e:	bf00      	nop
 80084a0:	e002      	b.n	80084a8 <hci_send_req+0x1a0>
          break;
 80084a2:	bf00      	nop
 80084a4:	e000      	b.n	80084a8 <hci_send_req+0x1a0>
          break;
 80084a6:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80084a8:	4823      	ldr	r0, [pc, #140]	; (8008538 <hci_send_req+0x230>)
 80084aa:	f000 f8d3 	bl	8008654 <list_is_empty>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <hci_send_req+0x1c8>
 80084b4:	481f      	ldr	r0, [pc, #124]	; (8008534 <hci_send_req+0x22c>)
 80084b6:	f000 f8cd 	bl	8008654 <list_is_empty>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4619      	mov	r1, r3
 80084c4:	481c      	ldr	r0, [pc, #112]	; (8008538 <hci_send_req+0x230>)
 80084c6:	f000 f90d 	bl	80086e4 <list_insert_tail>
      hciReadPacket=NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e008      	b.n	80084e2 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f903 	bl	80086e4 <list_insert_tail>
      hciReadPacket=NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  {
 80084e2:	e73d      	b.n	8008360 <hci_send_req+0x58>
        goto failed;
 80084e4:	bf00      	nop
 80084e6:	e004      	b.n	80084f2 <hci_send_req+0x1ea>
        goto failed;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <hci_send_req+0x1ea>
          goto failed;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <hci_send_req+0x1ea>
          goto failed;
 80084f0:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4619      	mov	r1, r3
 80084fc:	480e      	ldr	r0, [pc, #56]	; (8008538 <hci_send_req+0x230>)
 80084fe:	f000 f8cb 	bl	8008698 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4619      	mov	r1, r3
 8008508:	480a      	ldr	r0, [pc, #40]	; (8008534 <hci_send_req+0x22c>)
 800850a:	f7ff fe61 	bl	80081d0 <move_list>

  return -1;
 800850e:	f04f 33ff 	mov.w	r3, #4294967295
 8008512:	e00b      	b.n	800852c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4619      	mov	r1, r3
 8008518:	4807      	ldr	r0, [pc, #28]	; (8008538 <hci_send_req+0x230>)
 800851a:	f000 f8bd 	bl	8008698 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	4619      	mov	r1, r3
 8008524:	4803      	ldr	r0, [pc, #12]	; (8008534 <hci_send_req+0x22c>)
 8008526:	f7ff fe53 	bl	80081d0 <move_list>

  return 0;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3738      	adds	r7, #56	; 0x38
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200005cc 	.word	0x200005cc
 8008538:	200005c4 	.word	0x200005c4

0800853c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008546:	e013      	b.n	8008570 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008548:	1d3b      	adds	r3, r7, #4
 800854a:	4619      	mov	r1, r3
 800854c:	480e      	ldr	r0, [pc, #56]	; (8008588 <hci_user_evt_proc+0x4c>)
 800854e:	f000 f910 	bl	8008772 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008552:	4b0e      	ldr	r3, [pc, #56]	; (800858c <hci_user_evt_proc+0x50>)
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800855a:	4b0c      	ldr	r3, [pc, #48]	; (800858c <hci_user_evt_proc+0x50>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	3208      	adds	r2, #8
 8008562:	4610      	mov	r0, r2
 8008564:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4619      	mov	r1, r3
 800856a:	4809      	ldr	r0, [pc, #36]	; (8008590 <hci_user_evt_proc+0x54>)
 800856c:	f000 f8ba 	bl	80086e4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008570:	4805      	ldr	r0, [pc, #20]	; (8008588 <hci_user_evt_proc+0x4c>)
 8008572:	f000 f86f 	bl	8008654 <list_is_empty>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0e5      	beq.n	8008548 <hci_user_evt_proc+0xc>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200005cc 	.word	0x200005cc
 800858c:	20000b10 	.word	0x20000b10
 8008590:	200005c4 	.word	0x200005c4

08008594 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80085a4:	4820      	ldr	r0, [pc, #128]	; (8008628 <hci_notify_asynch_evt+0x94>)
 80085a6:	f000 f855 	bl	8008654 <list_is_empty>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d133      	bne.n	8008618 <hci_notify_asynch_evt+0x84>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	4619      	mov	r1, r3
 80085b6:	481c      	ldr	r0, [pc, #112]	; (8008628 <hci_notify_asynch_evt+0x94>)
 80085b8:	f000 f8db 	bl	8008772 <list_remove_head>
    
    if (hciContext.io.Receive)
 80085bc:	4b1b      	ldr	r3, [pc, #108]	; (800862c <hci_notify_asynch_evt+0x98>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d02b      	beq.n	800861c <hci_notify_asynch_evt+0x88>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80085c4:	4b19      	ldr	r3, [pc, #100]	; (800862c <hci_notify_asynch_evt+0x98>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	3208      	adds	r2, #8
 80085cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80085d8:	7cfb      	ldrb	r3, [r7, #19]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d016      	beq.n	800860c <hci_notify_asynch_evt+0x78>
      {                    
        hciReadPacket->data_len = data_len;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7cfa      	ldrb	r2, [r7, #19]
 80085e2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (verify_packet(hciReadPacket) == 0)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fd56 	bl	800809a <verify_packet>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <hci_notify_asynch_evt+0x6c>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4619      	mov	r1, r3
 80085f8:	480d      	ldr	r0, [pc, #52]	; (8008630 <hci_notify_asynch_evt+0x9c>)
 80085fa:	f000 f873 	bl	80086e4 <list_insert_tail>
 80085fe:	e00d      	b.n	800861c <hci_notify_asynch_evt+0x88>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4619      	mov	r1, r3
 8008604:	4808      	ldr	r0, [pc, #32]	; (8008628 <hci_notify_asynch_evt+0x94>)
 8008606:	f000 f847 	bl	8008698 <list_insert_head>
 800860a:	e007      	b.n	800861c <hci_notify_asynch_evt+0x88>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4619      	mov	r1, r3
 8008610:	4805      	ldr	r0, [pc, #20]	; (8008628 <hci_notify_asynch_evt+0x94>)
 8008612:	f000 f841 	bl	8008698 <list_insert_head>
 8008616:	e001      	b.n	800861c <hci_notify_asynch_evt+0x88>
      }
    }
  }
  else 
  {
    ret = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800861c:	697b      	ldr	r3, [r7, #20]

}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200005c4 	.word	0x200005c4
 800862c:	20000b10 	.word	0x20000b10
 8008630:	200005cc 	.word	0x200005cc

08008634 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	605a      	str	r2, [r3, #4]
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865c:	f3ef 8310 	mrs	r3, PRIMASK
 8008660:	60fb      	str	r3, [r7, #12]
  return(result);
 8008662:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008666:	b672      	cpsid	i
}
 8008668:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d102      	bne.n	800867a <list_is_empty+0x26>
  {
    return_value = 1;
 8008674:	2301      	movs	r3, #1
 8008676:	75fb      	strb	r3, [r7, #23]
 8008678:	e001      	b.n	800867e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	75fb      	strb	r3, [r7, #23]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f383 8810 	msr	PRIMASK, r3
}
 8008688:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a2:	f3ef 8310 	mrs	r3, PRIMASK
 80086a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086ac:	b672      	cpsid	i
}
 80086ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f383 8810 	msr	PRIMASK, r3
}
 80086d6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80086d8:	bf00      	nop
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ee:	f3ef 8310 	mrs	r3, PRIMASK
 80086f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086f8:	b672      	cpsid	i
}
 80086fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f383 8810 	msr	PRIMASK, r3
}
 8008722:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008738:	f3ef 8310 	mrs	r3, PRIMASK
 800873c:	60fb      	str	r3, [r7, #12]
  return(result);
 800873e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008742:	b672      	cpsid	i
}
 8008744:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6852      	ldr	r2, [r2, #4]
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f383 8810 	msr	PRIMASK, r3
}
 8008764:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877c:	f3ef 8310 	mrs	r3, PRIMASK
 8008780:	60fb      	str	r3, [r7, #12]
  return(result);
 8008782:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008784:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008786:	b672      	cpsid	i
}
 8008788:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff ffca 	bl	8008730 <list_remove_node>
  (*node)->next = NULL;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f383 8810 	msr	PRIMASK, r3
}
 80087b6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ca:	f3ef 8310 	mrs	r3, PRIMASK
 80087ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80087d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087d4:	b672      	cpsid	i
}
 80087d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff ffa3 	bl	8008730 <list_remove_node>
  (*node)->next = NULL;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f383 8810 	msr	PRIMASK, r3
}
 8008804:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008806:	bf00      	nop
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800880e:	b480      	push	{r7}
 8008810:	b089      	sub	sp, #36	; 0x24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881a:	f3ef 8310 	mrs	r3, PRIMASK
 800881e:	613b      	str	r3, [r7, #16]
  return(result);
 8008820:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008824:	b672      	cpsid	i
}
 8008826:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800882e:	e005      	b.n	800883c <list_get_size+0x2e>
  {
    size++;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	3301      	adds	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d1f5      	bne.n	8008830 <list_get_size+0x22>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3724      	adds	r7, #36	; 0x24
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <__errno>:
 8008860:	4b01      	ldr	r3, [pc, #4]	; (8008868 <__errno+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20000074 	.word	0x20000074

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4d0d      	ldr	r5, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2600      	movs	r6, #0
 8008878:	42a6      	cmp	r6, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4d0b      	ldr	r5, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f001 f832 	bl	80098e8 <_init>
 8008884:	1b64      	subs	r4, r4, r5
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2600      	movs	r6, #0
 800888a:	42a6      	cmp	r6, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f855 3b04 	ldr.w	r3, [r5], #4
 8008894:	4798      	blx	r3
 8008896:	3601      	adds	r6, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f855 3b04 	ldr.w	r3, [r5], #4
 800889e:	4798      	blx	r3
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	08009f48 	.word	0x08009f48
 80088a8:	08009f48 	.word	0x08009f48
 80088ac:	08009f48 	.word	0x08009f48
 80088b0:	08009f4c 	.word	0x08009f4c

080088b4 <memcpy>:
 80088b4:	440a      	add	r2, r1
 80088b6:	4291      	cmp	r1, r2
 80088b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088bc:	d100      	bne.n	80088c0 <memcpy+0xc>
 80088be:	4770      	bx	lr
 80088c0:	b510      	push	{r4, lr}
 80088c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ca:	4291      	cmp	r1, r2
 80088cc:	d1f9      	bne.n	80088c2 <memcpy+0xe>
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <memset>:
 80088d0:	4402      	add	r2, r0
 80088d2:	4603      	mov	r3, r0
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d100      	bne.n	80088da <memset+0xa>
 80088d8:	4770      	bx	lr
 80088da:	f803 1b01 	strb.w	r1, [r3], #1
 80088de:	e7f9      	b.n	80088d4 <memset+0x4>

080088e0 <iprintf>:
 80088e0:	b40f      	push	{r0, r1, r2, r3}
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <iprintf+0x2c>)
 80088e4:	b513      	push	{r0, r1, r4, lr}
 80088e6:	681c      	ldr	r4, [r3, #0]
 80088e8:	b124      	cbz	r4, 80088f4 <iprintf+0x14>
 80088ea:	69a3      	ldr	r3, [r4, #24]
 80088ec:	b913      	cbnz	r3, 80088f4 <iprintf+0x14>
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fa5e 	bl	8008db0 <__sinit>
 80088f4:	ab05      	add	r3, sp, #20
 80088f6:	9a04      	ldr	r2, [sp, #16]
 80088f8:	68a1      	ldr	r1, [r4, #8]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fc67 	bl	80091d0 <_vfiprintf_r>
 8008902:	b002      	add	sp, #8
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	b004      	add	sp, #16
 800890a:	4770      	bx	lr
 800890c:	20000074 	.word	0x20000074

08008910 <_puts_r>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	460e      	mov	r6, r1
 8008914:	4605      	mov	r5, r0
 8008916:	b118      	cbz	r0, 8008920 <_puts_r+0x10>
 8008918:	6983      	ldr	r3, [r0, #24]
 800891a:	b90b      	cbnz	r3, 8008920 <_puts_r+0x10>
 800891c:	f000 fa48 	bl	8008db0 <__sinit>
 8008920:	69ab      	ldr	r3, [r5, #24]
 8008922:	68ac      	ldr	r4, [r5, #8]
 8008924:	b913      	cbnz	r3, 800892c <_puts_r+0x1c>
 8008926:	4628      	mov	r0, r5
 8008928:	f000 fa42 	bl	8008db0 <__sinit>
 800892c:	4b2c      	ldr	r3, [pc, #176]	; (80089e0 <_puts_r+0xd0>)
 800892e:	429c      	cmp	r4, r3
 8008930:	d120      	bne.n	8008974 <_puts_r+0x64>
 8008932:	686c      	ldr	r4, [r5, #4]
 8008934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d405      	bmi.n	8008946 <_puts_r+0x36>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	0598      	lsls	r0, r3, #22
 800893e:	d402      	bmi.n	8008946 <_puts_r+0x36>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f000 fad3 	bl	8008eec <__retarget_lock_acquire_recursive>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	0719      	lsls	r1, r3, #28
 800894a:	d51d      	bpl.n	8008988 <_puts_r+0x78>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b1db      	cbz	r3, 8008988 <_puts_r+0x78>
 8008950:	3e01      	subs	r6, #1
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008958:	3b01      	subs	r3, #1
 800895a:	60a3      	str	r3, [r4, #8]
 800895c:	bb39      	cbnz	r1, 80089ae <_puts_r+0x9e>
 800895e:	2b00      	cmp	r3, #0
 8008960:	da38      	bge.n	80089d4 <_puts_r+0xc4>
 8008962:	4622      	mov	r2, r4
 8008964:	210a      	movs	r1, #10
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f848 	bl	80089fc <__swbuf_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d011      	beq.n	8008994 <_puts_r+0x84>
 8008970:	250a      	movs	r5, #10
 8008972:	e011      	b.n	8008998 <_puts_r+0x88>
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <_puts_r+0xd4>)
 8008976:	429c      	cmp	r4, r3
 8008978:	d101      	bne.n	800897e <_puts_r+0x6e>
 800897a:	68ac      	ldr	r4, [r5, #8]
 800897c:	e7da      	b.n	8008934 <_puts_r+0x24>
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <_puts_r+0xd8>)
 8008980:	429c      	cmp	r4, r3
 8008982:	bf08      	it	eq
 8008984:	68ec      	ldreq	r4, [r5, #12]
 8008986:	e7d5      	b.n	8008934 <_puts_r+0x24>
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f888 	bl	8008aa0 <__swsetup_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	d0dd      	beq.n	8008950 <_puts_r+0x40>
 8008994:	f04f 35ff 	mov.w	r5, #4294967295
 8008998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899a:	07da      	lsls	r2, r3, #31
 800899c:	d405      	bmi.n	80089aa <_puts_r+0x9a>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_puts_r+0x9a>
 80089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a6:	f000 faa2 	bl	8008eee <__retarget_lock_release_recursive>
 80089aa:	4628      	mov	r0, r5
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	da04      	bge.n	80089bc <_puts_r+0xac>
 80089b2:	69a2      	ldr	r2, [r4, #24]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	dc06      	bgt.n	80089c6 <_puts_r+0xb6>
 80089b8:	290a      	cmp	r1, #10
 80089ba:	d004      	beq.n	80089c6 <_puts_r+0xb6>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	7019      	strb	r1, [r3, #0]
 80089c4:	e7c5      	b.n	8008952 <_puts_r+0x42>
 80089c6:	4622      	mov	r2, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 f817 	bl	80089fc <__swbuf_r>
 80089ce:	3001      	adds	r0, #1
 80089d0:	d1bf      	bne.n	8008952 <_puts_r+0x42>
 80089d2:	e7df      	b.n	8008994 <_puts_r+0x84>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	250a      	movs	r5, #10
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	701d      	strb	r5, [r3, #0]
 80089de:	e7db      	b.n	8008998 <_puts_r+0x88>
 80089e0:	08009ecc 	.word	0x08009ecc
 80089e4:	08009eec 	.word	0x08009eec
 80089e8:	08009eac 	.word	0x08009eac

080089ec <puts>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <puts+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f7ff bf8d 	b.w	8008910 <_puts_r>
 80089f6:	bf00      	nop
 80089f8:	20000074 	.word	0x20000074

080089fc <__swbuf_r>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	460e      	mov	r6, r1
 8008a00:	4614      	mov	r4, r2
 8008a02:	4605      	mov	r5, r0
 8008a04:	b118      	cbz	r0, 8008a0e <__swbuf_r+0x12>
 8008a06:	6983      	ldr	r3, [r0, #24]
 8008a08:	b90b      	cbnz	r3, 8008a0e <__swbuf_r+0x12>
 8008a0a:	f000 f9d1 	bl	8008db0 <__sinit>
 8008a0e:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <__swbuf_r+0x98>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	d12b      	bne.n	8008a6c <__swbuf_r+0x70>
 8008a14:	686c      	ldr	r4, [r5, #4]
 8008a16:	69a3      	ldr	r3, [r4, #24]
 8008a18:	60a3      	str	r3, [r4, #8]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	071a      	lsls	r2, r3, #28
 8008a1e:	d52f      	bpl.n	8008a80 <__swbuf_r+0x84>
 8008a20:	6923      	ldr	r3, [r4, #16]
 8008a22:	b36b      	cbz	r3, 8008a80 <__swbuf_r+0x84>
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	6820      	ldr	r0, [r4, #0]
 8008a28:	1ac0      	subs	r0, r0, r3
 8008a2a:	6963      	ldr	r3, [r4, #20]
 8008a2c:	b2f6      	uxtb	r6, r6
 8008a2e:	4283      	cmp	r3, r0
 8008a30:	4637      	mov	r7, r6
 8008a32:	dc04      	bgt.n	8008a3e <__swbuf_r+0x42>
 8008a34:	4621      	mov	r1, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f926 	bl	8008c88 <_fflush_r>
 8008a3c:	bb30      	cbnz	r0, 8008a8c <__swbuf_r+0x90>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	60a3      	str	r3, [r4, #8]
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	701e      	strb	r6, [r3, #0]
 8008a4c:	6963      	ldr	r3, [r4, #20]
 8008a4e:	3001      	adds	r0, #1
 8008a50:	4283      	cmp	r3, r0
 8008a52:	d004      	beq.n	8008a5e <__swbuf_r+0x62>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	07db      	lsls	r3, r3, #31
 8008a58:	d506      	bpl.n	8008a68 <__swbuf_r+0x6c>
 8008a5a:	2e0a      	cmp	r6, #10
 8008a5c:	d104      	bne.n	8008a68 <__swbuf_r+0x6c>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 f911 	bl	8008c88 <_fflush_r>
 8008a66:	b988      	cbnz	r0, 8008a8c <__swbuf_r+0x90>
 8008a68:	4638      	mov	r0, r7
 8008a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <__swbuf_r+0x9c>)
 8008a6e:	429c      	cmp	r4, r3
 8008a70:	d101      	bne.n	8008a76 <__swbuf_r+0x7a>
 8008a72:	68ac      	ldr	r4, [r5, #8]
 8008a74:	e7cf      	b.n	8008a16 <__swbuf_r+0x1a>
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <__swbuf_r+0xa0>)
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	bf08      	it	eq
 8008a7c:	68ec      	ldreq	r4, [r5, #12]
 8008a7e:	e7ca      	b.n	8008a16 <__swbuf_r+0x1a>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 f80c 	bl	8008aa0 <__swsetup_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0cb      	beq.n	8008a24 <__swbuf_r+0x28>
 8008a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a90:	e7ea      	b.n	8008a68 <__swbuf_r+0x6c>
 8008a92:	bf00      	nop
 8008a94:	08009ecc 	.word	0x08009ecc
 8008a98:	08009eec 	.word	0x08009eec
 8008a9c:	08009eac 	.word	0x08009eac

08008aa0 <__swsetup_r>:
 8008aa0:	4b32      	ldr	r3, [pc, #200]	; (8008b6c <__swsetup_r+0xcc>)
 8008aa2:	b570      	push	{r4, r5, r6, lr}
 8008aa4:	681d      	ldr	r5, [r3, #0]
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	b125      	cbz	r5, 8008ab6 <__swsetup_r+0x16>
 8008aac:	69ab      	ldr	r3, [r5, #24]
 8008aae:	b913      	cbnz	r3, 8008ab6 <__swsetup_r+0x16>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f000 f97d 	bl	8008db0 <__sinit>
 8008ab6:	4b2e      	ldr	r3, [pc, #184]	; (8008b70 <__swsetup_r+0xd0>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d10f      	bne.n	8008adc <__swsetup_r+0x3c>
 8008abc:	686c      	ldr	r4, [r5, #4]
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac4:	0719      	lsls	r1, r3, #28
 8008ac6:	d42c      	bmi.n	8008b22 <__swsetup_r+0x82>
 8008ac8:	06dd      	lsls	r5, r3, #27
 8008aca:	d411      	bmi.n	8008af0 <__swsetup_r+0x50>
 8008acc:	2309      	movs	r3, #9
 8008ace:	6033      	str	r3, [r6, #0]
 8008ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	e03e      	b.n	8008b5a <__swsetup_r+0xba>
 8008adc:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <__swsetup_r+0xd4>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d101      	bne.n	8008ae6 <__swsetup_r+0x46>
 8008ae2:	68ac      	ldr	r4, [r5, #8]
 8008ae4:	e7eb      	b.n	8008abe <__swsetup_r+0x1e>
 8008ae6:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <__swsetup_r+0xd8>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	bf08      	it	eq
 8008aec:	68ec      	ldreq	r4, [r5, #12]
 8008aee:	e7e6      	b.n	8008abe <__swsetup_r+0x1e>
 8008af0:	0758      	lsls	r0, r3, #29
 8008af2:	d512      	bpl.n	8008b1a <__swsetup_r+0x7a>
 8008af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af6:	b141      	cbz	r1, 8008b0a <__swsetup_r+0x6a>
 8008af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008afc:	4299      	cmp	r1, r3
 8008afe:	d002      	beq.n	8008b06 <__swsetup_r+0x66>
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 fa5b 	bl	8008fbc <_free_r>
 8008b06:	2300      	movs	r3, #0
 8008b08:	6363      	str	r3, [r4, #52]	; 0x34
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	2300      	movs	r3, #0
 8008b14:	6063      	str	r3, [r4, #4]
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f043 0308 	orr.w	r3, r3, #8
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	b94b      	cbnz	r3, 8008b3a <__swsetup_r+0x9a>
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b30:	d003      	beq.n	8008b3a <__swsetup_r+0x9a>
 8008b32:	4621      	mov	r1, r4
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 fa01 	bl	8008f3c <__smakebuf_r>
 8008b3a:	89a0      	ldrh	r0, [r4, #12]
 8008b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b40:	f010 0301 	ands.w	r3, r0, #1
 8008b44:	d00a      	beq.n	8008b5c <__swsetup_r+0xbc>
 8008b46:	2300      	movs	r3, #0
 8008b48:	60a3      	str	r3, [r4, #8]
 8008b4a:	6963      	ldr	r3, [r4, #20]
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	61a3      	str	r3, [r4, #24]
 8008b50:	6923      	ldr	r3, [r4, #16]
 8008b52:	b943      	cbnz	r3, 8008b66 <__swsetup_r+0xc6>
 8008b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b58:	d1ba      	bne.n	8008ad0 <__swsetup_r+0x30>
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	0781      	lsls	r1, r0, #30
 8008b5e:	bf58      	it	pl
 8008b60:	6963      	ldrpl	r3, [r4, #20]
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	e7f4      	b.n	8008b50 <__swsetup_r+0xb0>
 8008b66:	2000      	movs	r0, #0
 8008b68:	e7f7      	b.n	8008b5a <__swsetup_r+0xba>
 8008b6a:	bf00      	nop
 8008b6c:	20000074 	.word	0x20000074
 8008b70:	08009ecc 	.word	0x08009ecc
 8008b74:	08009eec 	.word	0x08009eec
 8008b78:	08009eac 	.word	0x08009eac

08008b7c <__sflush_r>:
 8008b7c:	898a      	ldrh	r2, [r1, #12]
 8008b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	4605      	mov	r5, r0
 8008b84:	0710      	lsls	r0, r2, #28
 8008b86:	460c      	mov	r4, r1
 8008b88:	d458      	bmi.n	8008c3c <__sflush_r+0xc0>
 8008b8a:	684b      	ldr	r3, [r1, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc05      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dc02      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d0f9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba8:	682f      	ldr	r7, [r5, #0]
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	d032      	beq.n	8008c14 <__sflush_r+0x98>
 8008bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	075a      	lsls	r2, r3, #29
 8008bb4:	d505      	bpl.n	8008bc2 <__sflush_r+0x46>
 8008bb6:	6863      	ldr	r3, [r4, #4]
 8008bb8:	1ac0      	subs	r0, r0, r3
 8008bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bbc:	b10b      	cbz	r3, 8008bc2 <__sflush_r+0x46>
 8008bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc0:	1ac0      	subs	r0, r0, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc8:	6a21      	ldr	r1, [r4, #32]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b0      	blx	r6
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	d106      	bne.n	8008be2 <__sflush_r+0x66>
 8008bd4:	6829      	ldr	r1, [r5, #0]
 8008bd6:	291d      	cmp	r1, #29
 8008bd8:	d82c      	bhi.n	8008c34 <__sflush_r+0xb8>
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <__sflush_r+0x108>)
 8008bdc:	40ca      	lsrs	r2, r1
 8008bde:	07d6      	lsls	r6, r2, #31
 8008be0:	d528      	bpl.n	8008c34 <__sflush_r+0xb8>
 8008be2:	2200      	movs	r2, #0
 8008be4:	6062      	str	r2, [r4, #4]
 8008be6:	04d9      	lsls	r1, r3, #19
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	d504      	bpl.n	8008bf8 <__sflush_r+0x7c>
 8008bee:	1c42      	adds	r2, r0, #1
 8008bf0:	d101      	bne.n	8008bf6 <__sflush_r+0x7a>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b903      	cbnz	r3, 8008bf8 <__sflush_r+0x7c>
 8008bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfa:	602f      	str	r7, [r5, #0]
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d0ca      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c04:	4299      	cmp	r1, r3
 8008c06:	d002      	beq.n	8008c0e <__sflush_r+0x92>
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 f9d7 	bl	8008fbc <_free_r>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	6360      	str	r0, [r4, #52]	; 0x34
 8008c12:	e7c1      	b.n	8008b98 <__sflush_r+0x1c>
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	2301      	movs	r3, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b0      	blx	r6
 8008c1c:	1c41      	adds	r1, r0, #1
 8008c1e:	d1c7      	bne.n	8008bb0 <__sflush_r+0x34>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0c4      	beq.n	8008bb0 <__sflush_r+0x34>
 8008c26:	2b1d      	cmp	r3, #29
 8008c28:	d001      	beq.n	8008c2e <__sflush_r+0xb2>
 8008c2a:	2b16      	cmp	r3, #22
 8008c2c:	d101      	bne.n	8008c32 <__sflush_r+0xb6>
 8008c2e:	602f      	str	r7, [r5, #0]
 8008c30:	e7b1      	b.n	8008b96 <__sflush_r+0x1a>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	e7ad      	b.n	8008b98 <__sflush_r+0x1c>
 8008c3c:	690f      	ldr	r7, [r1, #16]
 8008c3e:	2f00      	cmp	r7, #0
 8008c40:	d0a9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c42:	0793      	lsls	r3, r2, #30
 8008c44:	680e      	ldr	r6, [r1, #0]
 8008c46:	bf08      	it	eq
 8008c48:	694b      	ldreq	r3, [r1, #20]
 8008c4a:	600f      	str	r7, [r1, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	2300      	movne	r3, #0
 8008c50:	eba6 0807 	sub.w	r8, r6, r7
 8008c54:	608b      	str	r3, [r1, #8]
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	dd9c      	ble.n	8008b96 <__sflush_r+0x1a>
 8008c5c:	6a21      	ldr	r1, [r4, #32]
 8008c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c60:	4643      	mov	r3, r8
 8008c62:	463a      	mov	r2, r7
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b0      	blx	r6
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dc06      	bgt.n	8008c7a <__sflush_r+0xfe>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	e78e      	b.n	8008b98 <__sflush_r+0x1c>
 8008c7a:	4407      	add	r7, r0
 8008c7c:	eba8 0800 	sub.w	r8, r8, r0
 8008c80:	e7e9      	b.n	8008c56 <__sflush_r+0xda>
 8008c82:	bf00      	nop
 8008c84:	20400001 	.word	0x20400001

08008c88 <_fflush_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	b913      	cbnz	r3, 8008c98 <_fflush_r+0x10>
 8008c92:	2500      	movs	r5, #0
 8008c94:	4628      	mov	r0, r5
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	b118      	cbz	r0, 8008ca2 <_fflush_r+0x1a>
 8008c9a:	6983      	ldr	r3, [r0, #24]
 8008c9c:	b90b      	cbnz	r3, 8008ca2 <_fflush_r+0x1a>
 8008c9e:	f000 f887 	bl	8008db0 <__sinit>
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <_fflush_r+0x6c>)
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	d11b      	bne.n	8008ce0 <_fflush_r+0x58>
 8008ca8:	686c      	ldr	r4, [r5, #4]
 8008caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0ef      	beq.n	8008c92 <_fflush_r+0xa>
 8008cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb4:	07d0      	lsls	r0, r2, #31
 8008cb6:	d404      	bmi.n	8008cc2 <_fflush_r+0x3a>
 8008cb8:	0599      	lsls	r1, r3, #22
 8008cba:	d402      	bmi.n	8008cc2 <_fflush_r+0x3a>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbe:	f000 f915 	bl	8008eec <__retarget_lock_acquire_recursive>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	f7ff ff59 	bl	8008b7c <__sflush_r>
 8008cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ccc:	07da      	lsls	r2, r3, #31
 8008cce:	4605      	mov	r5, r0
 8008cd0:	d4e0      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	059b      	lsls	r3, r3, #22
 8008cd6:	d4dd      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f000 f908 	bl	8008eee <__retarget_lock_release_recursive>
 8008cde:	e7d9      	b.n	8008c94 <_fflush_r+0xc>
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <_fflush_r+0x70>)
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d101      	bne.n	8008cea <_fflush_r+0x62>
 8008ce6:	68ac      	ldr	r4, [r5, #8]
 8008ce8:	e7df      	b.n	8008caa <_fflush_r+0x22>
 8008cea:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <_fflush_r+0x74>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	bf08      	it	eq
 8008cf0:	68ec      	ldreq	r4, [r5, #12]
 8008cf2:	e7da      	b.n	8008caa <_fflush_r+0x22>
 8008cf4:	08009ecc 	.word	0x08009ecc
 8008cf8:	08009eec 	.word	0x08009eec
 8008cfc:	08009eac 	.word	0x08009eac

08008d00 <std>:
 8008d00:	2300      	movs	r3, #0
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d0e:	6083      	str	r3, [r0, #8]
 8008d10:	8181      	strh	r1, [r0, #12]
 8008d12:	6643      	str	r3, [r0, #100]	; 0x64
 8008d14:	81c2      	strh	r2, [r0, #14]
 8008d16:	6183      	str	r3, [r0, #24]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	305c      	adds	r0, #92	; 0x5c
 8008d1e:	f7ff fdd7 	bl	80088d0 <memset>
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x38>)
 8008d24:	6263      	str	r3, [r4, #36]	; 0x24
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x3c>)
 8008d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x40>)
 8008d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <std+0x44>)
 8008d30:	6224      	str	r4, [r4, #32]
 8008d32:	6323      	str	r3, [r4, #48]	; 0x30
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	bf00      	nop
 8008d38:	08009779 	.word	0x08009779
 8008d3c:	0800979b 	.word	0x0800979b
 8008d40:	080097d3 	.word	0x080097d3
 8008d44:	080097f7 	.word	0x080097f7

08008d48 <_cleanup_r>:
 8008d48:	4901      	ldr	r1, [pc, #4]	; (8008d50 <_cleanup_r+0x8>)
 8008d4a:	f000 b8af 	b.w	8008eac <_fwalk_reent>
 8008d4e:	bf00      	nop
 8008d50:	08008c89 	.word	0x08008c89

08008d54 <__sfmoreglue>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	2268      	movs	r2, #104	; 0x68
 8008d58:	1e4d      	subs	r5, r1, #1
 8008d5a:	4355      	muls	r5, r2
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d62:	f000 f997 	bl	8009094 <_malloc_r>
 8008d66:	4604      	mov	r4, r0
 8008d68:	b140      	cbz	r0, 8008d7c <__sfmoreglue+0x28>
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d70:	300c      	adds	r0, #12
 8008d72:	60a0      	str	r0, [r4, #8]
 8008d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d78:	f7ff fdaa 	bl	80088d0 <memset>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <__sfp_lock_acquire>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__sfp_lock_acquire+0x8>)
 8008d82:	f000 b8b3 	b.w	8008eec <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20000b31 	.word	0x20000b31

08008d8c <__sfp_lock_release>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__sfp_lock_release+0x8>)
 8008d8e:	f000 b8ae 	b.w	8008eee <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000b31 	.word	0x20000b31

08008d98 <__sinit_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__sinit_lock_acquire+0x8>)
 8008d9a:	f000 b8a7 	b.w	8008eec <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20000b32 	.word	0x20000b32

08008da4 <__sinit_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sinit_lock_release+0x8>)
 8008da6:	f000 b8a2 	b.w	8008eee <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	20000b32 	.word	0x20000b32

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sinit_lock_acquire>
 8008db8:	69a3      	ldr	r3, [r4, #24]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sinit_lock_release>
 8008dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8008dca:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <__sinit+0x68>)
 8008dcc:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <__sinit+0x6c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dd2:	42a3      	cmp	r3, r4
 8008dd4:	bf04      	itt	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	61a3      	streq	r3, [r4, #24]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f820 	bl	8008e20 <__sfp>
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f81c 	bl	8008e20 <__sfp>
 8008de8:	60a0      	str	r0, [r4, #8]
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f818 	bl	8008e20 <__sfp>
 8008df0:	2200      	movs	r2, #0
 8008df2:	60e0      	str	r0, [r4, #12]
 8008df4:	2104      	movs	r1, #4
 8008df6:	6860      	ldr	r0, [r4, #4]
 8008df8:	f7ff ff82 	bl	8008d00 <std>
 8008dfc:	68a0      	ldr	r0, [r4, #8]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	2109      	movs	r1, #9
 8008e02:	f7ff ff7d 	bl	8008d00 <std>
 8008e06:	68e0      	ldr	r0, [r4, #12]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	f7ff ff78 	bl	8008d00 <std>
 8008e10:	2301      	movs	r3, #1
 8008e12:	61a3      	str	r3, [r4, #24]
 8008e14:	e7d2      	b.n	8008dbc <__sinit+0xc>
 8008e16:	bf00      	nop
 8008e18:	08009ea8 	.word	0x08009ea8
 8008e1c:	08008d49 	.word	0x08008d49

08008e20 <__sfp>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	4607      	mov	r7, r0
 8008e24:	f7ff ffac 	bl	8008d80 <__sfp_lock_acquire>
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <__sfp+0x84>)
 8008e2a:	681e      	ldr	r6, [r3, #0]
 8008e2c:	69b3      	ldr	r3, [r6, #24]
 8008e2e:	b913      	cbnz	r3, 8008e36 <__sfp+0x16>
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff ffbd 	bl	8008db0 <__sinit>
 8008e36:	3648      	adds	r6, #72	; 0x48
 8008e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	d503      	bpl.n	8008e48 <__sfp+0x28>
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	b30b      	cbz	r3, 8008e88 <__sfp+0x68>
 8008e44:	6836      	ldr	r6, [r6, #0]
 8008e46:	e7f7      	b.n	8008e38 <__sfp+0x18>
 8008e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e4c:	b9d5      	cbnz	r5, 8008e84 <__sfp+0x64>
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <__sfp+0x88>)
 8008e50:	60e3      	str	r3, [r4, #12]
 8008e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e56:	6665      	str	r5, [r4, #100]	; 0x64
 8008e58:	f000 f847 	bl	8008eea <__retarget_lock_init_recursive>
 8008e5c:	f7ff ff96 	bl	8008d8c <__sfp_lock_release>
 8008e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e68:	6025      	str	r5, [r4, #0]
 8008e6a:	61a5      	str	r5, [r4, #24]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e74:	f7ff fd2c 	bl	80088d0 <memset>
 8008e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e80:	4620      	mov	r0, r4
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e84:	3468      	adds	r4, #104	; 0x68
 8008e86:	e7d9      	b.n	8008e3c <__sfp+0x1c>
 8008e88:	2104      	movs	r1, #4
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7ff ff62 	bl	8008d54 <__sfmoreglue>
 8008e90:	4604      	mov	r4, r0
 8008e92:	6030      	str	r0, [r6, #0]
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d1d5      	bne.n	8008e44 <__sfp+0x24>
 8008e98:	f7ff ff78 	bl	8008d8c <__sfp_lock_release>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	e7ee      	b.n	8008e80 <__sfp+0x60>
 8008ea2:	bf00      	nop
 8008ea4:	08009ea8 	.word	0x08009ea8
 8008ea8:	ffff0001 	.word	0xffff0001

08008eac <_fwalk_reent>:
 8008eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	4688      	mov	r8, r1
 8008eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eb8:	2700      	movs	r7, #0
 8008eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8008ec2:	d505      	bpl.n	8008ed0 <_fwalk_reent+0x24>
 8008ec4:	6824      	ldr	r4, [r4, #0]
 8008ec6:	2c00      	cmp	r4, #0
 8008ec8:	d1f7      	bne.n	8008eba <_fwalk_reent+0xe>
 8008eca:	4638      	mov	r0, r7
 8008ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed0:	89ab      	ldrh	r3, [r5, #12]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d907      	bls.n	8008ee6 <_fwalk_reent+0x3a>
 8008ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008eda:	3301      	adds	r3, #1
 8008edc:	d003      	beq.n	8008ee6 <_fwalk_reent+0x3a>
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	47c0      	blx	r8
 8008ee4:	4307      	orrs	r7, r0
 8008ee6:	3568      	adds	r5, #104	; 0x68
 8008ee8:	e7e9      	b.n	8008ebe <_fwalk_reent+0x12>

08008eea <__retarget_lock_init_recursive>:
 8008eea:	4770      	bx	lr

08008eec <__retarget_lock_acquire_recursive>:
 8008eec:	4770      	bx	lr

08008eee <__retarget_lock_release_recursive>:
 8008eee:	4770      	bx	lr

08008ef0 <__swhatbuf_r>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	b096      	sub	sp, #88	; 0x58
 8008efc:	4614      	mov	r4, r2
 8008efe:	461d      	mov	r5, r3
 8008f00:	da08      	bge.n	8008f14 <__swhatbuf_r+0x24>
 8008f02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	061a      	lsls	r2, r3, #24
 8008f0c:	d410      	bmi.n	8008f30 <__swhatbuf_r+0x40>
 8008f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f12:	e00e      	b.n	8008f32 <__swhatbuf_r+0x42>
 8008f14:	466a      	mov	r2, sp
 8008f16:	f000 fc95 	bl	8009844 <_fstat_r>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dbf1      	blt.n	8008f02 <__swhatbuf_r+0x12>
 8008f1e:	9a01      	ldr	r2, [sp, #4]
 8008f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f28:	425a      	negs	r2, r3
 8008f2a:	415a      	adcs	r2, r3
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	e7ee      	b.n	8008f0e <__swhatbuf_r+0x1e>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	2000      	movs	r0, #0
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	b016      	add	sp, #88	; 0x58
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f3c <__smakebuf_r>:
 8008f3c:	898b      	ldrh	r3, [r1, #12]
 8008f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f40:	079d      	lsls	r5, r3, #30
 8008f42:	4606      	mov	r6, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	d507      	bpl.n	8008f58 <__smakebuf_r+0x1c>
 8008f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	2301      	movs	r3, #1
 8008f52:	6163      	str	r3, [r4, #20]
 8008f54:	b002      	add	sp, #8
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	ab01      	add	r3, sp, #4
 8008f5a:	466a      	mov	r2, sp
 8008f5c:	f7ff ffc8 	bl	8008ef0 <__swhatbuf_r>
 8008f60:	9900      	ldr	r1, [sp, #0]
 8008f62:	4605      	mov	r5, r0
 8008f64:	4630      	mov	r0, r6
 8008f66:	f000 f895 	bl	8009094 <_malloc_r>
 8008f6a:	b948      	cbnz	r0, 8008f80 <__smakebuf_r+0x44>
 8008f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f70:	059a      	lsls	r2, r3, #22
 8008f72:	d4ef      	bmi.n	8008f54 <__smakebuf_r+0x18>
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	f043 0302 	orr.w	r3, r3, #2
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	e7e3      	b.n	8008f48 <__smakebuf_r+0xc>
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <__smakebuf_r+0x7c>)
 8008f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	6020      	str	r0, [r4, #0]
 8008f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	6163      	str	r3, [r4, #20]
 8008f92:	9b01      	ldr	r3, [sp, #4]
 8008f94:	6120      	str	r0, [r4, #16]
 8008f96:	b15b      	cbz	r3, 8008fb0 <__smakebuf_r+0x74>
 8008f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 fc63 	bl	8009868 <_isatty_r>
 8008fa2:	b128      	cbz	r0, 8008fb0 <__smakebuf_r+0x74>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	89a0      	ldrh	r0, [r4, #12]
 8008fb2:	4305      	orrs	r5, r0
 8008fb4:	81a5      	strh	r5, [r4, #12]
 8008fb6:	e7cd      	b.n	8008f54 <__smakebuf_r+0x18>
 8008fb8:	08008d49 	.word	0x08008d49

08008fbc <_free_r>:
 8008fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_free_r+0x90>
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	9001      	str	r0, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f1a1 0404 	sub.w	r4, r1, #4
 8008fce:	bfb8      	it	lt
 8008fd0:	18e4      	addlt	r4, r4, r3
 8008fd2:	f000 fc6b 	bl	80098ac <__malloc_lock>
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <_free_r+0x94>)
 8008fd8:	9801      	ldr	r0, [sp, #4]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x30>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	b003      	add	sp, #12
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	f000 bc66 	b.w	80098b8 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x46>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x22>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x50>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x46>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x70>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x26>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x26>
 800902c:	d902      	bls.n	8009034 <_free_r+0x78>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x26>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x26>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	20000b34 	.word	0x20000b34

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0e      	ldr	r6, [pc, #56]	; (8009090 <sbrk_aligned+0x3c>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 fb7a 	bl	8009758 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fb75 	bl	8009758 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d00a      	beq.n	8009088 <sbrk_aligned+0x34>
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d007      	beq.n	800908c <sbrk_aligned+0x38>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4628      	mov	r0, r5
 8009080:	f000 fb6a 	bl	8009758 <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d101      	bne.n	800908c <sbrk_aligned+0x38>
 8009088:	f04f 34ff 	mov.w	r4, #4294967295
 800908c:	4620      	mov	r0, r4
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	20000b38 	.word	0x20000b38

08009094 <_malloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	1ccd      	adds	r5, r1, #3
 800909a:	f025 0503 	bic.w	r5, r5, #3
 800909e:	3508      	adds	r5, #8
 80090a0:	2d0c      	cmp	r5, #12
 80090a2:	bf38      	it	cc
 80090a4:	250c      	movcc	r5, #12
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	4607      	mov	r7, r0
 80090aa:	db01      	blt.n	80090b0 <_malloc_r+0x1c>
 80090ac:	42a9      	cmp	r1, r5
 80090ae:	d905      	bls.n	80090bc <_malloc_r+0x28>
 80090b0:	230c      	movs	r3, #12
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	2600      	movs	r6, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	4e2e      	ldr	r6, [pc, #184]	; (8009178 <_malloc_r+0xe4>)
 80090be:	f000 fbf5 	bl	80098ac <__malloc_lock>
 80090c2:	6833      	ldr	r3, [r6, #0]
 80090c4:	461c      	mov	r4, r3
 80090c6:	bb34      	cbnz	r4, 8009116 <_malloc_r+0x82>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7ff ffc2 	bl	8009054 <sbrk_aligned>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	4604      	mov	r4, r0
 80090d4:	d14d      	bne.n	8009172 <_malloc_r+0xde>
 80090d6:	6834      	ldr	r4, [r6, #0]
 80090d8:	4626      	mov	r6, r4
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d140      	bne.n	8009160 <_malloc_r+0xcc>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4638      	mov	r0, r7
 80090e4:	eb04 0803 	add.w	r8, r4, r3
 80090e8:	f000 fb36 	bl	8009758 <_sbrk_r>
 80090ec:	4580      	cmp	r8, r0
 80090ee:	d13a      	bne.n	8009166 <_malloc_r+0xd2>
 80090f0:	6821      	ldr	r1, [r4, #0]
 80090f2:	3503      	adds	r5, #3
 80090f4:	1a6d      	subs	r5, r5, r1
 80090f6:	f025 0503 	bic.w	r5, r5, #3
 80090fa:	3508      	adds	r5, #8
 80090fc:	2d0c      	cmp	r5, #12
 80090fe:	bf38      	it	cc
 8009100:	250c      	movcc	r5, #12
 8009102:	4629      	mov	r1, r5
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff ffa5 	bl	8009054 <sbrk_aligned>
 800910a:	3001      	adds	r0, #1
 800910c:	d02b      	beq.n	8009166 <_malloc_r+0xd2>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	442b      	add	r3, r5
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e00e      	b.n	8009134 <_malloc_r+0xa0>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	1b52      	subs	r2, r2, r5
 800911a:	d41e      	bmi.n	800915a <_malloc_r+0xc6>
 800911c:	2a0b      	cmp	r2, #11
 800911e:	d916      	bls.n	800914e <_malloc_r+0xba>
 8009120:	1961      	adds	r1, r4, r5
 8009122:	42a3      	cmp	r3, r4
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	bf18      	it	ne
 8009128:	6059      	strne	r1, [r3, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	bf08      	it	eq
 800912e:	6031      	streq	r1, [r6, #0]
 8009130:	5162      	str	r2, [r4, r5]
 8009132:	604b      	str	r3, [r1, #4]
 8009134:	4638      	mov	r0, r7
 8009136:	f104 060b 	add.w	r6, r4, #11
 800913a:	f000 fbbd 	bl	80098b8 <__malloc_unlock>
 800913e:	f026 0607 	bic.w	r6, r6, #7
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	1af2      	subs	r2, r6, r3
 8009146:	d0b6      	beq.n	80090b6 <_malloc_r+0x22>
 8009148:	1b9b      	subs	r3, r3, r6
 800914a:	50a3      	str	r3, [r4, r2]
 800914c:	e7b3      	b.n	80090b6 <_malloc_r+0x22>
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	42a3      	cmp	r3, r4
 8009152:	bf0c      	ite	eq
 8009154:	6032      	streq	r2, [r6, #0]
 8009156:	605a      	strne	r2, [r3, #4]
 8009158:	e7ec      	b.n	8009134 <_malloc_r+0xa0>
 800915a:	4623      	mov	r3, r4
 800915c:	6864      	ldr	r4, [r4, #4]
 800915e:	e7b2      	b.n	80090c6 <_malloc_r+0x32>
 8009160:	4634      	mov	r4, r6
 8009162:	6876      	ldr	r6, [r6, #4]
 8009164:	e7b9      	b.n	80090da <_malloc_r+0x46>
 8009166:	230c      	movs	r3, #12
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	4638      	mov	r0, r7
 800916c:	f000 fba4 	bl	80098b8 <__malloc_unlock>
 8009170:	e7a1      	b.n	80090b6 <_malloc_r+0x22>
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	e7de      	b.n	8009134 <_malloc_r+0xa0>
 8009176:	bf00      	nop
 8009178:	20000b34 	.word	0x20000b34

0800917c <__sfputc_r>:
 800917c:	6893      	ldr	r3, [r2, #8]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	b410      	push	{r4}
 8009184:	6093      	str	r3, [r2, #8]
 8009186:	da08      	bge.n	800919a <__sfputc_r+0x1e>
 8009188:	6994      	ldr	r4, [r2, #24]
 800918a:	42a3      	cmp	r3, r4
 800918c:	db01      	blt.n	8009192 <__sfputc_r+0x16>
 800918e:	290a      	cmp	r1, #10
 8009190:	d103      	bne.n	800919a <__sfputc_r+0x1e>
 8009192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009196:	f7ff bc31 	b.w	80089fc <__swbuf_r>
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	6010      	str	r0, [r2, #0]
 80091a0:	7019      	strb	r1, [r3, #0]
 80091a2:	4608      	mov	r0, r1
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <__sfputs_r>:
 80091aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	18d5      	adds	r5, r2, r3
 80091b4:	42ac      	cmp	r4, r5
 80091b6:	d101      	bne.n	80091bc <__sfputs_r+0x12>
 80091b8:	2000      	movs	r0, #0
 80091ba:	e007      	b.n	80091cc <__sfputs_r+0x22>
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	463a      	mov	r2, r7
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ffda 	bl	800917c <__sfputc_r>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d1f3      	bne.n	80091b4 <__sfputs_r+0xa>
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d0 <_vfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	460d      	mov	r5, r1
 80091d6:	b09d      	sub	sp, #116	; 0x74
 80091d8:	4614      	mov	r4, r2
 80091da:	4698      	mov	r8, r3
 80091dc:	4606      	mov	r6, r0
 80091de:	b118      	cbz	r0, 80091e8 <_vfiprintf_r+0x18>
 80091e0:	6983      	ldr	r3, [r0, #24]
 80091e2:	b90b      	cbnz	r3, 80091e8 <_vfiprintf_r+0x18>
 80091e4:	f7ff fde4 	bl	8008db0 <__sinit>
 80091e8:	4b89      	ldr	r3, [pc, #548]	; (8009410 <_vfiprintf_r+0x240>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	d11b      	bne.n	8009226 <_vfiprintf_r+0x56>
 80091ee:	6875      	ldr	r5, [r6, #4]
 80091f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f2:	07d9      	lsls	r1, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fe:	f7ff fe75 	bl	8008eec <__retarget_lock_acquire_recursive>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	071b      	lsls	r3, r3, #28
 8009206:	d501      	bpl.n	800920c <_vfiprintf_r+0x3c>
 8009208:	692b      	ldr	r3, [r5, #16]
 800920a:	b9eb      	cbnz	r3, 8009248 <_vfiprintf_r+0x78>
 800920c:	4629      	mov	r1, r5
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff fc46 	bl	8008aa0 <__swsetup_r>
 8009214:	b1c0      	cbz	r0, 8009248 <_vfiprintf_r+0x78>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07dc      	lsls	r4, r3, #31
 800921a:	d50e      	bpl.n	800923a <_vfiprintf_r+0x6a>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b01d      	add	sp, #116	; 0x74
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	4b7b      	ldr	r3, [pc, #492]	; (8009414 <_vfiprintf_r+0x244>)
 8009228:	429d      	cmp	r5, r3
 800922a:	d101      	bne.n	8009230 <_vfiprintf_r+0x60>
 800922c:	68b5      	ldr	r5, [r6, #8]
 800922e:	e7df      	b.n	80091f0 <_vfiprintf_r+0x20>
 8009230:	4b79      	ldr	r3, [pc, #484]	; (8009418 <_vfiprintf_r+0x248>)
 8009232:	429d      	cmp	r5, r3
 8009234:	bf08      	it	eq
 8009236:	68f5      	ldreq	r5, [r6, #12]
 8009238:	e7da      	b.n	80091f0 <_vfiprintf_r+0x20>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	0598      	lsls	r0, r3, #22
 800923e:	d4ed      	bmi.n	800921c <_vfiprintf_r+0x4c>
 8009240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009242:	f7ff fe54 	bl	8008eee <__retarget_lock_release_recursive>
 8009246:	e7e9      	b.n	800921c <_vfiprintf_r+0x4c>
 8009248:	2300      	movs	r3, #0
 800924a:	9309      	str	r3, [sp, #36]	; 0x24
 800924c:	2320      	movs	r3, #32
 800924e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009252:	f8cd 800c 	str.w	r8, [sp, #12]
 8009256:	2330      	movs	r3, #48	; 0x30
 8009258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800941c <_vfiprintf_r+0x24c>
 800925c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009260:	f04f 0901 	mov.w	r9, #1
 8009264:	4623      	mov	r3, r4
 8009266:	469a      	mov	sl, r3
 8009268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926c:	b10a      	cbz	r2, 8009272 <_vfiprintf_r+0xa2>
 800926e:	2a25      	cmp	r2, #37	; 0x25
 8009270:	d1f9      	bne.n	8009266 <_vfiprintf_r+0x96>
 8009272:	ebba 0b04 	subs.w	fp, sl, r4
 8009276:	d00b      	beq.n	8009290 <_vfiprintf_r+0xc0>
 8009278:	465b      	mov	r3, fp
 800927a:	4622      	mov	r2, r4
 800927c:	4629      	mov	r1, r5
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff93 	bl	80091aa <__sfputs_r>
 8009284:	3001      	adds	r0, #1
 8009286:	f000 80aa 	beq.w	80093de <_vfiprintf_r+0x20e>
 800928a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928c:	445a      	add	r2, fp
 800928e:	9209      	str	r2, [sp, #36]	; 0x24
 8009290:	f89a 3000 	ldrb.w	r3, [sl]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 80a2 	beq.w	80093de <_vfiprintf_r+0x20e>
 800929a:	2300      	movs	r3, #0
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a4:	f10a 0a01 	add.w	sl, sl, #1
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092b0:	931a      	str	r3, [sp, #104]	; 0x68
 80092b2:	4654      	mov	r4, sl
 80092b4:	2205      	movs	r2, #5
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	4858      	ldr	r0, [pc, #352]	; (800941c <_vfiprintf_r+0x24c>)
 80092bc:	f7f6 ff90 	bl	80001e0 <memchr>
 80092c0:	9a04      	ldr	r2, [sp, #16]
 80092c2:	b9d8      	cbnz	r0, 80092fc <_vfiprintf_r+0x12c>
 80092c4:	06d1      	lsls	r1, r2, #27
 80092c6:	bf44      	itt	mi
 80092c8:	2320      	movmi	r3, #32
 80092ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ce:	0713      	lsls	r3, r2, #28
 80092d0:	bf44      	itt	mi
 80092d2:	232b      	movmi	r3, #43	; 0x2b
 80092d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d8:	f89a 3000 	ldrb.w	r3, [sl]
 80092dc:	2b2a      	cmp	r3, #42	; 0x2a
 80092de:	d015      	beq.n	800930c <_vfiprintf_r+0x13c>
 80092e0:	9a07      	ldr	r2, [sp, #28]
 80092e2:	4654      	mov	r4, sl
 80092e4:	2000      	movs	r0, #0
 80092e6:	f04f 0c0a 	mov.w	ip, #10
 80092ea:	4621      	mov	r1, r4
 80092ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f0:	3b30      	subs	r3, #48	; 0x30
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d94e      	bls.n	8009394 <_vfiprintf_r+0x1c4>
 80092f6:	b1b0      	cbz	r0, 8009326 <_vfiprintf_r+0x156>
 80092f8:	9207      	str	r2, [sp, #28]
 80092fa:	e014      	b.n	8009326 <_vfiprintf_r+0x156>
 80092fc:	eba0 0308 	sub.w	r3, r0, r8
 8009300:	fa09 f303 	lsl.w	r3, r9, r3
 8009304:	4313      	orrs	r3, r2
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	46a2      	mov	sl, r4
 800930a:	e7d2      	b.n	80092b2 <_vfiprintf_r+0xe2>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d19      	adds	r1, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9103      	str	r1, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfbb      	ittet	lt
 8009318:	425b      	neglt	r3, r3
 800931a:	f042 0202 	orrlt.w	r2, r2, #2
 800931e:	9307      	strge	r3, [sp, #28]
 8009320:	9307      	strlt	r3, [sp, #28]
 8009322:	bfb8      	it	lt
 8009324:	9204      	strlt	r2, [sp, #16]
 8009326:	7823      	ldrb	r3, [r4, #0]
 8009328:	2b2e      	cmp	r3, #46	; 0x2e
 800932a:	d10c      	bne.n	8009346 <_vfiprintf_r+0x176>
 800932c:	7863      	ldrb	r3, [r4, #1]
 800932e:	2b2a      	cmp	r3, #42	; 0x2a
 8009330:	d135      	bne.n	800939e <_vfiprintf_r+0x1ce>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9203      	str	r2, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfb8      	it	lt
 800933e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009342:	3402      	adds	r4, #2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800942c <_vfiprintf_r+0x25c>
 800934a:	7821      	ldrb	r1, [r4, #0]
 800934c:	2203      	movs	r2, #3
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ff46 	bl	80001e0 <memchr>
 8009354:	b140      	cbz	r0, 8009368 <_vfiprintf_r+0x198>
 8009356:	2340      	movs	r3, #64	; 0x40
 8009358:	eba0 000a 	sub.w	r0, r0, sl
 800935c:	fa03 f000 	lsl.w	r0, r3, r0
 8009360:	9b04      	ldr	r3, [sp, #16]
 8009362:	4303      	orrs	r3, r0
 8009364:	3401      	adds	r4, #1
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936c:	482c      	ldr	r0, [pc, #176]	; (8009420 <_vfiprintf_r+0x250>)
 800936e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009372:	2206      	movs	r2, #6
 8009374:	f7f6 ff34 	bl	80001e0 <memchr>
 8009378:	2800      	cmp	r0, #0
 800937a:	d03f      	beq.n	80093fc <_vfiprintf_r+0x22c>
 800937c:	4b29      	ldr	r3, [pc, #164]	; (8009424 <_vfiprintf_r+0x254>)
 800937e:	bb1b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x1f8>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	3307      	adds	r3, #7
 8009384:	f023 0307 	bic.w	r3, r3, #7
 8009388:	3308      	adds	r3, #8
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	443b      	add	r3, r7
 8009390:	9309      	str	r3, [sp, #36]	; 0x24
 8009392:	e767      	b.n	8009264 <_vfiprintf_r+0x94>
 8009394:	fb0c 3202 	mla	r2, ip, r2, r3
 8009398:	460c      	mov	r4, r1
 800939a:	2001      	movs	r0, #1
 800939c:	e7a5      	b.n	80092ea <_vfiprintf_r+0x11a>
 800939e:	2300      	movs	r3, #0
 80093a0:	3401      	adds	r4, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f04f 0c0a 	mov.w	ip, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b0:	3a30      	subs	r2, #48	; 0x30
 80093b2:	2a09      	cmp	r2, #9
 80093b4:	d903      	bls.n	80093be <_vfiprintf_r+0x1ee>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0c5      	beq.n	8009346 <_vfiprintf_r+0x176>
 80093ba:	9105      	str	r1, [sp, #20]
 80093bc:	e7c3      	b.n	8009346 <_vfiprintf_r+0x176>
 80093be:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c2:	4604      	mov	r4, r0
 80093c4:	2301      	movs	r3, #1
 80093c6:	e7f0      	b.n	80093aa <_vfiprintf_r+0x1da>
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	462a      	mov	r2, r5
 80093ce:	4b16      	ldr	r3, [pc, #88]	; (8009428 <_vfiprintf_r+0x258>)
 80093d0:	a904      	add	r1, sp, #16
 80093d2:	4630      	mov	r0, r6
 80093d4:	f3af 8000 	nop.w
 80093d8:	4607      	mov	r7, r0
 80093da:	1c78      	adds	r0, r7, #1
 80093dc:	d1d6      	bne.n	800938c <_vfiprintf_r+0x1bc>
 80093de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e0:	07d9      	lsls	r1, r3, #31
 80093e2:	d405      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093e4:	89ab      	ldrh	r3, [r5, #12]
 80093e6:	059a      	lsls	r2, r3, #22
 80093e8:	d402      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ec:	f7ff fd7f 	bl	8008eee <__retarget_lock_release_recursive>
 80093f0:	89ab      	ldrh	r3, [r5, #12]
 80093f2:	065b      	lsls	r3, r3, #25
 80093f4:	f53f af12 	bmi.w	800921c <_vfiprintf_r+0x4c>
 80093f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fa:	e711      	b.n	8009220 <_vfiprintf_r+0x50>
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	462a      	mov	r2, r5
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <_vfiprintf_r+0x258>)
 8009404:	a904      	add	r1, sp, #16
 8009406:	4630      	mov	r0, r6
 8009408:	f000 f880 	bl	800950c <_printf_i>
 800940c:	e7e4      	b.n	80093d8 <_vfiprintf_r+0x208>
 800940e:	bf00      	nop
 8009410:	08009ecc 	.word	0x08009ecc
 8009414:	08009eec 	.word	0x08009eec
 8009418:	08009eac 	.word	0x08009eac
 800941c:	08009f0c 	.word	0x08009f0c
 8009420:	08009f16 	.word	0x08009f16
 8009424:	00000000 	.word	0x00000000
 8009428:	080091ab 	.word	0x080091ab
 800942c:	08009f12 	.word	0x08009f12

08009430 <_printf_common>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	4699      	mov	r9, r3
 8009438:	688a      	ldr	r2, [r1, #8]
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009440:	4293      	cmp	r3, r2
 8009442:	bfb8      	it	lt
 8009444:	4613      	movlt	r3, r2
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944c:	4607      	mov	r7, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b10a      	cbz	r2, 8009456 <_printf_common+0x26>
 8009452:	3301      	adds	r3, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	6833      	ldrmi	r3, [r6, #0]
 800945e:	3302      	addmi	r3, #2
 8009460:	6033      	strmi	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	f015 0506 	ands.w	r5, r5, #6
 8009468:	d106      	bne.n	8009478 <_printf_common+0x48>
 800946a:	f104 0a19 	add.w	sl, r4, #25
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc26      	bgt.n	80094c6 <_printf_common+0x96>
 8009478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800947c:	1e13      	subs	r3, r2, #0
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	2301      	movne	r3, #1
 8009484:	0692      	lsls	r2, r2, #26
 8009486:	d42b      	bmi.n	80094e0 <_printf_common+0xb0>
 8009488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800948c:	4649      	mov	r1, r9
 800948e:	4638      	mov	r0, r7
 8009490:	47c0      	blx	r8
 8009492:	3001      	adds	r0, #1
 8009494:	d01e      	beq.n	80094d4 <_printf_common+0xa4>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	68e5      	ldr	r5, [r4, #12]
 800949a:	6832      	ldr	r2, [r6, #0]
 800949c:	f003 0306 	and.w	r3, r3, #6
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	bf08      	it	eq
 80094a4:	1aad      	subeq	r5, r5, r2
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	6922      	ldr	r2, [r4, #16]
 80094aa:	bf0c      	ite	eq
 80094ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b0:	2500      	movne	r5, #0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bfc4      	itt	gt
 80094b6:	1a9b      	subgt	r3, r3, r2
 80094b8:	18ed      	addgt	r5, r5, r3
 80094ba:	2600      	movs	r6, #0
 80094bc:	341a      	adds	r4, #26
 80094be:	42b5      	cmp	r5, r6
 80094c0:	d11a      	bne.n	80094f8 <_printf_common+0xc8>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e008      	b.n	80094d8 <_printf_common+0xa8>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4649      	mov	r1, r9
 80094cc:	4638      	mov	r0, r7
 80094ce:	47c0      	blx	r8
 80094d0:	3001      	adds	r0, #1
 80094d2:	d103      	bne.n	80094dc <_printf_common+0xac>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094dc:	3501      	adds	r5, #1
 80094de:	e7c6      	b.n	800946e <_printf_common+0x3e>
 80094e0:	18e1      	adds	r1, r4, r3
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	2030      	movs	r0, #48	; 0x30
 80094e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ea:	4422      	add	r2, r4
 80094ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094f4:	3302      	adds	r3, #2
 80094f6:	e7c7      	b.n	8009488 <_printf_common+0x58>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4622      	mov	r2, r4
 80094fc:	4649      	mov	r1, r9
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d0e6      	beq.n	80094d4 <_printf_common+0xa4>
 8009506:	3601      	adds	r6, #1
 8009508:	e7d9      	b.n	80094be <_printf_common+0x8e>
	...

0800950c <_printf_i>:
 800950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	7e0f      	ldrb	r7, [r1, #24]
 8009512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009514:	2f78      	cmp	r7, #120	; 0x78
 8009516:	4691      	mov	r9, r2
 8009518:	4680      	mov	r8, r0
 800951a:	460c      	mov	r4, r1
 800951c:	469a      	mov	sl, r3
 800951e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009522:	d807      	bhi.n	8009534 <_printf_i+0x28>
 8009524:	2f62      	cmp	r7, #98	; 0x62
 8009526:	d80a      	bhi.n	800953e <_printf_i+0x32>
 8009528:	2f00      	cmp	r7, #0
 800952a:	f000 80d8 	beq.w	80096de <_printf_i+0x1d2>
 800952e:	2f58      	cmp	r7, #88	; 0x58
 8009530:	f000 80a3 	beq.w	800967a <_printf_i+0x16e>
 8009534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800953c:	e03a      	b.n	80095b4 <_printf_i+0xa8>
 800953e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009542:	2b15      	cmp	r3, #21
 8009544:	d8f6      	bhi.n	8009534 <_printf_i+0x28>
 8009546:	a101      	add	r1, pc, #4	; (adr r1, 800954c <_printf_i+0x40>)
 8009548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800954c:	080095a5 	.word	0x080095a5
 8009550:	080095b9 	.word	0x080095b9
 8009554:	08009535 	.word	0x08009535
 8009558:	08009535 	.word	0x08009535
 800955c:	08009535 	.word	0x08009535
 8009560:	08009535 	.word	0x08009535
 8009564:	080095b9 	.word	0x080095b9
 8009568:	08009535 	.word	0x08009535
 800956c:	08009535 	.word	0x08009535
 8009570:	08009535 	.word	0x08009535
 8009574:	08009535 	.word	0x08009535
 8009578:	080096c5 	.word	0x080096c5
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080096a7 	.word	0x080096a7
 8009584:	08009535 	.word	0x08009535
 8009588:	08009535 	.word	0x08009535
 800958c:	080096e7 	.word	0x080096e7
 8009590:	08009535 	.word	0x08009535
 8009594:	080095e9 	.word	0x080095e9
 8009598:	08009535 	.word	0x08009535
 800959c:	08009535 	.word	0x08009535
 80095a0:	080096af 	.word	0x080096af
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	602a      	str	r2, [r5, #0]
 80095ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b4:	2301      	movs	r3, #1
 80095b6:	e0a3      	b.n	8009700 <_printf_i+0x1f4>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	6829      	ldr	r1, [r5, #0]
 80095bc:	0606      	lsls	r6, r0, #24
 80095be:	f101 0304 	add.w	r3, r1, #4
 80095c2:	d50a      	bpl.n	80095da <_printf_i+0xce>
 80095c4:	680e      	ldr	r6, [r1, #0]
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	da03      	bge.n	80095d4 <_printf_i+0xc8>
 80095cc:	232d      	movs	r3, #45	; 0x2d
 80095ce:	4276      	negs	r6, r6
 80095d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d4:	485e      	ldr	r0, [pc, #376]	; (8009750 <_printf_i+0x244>)
 80095d6:	230a      	movs	r3, #10
 80095d8:	e019      	b.n	800960e <_printf_i+0x102>
 80095da:	680e      	ldr	r6, [r1, #0]
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095e2:	bf18      	it	ne
 80095e4:	b236      	sxthne	r6, r6
 80095e6:	e7ef      	b.n	80095c8 <_printf_i+0xbc>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	6029      	str	r1, [r5, #0]
 80095f0:	0601      	lsls	r1, r0, #24
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0xec>
 80095f4:	681e      	ldr	r6, [r3, #0]
 80095f6:	e002      	b.n	80095fe <_printf_i+0xf2>
 80095f8:	0646      	lsls	r6, r0, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0xe8>
 80095fc:	881e      	ldrh	r6, [r3, #0]
 80095fe:	4854      	ldr	r0, [pc, #336]	; (8009750 <_printf_i+0x244>)
 8009600:	2f6f      	cmp	r7, #111	; 0x6f
 8009602:	bf0c      	ite	eq
 8009604:	2308      	moveq	r3, #8
 8009606:	230a      	movne	r3, #10
 8009608:	2100      	movs	r1, #0
 800960a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800960e:	6865      	ldr	r5, [r4, #4]
 8009610:	60a5      	str	r5, [r4, #8]
 8009612:	2d00      	cmp	r5, #0
 8009614:	bfa2      	ittt	ge
 8009616:	6821      	ldrge	r1, [r4, #0]
 8009618:	f021 0104 	bicge.w	r1, r1, #4
 800961c:	6021      	strge	r1, [r4, #0]
 800961e:	b90e      	cbnz	r6, 8009624 <_printf_i+0x118>
 8009620:	2d00      	cmp	r5, #0
 8009622:	d04d      	beq.n	80096c0 <_printf_i+0x1b4>
 8009624:	4615      	mov	r5, r2
 8009626:	fbb6 f1f3 	udiv	r1, r6, r3
 800962a:	fb03 6711 	mls	r7, r3, r1, r6
 800962e:	5dc7      	ldrb	r7, [r0, r7]
 8009630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009634:	4637      	mov	r7, r6
 8009636:	42bb      	cmp	r3, r7
 8009638:	460e      	mov	r6, r1
 800963a:	d9f4      	bls.n	8009626 <_printf_i+0x11a>
 800963c:	2b08      	cmp	r3, #8
 800963e:	d10b      	bne.n	8009658 <_printf_i+0x14c>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	07de      	lsls	r6, r3, #31
 8009644:	d508      	bpl.n	8009658 <_printf_i+0x14c>
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	6861      	ldr	r1, [r4, #4]
 800964a:	4299      	cmp	r1, r3
 800964c:	bfde      	ittt	le
 800964e:	2330      	movle	r3, #48	; 0x30
 8009650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009658:	1b52      	subs	r2, r2, r5
 800965a:	6122      	str	r2, [r4, #16]
 800965c:	f8cd a000 	str.w	sl, [sp]
 8009660:	464b      	mov	r3, r9
 8009662:	aa03      	add	r2, sp, #12
 8009664:	4621      	mov	r1, r4
 8009666:	4640      	mov	r0, r8
 8009668:	f7ff fee2 	bl	8009430 <_printf_common>
 800966c:	3001      	adds	r0, #1
 800966e:	d14c      	bne.n	800970a <_printf_i+0x1fe>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b004      	add	sp, #16
 8009676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967a:	4835      	ldr	r0, [pc, #212]	; (8009750 <_printf_i+0x244>)
 800967c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009680:	6829      	ldr	r1, [r5, #0]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f851 6b04 	ldr.w	r6, [r1], #4
 8009688:	6029      	str	r1, [r5, #0]
 800968a:	061d      	lsls	r5, r3, #24
 800968c:	d514      	bpl.n	80096b8 <_printf_i+0x1ac>
 800968e:	07df      	lsls	r7, r3, #31
 8009690:	bf44      	itt	mi
 8009692:	f043 0320 	orrmi.w	r3, r3, #32
 8009696:	6023      	strmi	r3, [r4, #0]
 8009698:	b91e      	cbnz	r6, 80096a2 <_printf_i+0x196>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f023 0320 	bic.w	r3, r3, #32
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	2310      	movs	r3, #16
 80096a4:	e7b0      	b.n	8009608 <_printf_i+0xfc>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	f043 0320 	orr.w	r3, r3, #32
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	2378      	movs	r3, #120	; 0x78
 80096b0:	4828      	ldr	r0, [pc, #160]	; (8009754 <_printf_i+0x248>)
 80096b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096b6:	e7e3      	b.n	8009680 <_printf_i+0x174>
 80096b8:	0659      	lsls	r1, r3, #25
 80096ba:	bf48      	it	mi
 80096bc:	b2b6      	uxthmi	r6, r6
 80096be:	e7e6      	b.n	800968e <_printf_i+0x182>
 80096c0:	4615      	mov	r5, r2
 80096c2:	e7bb      	b.n	800963c <_printf_i+0x130>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	6826      	ldr	r6, [r4, #0]
 80096c8:	6961      	ldr	r1, [r4, #20]
 80096ca:	1d18      	adds	r0, r3, #4
 80096cc:	6028      	str	r0, [r5, #0]
 80096ce:	0635      	lsls	r5, r6, #24
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	d501      	bpl.n	80096d8 <_printf_i+0x1cc>
 80096d4:	6019      	str	r1, [r3, #0]
 80096d6:	e002      	b.n	80096de <_printf_i+0x1d2>
 80096d8:	0670      	lsls	r0, r6, #25
 80096da:	d5fb      	bpl.n	80096d4 <_printf_i+0x1c8>
 80096dc:	8019      	strh	r1, [r3, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	4615      	mov	r5, r2
 80096e4:	e7ba      	b.n	800965c <_printf_i+0x150>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	602a      	str	r2, [r5, #0]
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	6862      	ldr	r2, [r4, #4]
 80096f0:	2100      	movs	r1, #0
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7f6 fd74 	bl	80001e0 <memchr>
 80096f8:	b108      	cbz	r0, 80096fe <_printf_i+0x1f2>
 80096fa:	1b40      	subs	r0, r0, r5
 80096fc:	6060      	str	r0, [r4, #4]
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	6123      	str	r3, [r4, #16]
 8009702:	2300      	movs	r3, #0
 8009704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009708:	e7a8      	b.n	800965c <_printf_i+0x150>
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	462a      	mov	r2, r5
 800970e:	4649      	mov	r1, r9
 8009710:	4640      	mov	r0, r8
 8009712:	47d0      	blx	sl
 8009714:	3001      	adds	r0, #1
 8009716:	d0ab      	beq.n	8009670 <_printf_i+0x164>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	079b      	lsls	r3, r3, #30
 800971c:	d413      	bmi.n	8009746 <_printf_i+0x23a>
 800971e:	68e0      	ldr	r0, [r4, #12]
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	4298      	cmp	r0, r3
 8009724:	bfb8      	it	lt
 8009726:	4618      	movlt	r0, r3
 8009728:	e7a4      	b.n	8009674 <_printf_i+0x168>
 800972a:	2301      	movs	r3, #1
 800972c:	4632      	mov	r2, r6
 800972e:	4649      	mov	r1, r9
 8009730:	4640      	mov	r0, r8
 8009732:	47d0      	blx	sl
 8009734:	3001      	adds	r0, #1
 8009736:	d09b      	beq.n	8009670 <_printf_i+0x164>
 8009738:	3501      	adds	r5, #1
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	9903      	ldr	r1, [sp, #12]
 800973e:	1a5b      	subs	r3, r3, r1
 8009740:	42ab      	cmp	r3, r5
 8009742:	dcf2      	bgt.n	800972a <_printf_i+0x21e>
 8009744:	e7eb      	b.n	800971e <_printf_i+0x212>
 8009746:	2500      	movs	r5, #0
 8009748:	f104 0619 	add.w	r6, r4, #25
 800974c:	e7f5      	b.n	800973a <_printf_i+0x22e>
 800974e:	bf00      	nop
 8009750:	08009f1d 	.word	0x08009f1d
 8009754:	08009f2e 	.word	0x08009f2e

08009758 <_sbrk_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_sbrk_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f8 fd48 	bl	80021f8 <_sbrk>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_sbrk_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_sbrk_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20000b3c 	.word	0x20000b3c

08009778 <__sread>:
 8009778:	b510      	push	{r4, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009780:	f000 f8a0 	bl	80098c4 <_read_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	bfab      	itete	ge
 8009788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800978a:	89a3      	ldrhlt	r3, [r4, #12]
 800978c:	181b      	addge	r3, r3, r0
 800978e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009792:	bfac      	ite	ge
 8009794:	6563      	strge	r3, [r4, #84]	; 0x54
 8009796:	81a3      	strhlt	r3, [r4, #12]
 8009798:	bd10      	pop	{r4, pc}

0800979a <__swrite>:
 800979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	461f      	mov	r7, r3
 80097a0:	898b      	ldrh	r3, [r1, #12]
 80097a2:	05db      	lsls	r3, r3, #23
 80097a4:	4605      	mov	r5, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	4616      	mov	r6, r2
 80097aa:	d505      	bpl.n	80097b8 <__swrite+0x1e>
 80097ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b0:	2302      	movs	r3, #2
 80097b2:	2200      	movs	r2, #0
 80097b4:	f000 f868 	bl	8009888 <_lseek_r>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	4632      	mov	r2, r6
 80097c6:	463b      	mov	r3, r7
 80097c8:	4628      	mov	r0, r5
 80097ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	f000 b817 	b.w	8009800 <_write_r>

080097d2 <__sseek>:
 80097d2:	b510      	push	{r4, lr}
 80097d4:	460c      	mov	r4, r1
 80097d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097da:	f000 f855 	bl	8009888 <_lseek_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	bf15      	itete	ne
 80097e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80097e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097ee:	81a3      	strheq	r3, [r4, #12]
 80097f0:	bf18      	it	ne
 80097f2:	81a3      	strhne	r3, [r4, #12]
 80097f4:	bd10      	pop	{r4, pc}

080097f6 <__sclose>:
 80097f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fa:	f000 b813 	b.w	8009824 <_close_r>
	...

08009800 <_write_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d07      	ldr	r5, [pc, #28]	; (8009820 <_write_r+0x20>)
 8009804:	4604      	mov	r4, r0
 8009806:	4608      	mov	r0, r1
 8009808:	4611      	mov	r1, r2
 800980a:	2200      	movs	r2, #0
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	f7f8 fca1 	bl	8002156 <_write>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_write_r+0x1e>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_write_r+0x1e>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	20000b3c 	.word	0x20000b3c

08009824 <_close_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_close_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 fcad 	bl	800218e <_close>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_close_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_close_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000b3c 	.word	0x20000b3c

08009844 <_fstat_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	; (8009864 <_fstat_r+0x20>)
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	602b      	str	r3, [r5, #0]
 8009852:	f7f8 fca8 	bl	80021a6 <_fstat>
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	d102      	bne.n	8009860 <_fstat_r+0x1c>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b103      	cbz	r3, 8009860 <_fstat_r+0x1c>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	bf00      	nop
 8009864:	20000b3c 	.word	0x20000b3c

08009868 <_isatty_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_isatty_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 fca7 	bl	80021c6 <_isatty>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_isatty_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_isatty_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000b3c 	.word	0x20000b3c

08009888 <_lseek_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4d07      	ldr	r5, [pc, #28]	; (80098a8 <_lseek_r+0x20>)
 800988c:	4604      	mov	r4, r0
 800988e:	4608      	mov	r0, r1
 8009890:	4611      	mov	r1, r2
 8009892:	2200      	movs	r2, #0
 8009894:	602a      	str	r2, [r5, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	f7f8 fca0 	bl	80021dc <_lseek>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_lseek_r+0x1e>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_lseek_r+0x1e>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	20000b3c 	.word	0x20000b3c

080098ac <__malloc_lock>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__malloc_lock+0x8>)
 80098ae:	f7ff bb1d 	b.w	8008eec <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	20000b30 	.word	0x20000b30

080098b8 <__malloc_unlock>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__malloc_unlock+0x8>)
 80098ba:	f7ff bb18 	b.w	8008eee <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	20000b30 	.word	0x20000b30

080098c4 <_read_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4d07      	ldr	r5, [pc, #28]	; (80098e4 <_read_r+0x20>)
 80098c8:	4604      	mov	r4, r0
 80098ca:	4608      	mov	r0, r1
 80098cc:	4611      	mov	r1, r2
 80098ce:	2200      	movs	r2, #0
 80098d0:	602a      	str	r2, [r5, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	f7f8 fc22 	bl	800211c <_read>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_read_r+0x1e>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_read_r+0x1e>
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	20000b3c 	.word	0x20000b3c

080098e8 <_init>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr

080098f4 <_fini>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr
