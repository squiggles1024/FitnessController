
FitnessController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08009df4  08009df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a0  0800a4a0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a0  0800a4a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a8  0800a4a8  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800a4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  200000d8  0800a588  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  0800a588  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020957  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e49  00000000  00000000  00040a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  000458a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00047240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fa27  00000000  00000000  00048960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023feb  00000000  00000000  00078387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c121  00000000  00000000  0009c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e8c  00000000  00000000  001a84e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ddc 	.word	0x08009ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08009ddc 	.word	0x08009ddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HCI_TL_SPI_Init+0x88>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HCI_TL_SPI_Init+0x88>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <HCI_TL_SPI_Init+0x8c>)
 80005ba:	f004 f8e9 	bl	8004790 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f004 f8d9 	bl	8004790 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <HCI_TL_SPI_Init+0x90>)
 80005f8:	f004 f8ca 	bl	8004790 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80005fc:	f001 ff88 	bl	8002510 <BSP_SPI3_Init>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000
 8000614:	48000c00 	.word	0x48000c00

08000618 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <HCI_TL_SPI_DeInit+0x28>)
 8000620:	f004 fa60 	bl	8004ae4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HCI_TL_SPI_DeInit+0x2c>)
 800062a:	f004 fa5b 	bl	8004ae4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f004 fa55 	bl	8004ae4 <HAL_GPIO_DeInit>
  return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48001000 	.word	0x48001000
 8000644:	48000c00 	.word	0x48000c00

08000648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <HCI_TL_SPI_Reset+0x40>)
 8000654:	f004 fb52 	bl	8004cfc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f004 fb4b 	bl	8004cfc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000666:	2005      	movs	r0, #5
 8000668:	f002 f8b8 	bl	80027dc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f004 fb41 	bl	8004cfc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f002 f8ae 	bl	80027dc <HAL_Delay>
  return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000c00 	.word	0x48000c00

0800068c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800069c:	23ff      	movs	r3, #255	; 0xff
 800069e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <HCI_TL_SPI_Receive+0xb0>)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006aa:	6018      	str	r0, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4822      	ldr	r0, [pc, #136]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 80006b8:	f004 fb20 	bl	8004cfc <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2205      	movs	r2, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ff52 	bl	8002570 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d129      	bne.n	8000726 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d2:	7c3b      	ldrb	r3, [r7, #16]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006e2:	8bfb      	ldrh	r3, [r7, #30]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01e      	beq.n	8000726 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006e8:	8bfa      	ldrh	r2, [r7, #30]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d901      	bls.n	80006f4 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	777b      	strb	r3, [r7, #29]
 80006f8:	e010      	b.n	800071c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006fa:	f107 011b 	add.w	r1, r7, #27
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2201      	movs	r2, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff33 	bl	8002570 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800070a:	7f7b      	ldrb	r3, [r7, #29]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	7efa      	ldrb	r2, [r7, #27]
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	3301      	adds	r3, #1
 800071a:	777b      	strb	r3, [r7, #29]
 800071c:	7f7b      	ldrb	r3, [r7, #29]
 800071e:	b29b      	uxth	r3, r3
 8000720:	8bfa      	ldrh	r2, [r7, #30]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8e9      	bhi.n	80006fa <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <HCI_TL_SPI_Receive+0xb4>)
 800072e:	f004 fae5 	bl	8004cfc <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000732:	7f7b      	ldrb	r3, [r7, #29]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08009df4 	.word	0x08009df4
 8000740:	48000c00 	.word	0x48000c00

08000744 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <HCI_TL_SPI_Send+0xa0>)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	3304      	adds	r3, #4
 800075e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000760:	f002 f830 	bl	80027c4 <HAL_GetTick>
 8000764:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 8000772:	f004 fac3 	bl	8004cfc <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000776:	f107 0108 	add.w	r1, r7, #8
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2205      	movs	r2, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fef5 	bl	8002570 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8000786:	7a3b      	ldrb	r3, [r7, #8]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d10f      	bne.n	80007ac <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	b29b      	uxth	r3, r3
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	429a      	cmp	r2, r3
 8000794:	d806      	bhi.n	80007a4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	461a      	mov	r2, r3
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <HCI_TL_SPI_Send+0xa8>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f001 fee7 	bl	8002570 <BSP_SPI3_SendRecv>
 80007a2:	e006      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80007a4:	f06f 0301 	mvn.w	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e002      	b.n	80007b2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HCI_TL_SPI_Send+0xa4>)
 80007ba:	f004 fa9f 	bl	8004cfc <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007be:	f002 f801 	bl	80027c4 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d903      	bls.n	80007d4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007cc:	f06f 0302 	mvn.w	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
      break;
 80007d2:	e002      	b.n	80007da <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dbc5      	blt.n	8000766 <HCI_TL_SPI_Send+0x22>

  return result;
 80007da:	69fb      	ldr	r3, [r7, #28]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08009dfc 	.word	0x08009dfc
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	200000fc 	.word	0x200000fc

080007f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <IsDataAvailable+0x1c>)
 80007f8:	f004 fa68 	bl	8004ccc <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48001000 	.word	0x48001000

08000810 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <hci_tl_lowlevel_init+0x50>)
 8000818:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <hci_tl_lowlevel_init+0x54>)
 800081c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <hci_tl_lowlevel_init+0x58>)
 8000820:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <hci_tl_lowlevel_init+0x5c>)
 8000824:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <hci_tl_lowlevel_init+0x60>)
 8000828:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <hci_tl_lowlevel_init+0x64>)
 800082c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f007 ffc3 	bl	80087bc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000836:	4910      	ldr	r1, [pc, #64]	; (8000878 <hci_tl_lowlevel_init+0x68>)
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 800083a:	f003 ff64 	bl	8004706 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <hci_tl_lowlevel_init+0x70>)
 8000840:	2100      	movs	r1, #0
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <hci_tl_lowlevel_init+0x6c>)
 8000844:	f003 ff45 	bl	80046d2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2017      	movs	r0, #23
 800084e:	f003 fcb8 	bl	80041c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000852:	2017      	movs	r0, #23
 8000854:	f003 fcd1 	bl	80041fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08000585 	.word	0x08000585
 8000864:	08000619 	.word	0x08000619
 8000868:	08000745 	.word	0x08000745
 800086c:	0800068d 	.word	0x0800068d
 8000870:	08000649 	.word	0x08000649
 8000874:	080025b1 	.word	0x080025b1
 8000878:	16000006 	.word	0x16000006
 800087c:	200000f4 	.word	0x200000f4
 8000880:	08000885 	.word	0x08000885

08000884 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000888:	e005      	b.n	8000896 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800088a:	2000      	movs	r0, #0
 800088c:	f008 f8fc 	bl	8008a88 <hci_notify_asynch_evt>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000896:	f7ff ffab 	bl	80007f0 <IsDataAvailable>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <hci_tl_lowlevel_isr+0x6>
 80008a0:	e000      	b.n	80008a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <AddBatteryService>:
static BatteryServiceStatus_t InitBatteryValue(void);
static BatteryServiceStatus_t UpdateBatteryValue(void);
static uint8_t GetBatteryValue(void);


BatteryServiceStatus_t AddBatteryService(void){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
	tBleStatus status;
	BatteryServiceStatus_t ret;
	uint16_t uuid = BATTERY_SERVICE_UUID;
 80008ae:	f641 030f 	movw	r3, #6159	; 0x180f
 80008b2:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 7, &BatteryServiceHandle);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AddBatteryService+0x60>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2307      	movs	r3, #7
 80008bc:	2201      	movs	r2, #1
 80008be:	2001      	movs	r0, #1
 80008c0:	f007 f929 	bl	8007b16 <aci_gatt_add_serv>
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <AddBatteryService+0x30>
		printf("Adding BATTERY Service Failed\n\r");
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <AddBatteryService+0x64>)
 80008d0:	f008 fa80 	bl	8008dd4 <iprintf>
		return Battery_AddServiceErr;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e012      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = AddBatteryCharacteristics();
 80008d8:	f000 f81a 	bl	8000910 <AddBatteryCharacteristics>
 80008dc:	4603      	mov	r3, r0
 80008de:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d001      	beq.n	80008ea <AddBatteryService+0x42>
		return ret;
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	e009      	b.n	80008fe <AddBatteryService+0x56>
	}

	ret = InitBatteryValue();
 80008ea:	f000 f861 	bl	80009b0 <InitBatteryValue>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71bb      	strb	r3, [r7, #6]
	if(ret != Battery_OK){
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d001      	beq.n	80008fc <AddBatteryService+0x54>
		return ret;
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	e000      	b.n	80008fe <AddBatteryService+0x56>
	}
    return Battery_OK;
 80008fc:	2303      	movs	r3, #3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001fc 	.word	0x200001fc
 800090c:	08009e2c 	.word	0x08009e2c

08000910 <AddBatteryCharacteristics>:

uint16_t GetBatteryServiceHandle(void){
	return BatteryServiceHandle;
}

static BatteryServiceStatus_t AddBatteryCharacteristics(void){
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e034      	b.n	8000986 <AddBatteryCharacteristics+0x76>
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <AddBatteryCharacteristics+0x88>)
 800091e:	8818      	ldrh	r0, [r3, #0]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <AddBatteryCharacteristics+0x8c>)
 8000924:	5cd1      	ldrb	r1, [r2, r3]
        		                   BatteryCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&BatteryCharUUIDLookUpTable[i],  //UUID Value
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <AddBatteryCharacteristics+0x90>)
 800092c:	189c      	adds	r4, r3, r2
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800092e:	f04f 0c01 	mov.w	ip, #1
								   BatteryCharLengthLookUpTable[i],                 //Char Value Length
				                   BatteryCharPropertiesLookUpTable[i],             //Char Properties
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <AddBatteryCharacteristics+0x94>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 800093a:	b2db      	uxtb	r3, r3
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2500      	movs	r5, #0
 8000940:	2600      	movs	r6, #0
				                   BatteryCharSecPermissionsLookUpTable[i],         //Char SecPermissions
								   BatteryCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                              //Encyption Key Size
				                   0,                                               //Does the value field have variable length? 1= yes, 0 = no
				                   &BatteryCharHandleLookUpTable[i]);               //BATTERY Char Handle Address
 8000942:	7bfa      	ldrb	r2, [r7, #15]
        status = aci_gatt_add_char(BatteryServiceHandle,                            //Service Handle
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <AddBatteryCharacteristics+0x98>)
 8000948:	441a      	add	r2, r3
 800094a:	9205      	str	r2, [sp, #20]
 800094c:	2200      	movs	r2, #0
 800094e:	9204      	str	r2, [sp, #16]
 8000950:	2210      	movs	r2, #16
 8000952:	9203      	str	r2, [sp, #12]
 8000954:	9602      	str	r6, [sp, #8]
 8000956:	9501      	str	r5, [sp, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4663      	mov	r3, ip
 800095e:	4622      	mov	r2, r4
 8000960:	f007 f962 	bl	8007c28 <aci_gatt_add_char>
 8000964:	4603      	mov	r3, r0
 8000966:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <AddBatteryCharacteristics+0x70>
        	printf(BatteryCharErrorStringLookUpTable[i]);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <AddBatteryCharacteristics+0x9c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	4618      	mov	r0, r3
 8000978:	f008 fa2c 	bl	8008dd4 <iprintf>
        	return BatteryCharErrorReturnLookUpTable[i];
 800097c:	2300      	movs	r3, #0
 800097e:	e006      	b.n	800098e <AddBatteryCharacteristics+0x7e>
    for(uint8_t i = BATTERY_LEVEL_INDEX; i < BATTERY_SERVICE_CHAR_QTY; i++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0c7      	beq.n	800091c <AddBatteryCharacteristics+0xc>
        }
    }

    return Battery_OK;
 800098c:	2303      	movs	r3, #3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	bf00      	nop
 8000998:	200001fc 	.word	0x200001fc
 800099c:	20000000 	.word	0x20000000
 80009a0:	0800a1dc 	.word	0x0800a1dc
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000200 	.word	0x20000200
 80009ac:	20000008 	.word	0x20000008

080009b0 <InitBatteryValue>:

static BatteryServiceStatus_t InitBatteryValue(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	BatteryServiceStatus_t ret;
	ret = UpdateBatteryValue();
 80009b6:	f000 f807 	bl	80009c8 <UpdateBatteryValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	return ret;
 80009be:	79fb      	ldrb	r3, [r7, #7]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <UpdateBatteryValue>:

static BatteryServiceStatus_t UpdateBatteryValue(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af02      	add	r7, sp, #8
    tBleStatus status;
    uint8_t reg = GetBatteryValue();
 80009ce:	f000 f821 	bl	8000a14 <GetBatteryValue>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71bb      	strb	r3, [r7, #6]
    status = aci_gatt_update_char_value(BatteryServiceHandle, BatteryCharHandleLookUpTable[BATTERY_LEVEL_INDEX], 0, 1, &reg);
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <UpdateBatteryValue+0x40>)
 80009d8:	8818      	ldrh	r0, [r3, #0]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <UpdateBatteryValue+0x44>)
 80009dc:	8819      	ldrh	r1, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	2200      	movs	r2, #0
 80009e6:	f007 fb32 	bl	800804e <aci_gatt_update_char_value>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

    if(status != BLE_STATUS_SUCCESS){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <UpdateBatteryValue+0x36>
    	printf("Update Battery Level char failed\n\r");
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <UpdateBatteryValue+0x48>)
 80009f6:	f008 f9ed 	bl	8008dd4 <iprintf>
    	return Battery_UpdateCharErr;
 80009fa:	2302      	movs	r3, #2
 80009fc:	e000      	b.n	8000a00 <UpdateBatteryValue+0x38>
    }

    return Battery_OK;
 80009fe:	2303      	movs	r3, #3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001fc 	.word	0x200001fc
 8000a0c:	20000200 	.word	0x20000200
 8000a10:	08009e4c 	.word	0x08009e4c

08000a14 <GetBatteryValue>:

static uint8_t GetBatteryValue(void){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return 100;
 8000a18:	2364      	movs	r3, #100	; 0x64
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <AnalogStickInit>:
 *@Params: Init struct with desired user settings, AnalogStick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: AnalogStick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void AnalogStickInit(AnalogStick_Handle_t *AnalogStick, AnalogStick_IO_Drv_t IO){
 8000a24:	b084      	sub	sp, #16
 8000a26:	b5b0      	push	{r4, r5, r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	f107 001c 	add.w	r0, r7, #28
 8000a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	AnalogStick->IO_Driver = IO;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	1d1c      	adds	r4, r3, #4
 8000a3a:	f107 051c 	add.w	r5, r7, #28
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	6023      	str	r3, [r4, #0]
	AnalogStick->IO_Driver.init();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4798      	blx	r3
	AnalogStick->X_Position = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	801a      	strh	r2, [r3, #0]
	AnalogStick->Y_Position = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	805a      	strh	r2, [r3, #2]
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a62:	b004      	add	sp, #16
 8000a64:	4770      	bx	lr

08000a66 <AnalogStickRead>:
 *@Params: AnalogStick Handle
 *@Return: AnalogStickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: AnalogStickHandle must be initialized
 *@Postcondition: AnalogStick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
AnalogStickStatus_t AnalogStickRead(AnalogStick_Handle_t *AnalogStick){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	int16_t PreviousX = AnalogStick->X_Position;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	81fb      	strh	r3, [r7, #14]
	int16_t PreviousY = AnalogStick->Y_Position;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	81bb      	strh	r3, [r7, #12]
	AnalogStick->IO_Driver.read(&(AnalogStick->X_Position), &(AnalogStick->Y_Position));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	3202      	adds	r2, #2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4798      	blx	r3
    if((AnalogStick->X_Position == 0 && PreviousX == 0) && (AnalogStick->Y_Position == 0 && PreviousY == 0)){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10e      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10a      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d105      	bne.n	8000ab0 <AnalogStickRead+0x4a>
 8000aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <AnalogStickRead+0x4a>
        return AnalogStickUnchanged;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <AnalogStickRead+0x4c>
	}
    return AnalogStickChanged;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <AnalogStickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void AnalogStickIOInit(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10d      	bne.n	8000ae4 <AnalogStickIOInit+0x28>
	    ADC_GPIO_Init();
 8000ac8:	f001 fa86 	bl	8001fd8 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000acc:	f001 f828 	bl	8001b20 <ADC_DMA_Init>
	    ADC1_Init();
 8000ad0:	f000 ff5e 	bl	8001990 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	4905      	ldr	r1, [pc, #20]	; (8000aec <AnalogStickIOInit+0x30>)
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <AnalogStickIOInit+0x34>)
 8000ada:	f002 fa1d 	bl	8002f18 <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <AnalogStickIOInit+0x2c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200004d0 	.word	0x200004d0
 8000aec:	200004c4 	.word	0x200004c4
 8000af0:	20000418 	.word	0x20000418

08000af4 <AnalogStickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from AnalogStick will be stopped.
 **************************************//**************************************/
static void AnalogStickIODeInit(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <AnalogStickIODeInit+0x1c>)
 8000afa:	f002 fac9 	bl	8003090 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000afe:	200b      	movs	r0, #11
 8000b00:	f003 fb89 	bl	8004216 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f003 fba0 	bl	800424a <HAL_NVIC_ClearPendingIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000418 	.word	0x20000418

08000b14 <AnalogStickIORead1>:
 *@Params: AnalogStick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the AnalogStick
 *@Precondition: AnalogStick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw AnalogStick value.
 **************************************//**************************************/
static void AnalogStickIORead1(int16_t *X_Pos, int16_t *Y_Pos){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_LX_INDEX] << 4) - 32767;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <AnalogStickIORead1+0x4c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b2c:	3b7f      	subs	r3, #127	; 0x7f
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*X_Pos = Convert;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	89fa      	ldrh	r2, [r7, #14]
 8000b36:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_LY_INDEX] << 4) - 32767;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <AnalogStickIORead1+0x4c>)
 8000b3a:	885b      	ldrh	r3, [r3, #2]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b46:	3b7f      	subs	r3, #127	; 0x7f
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*Y_Pos = Convert;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	89fa      	ldrh	r2, [r7, #14]
 8000b50:	801a      	strh	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200004c4 	.word	0x200004c4

08000b64 <AnalogStickIORead2>:

static void AnalogStickIORead2(int16_t *X_Pos, int16_t *Y_Pos){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	int16_t Convert = (adc_buffer[ADC_RX_INDEX] << 4) - 32767;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <AnalogStickIORead2+0x4c>)
 8000b70:	889b      	ldrh	r3, [r3, #4]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b7c:	3b7f      	subs	r3, #127	; 0x7f
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*X_Pos = Convert;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	801a      	strh	r2, [r3, #0]

    Convert = (adc_buffer[ADC_RY_INDEX] << 4) - 32767;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <AnalogStickIORead2+0x4c>)
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000b96:	3b7f      	subs	r3, #127	; 0x7f
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	81fb      	strh	r3, [r7, #14]
	/*if(Convert < 3276 && Convert > -3277){ //10% of Max
		Convert = 0;
	}*/
	*Y_Pos = Convert;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	89fa      	ldrh	r2, [r7, #14]
 8000ba0:	801a      	strh	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200004c4 	.word	0x200004c4

08000bb4 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(ButtonIDNumber_t ButtonID, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	b5b0      	push	{r4, r5, r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	f107 0118 	add.w	r1, r7, #24
 8000bc2:	e881 000c 	stmia.w	r1, {r2, r3}
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	Button->IO_Driver   = IO;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	1d1c      	adds	r4, r3, #4
 8000bce:	f107 0518 	add.w	r5, r7, #24
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	6023      	str	r3, [r4, #0]
	Button->IO_Driver.init();
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4798      	blx	r3
	Button->ButtonIDNumber = ButtonID;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	701a      	strb	r2, [r3, #0]
	Button->State = ButtonUnpressed;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2200      	movs	r2, #0
 8000bea:	705a      	strb	r2, [r3, #1]
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr

08000bfa <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	4610      	mov	r0, r2
 8000c12:	4798      	blx	r3
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	705a      	strb	r2, [r3, #1]
    if(Previous_State != Button->State){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d001      	beq.n	8000c2a <ButtonRead+0x30>
    	return ButtonChanged;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8000c2a:	2301      	movs	r3, #1
    }
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO Peripheral and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Uninitialized){
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Button_IO_init+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <Button_IO_init+0x16>
		Button_GPIO_Init();
 8000c40:	f001 f938 	bl	8001eb4 <Button_GPIO_Init>
	    initialize_status = ButtonIO_Initialized;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <Button_IO_init+0x1c>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000202 	.word	0x20000202

08000c54 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <Button_IO_deinit+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d102      	bne.n	8000c66 <Button_IO_deinit+0x12>
	    //de init GPIO. implement later.
	    initialize_status = ButtonIO_Uninitialized;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <Button_IO_deinit+0x1c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	}
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000202 	.word	0x20000202

08000c74 <Button_IO_ReadPosLogic>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_ReadPosLogic(uint8_t ButtonNumber){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <Button_IO_ReadPosLogic+0x3c>)
 8000c82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <Button_IO_ReadPosLogic+0x3c>)
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	889b      	ldrh	r3, [r3, #4]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4610      	mov	r0, r2
 8000c94:	f004 f81a 	bl	8004ccc <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <Button_IO_ReadPosLogic+0x32>
		return ButtonPressed;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <Button_IO_ReadPosLogic+0x34>
	} else {
		return ButtonUnpressed;
 8000ca6:	2300      	movs	r3, #0
	}
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0800a208 	.word	0x0800a208

08000cb4 <Button_IO_ReadNegLogic>:

static ButtonState_t Button_IO_ReadNegLogic(uint8_t ButtonNumber){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState State = HAL_GPIO_ReadPin(ButtonGPIOLUT[ButtonNumber].GPIOPort, ButtonGPIOLUT[ButtonNumber].GPIOPin);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <Button_IO_ReadNegLogic+0x3c>)
 8000cc2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <Button_IO_ReadNegLogic+0x3c>)
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f003 fffa 	bl	8004ccc <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]
	if(State == GPIO_PIN_SET){
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <Button_IO_ReadNegLogic+0x32>
		return ButtonUnpressed;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <Button_IO_ReadNegLogic+0x34>
	} else {
		return ButtonPressed;
 8000ce6:	2301      	movs	r3, #1
	}
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	0800a208 	.word	0x0800a208

08000cf4 <TriggerInit>:
 *@Params: Init struct with desired user settings, Trigger handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Trigger handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void TriggerInit(Trigger_Handle_t *Trigger, Trigger_IO_Drv_t IO){
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	b5b0      	push	{r4, r5, r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	f107 001c 	add.w	r0, r7, #28
 8000d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Trigger->IO_Driver = IO;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1d1c      	adds	r4, r3, #4
 8000d0a:	f107 051c 	add.w	r5, r7, #28
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	682b      	ldr	r3, [r5, #0]
 8000d14:	6023      	str	r3, [r4, #0]
	Trigger->IO_Driver.init();
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4798      	blx	r3
	Trigger->Position = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000d2c:	b004      	add	sp, #16
 8000d2e:	4770      	bx	lr

08000d30 <TriggerRead>:
 *@Params: Trigger Handle
 *@Return: TriggerChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: TriggerHandle must be initialized
 *@Postcondition: Trigger XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
TriggerStatus_t TriggerRead(Trigger_Handle_t *Trigger){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	uint8_t Previous = Trigger->Position;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	73fb      	strb	r3, [r7, #15]
	Trigger->IO_Driver.read(&(Trigger->Position));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4610      	mov	r0, r2
 8000d46:	4798      	blx	r3
    if((Trigger->Position == 0 && Previous == 0)){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d104      	bne.n	8000d5a <TriggerRead+0x2a>
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <TriggerRead+0x2a>
        return TriggerUnchanged;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <TriggerRead+0x2c>
	}
    return TriggerChanged;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TriggerIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void TriggerIOInit(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	if(ADC_Init_Status == ADC_UNINITIALIZED){
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <TriggerIOInit+0x2c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <TriggerIOInit+0x28>
	    ADC_GPIO_Init();
 8000d70:	f001 f932 	bl	8001fd8 <ADC_GPIO_Init>
	    ADC_DMA_Init();
 8000d74:	f000 fed4 	bl	8001b20 <ADC_DMA_Init>
	    ADC1_Init();
 8000d78:	f000 fe0a 	bl	8001990 <ADC1_Init>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, sizeof(adc_buffer));
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <TriggerIOInit+0x30>)
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <TriggerIOInit+0x34>)
 8000d82:	f002 f8c9 	bl	8002f18 <HAL_ADC_Start_DMA>
	ADC_Init_Status = ADC_INITIALIZED;
 8000d86:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <TriggerIOInit+0x2c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200004d0 	.word	0x200004d0
 8000d94:	200004c4 	.word	0x200004c4
 8000d98:	20000418 	.word	0x20000418

08000d9c <TriggerIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Trigger will be stopped.
 **************************************//**************************************/
static void TriggerIODeInit(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <TriggerIODeInit+0x1c>)
 8000da2:	f002 f975 	bl	8003090 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 8000da6:	200b      	movs	r0, #11
 8000da8:	f003 fa35 	bl	8004216 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA1_Channel1_IRQn);
 8000dac:	200b      	movs	r0, #11
 8000dae:	f003 fa4c 	bl	800424a <HAL_NVIC_ClearPendingIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000418 	.word	0x20000418

08000dbc <TriggerIORead1>:
 *@Params: Trigger Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the Trigger
 *@Precondition: Trigger IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw Trigger value.
 **************************************//**************************************/
static void TriggerIORead1(uint8_t *Pos){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
    uint16_t Value = adc_buffer[ADC_LT_INDEX];
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <TriggerIORead1+0x44>)
 8000dc6:	891b      	ldrh	r3, [r3, #8]
 8000dc8:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	f640 1298 	movw	r2, #2456	; 0x998
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d802      	bhi.n	8000dda <TriggerIORead1+0x1e>
		Convert = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e004      	b.n	8000de4 <TriggerIORead1+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b19      	cmp	r3, #25
 8000de8:	d801      	bhi.n	8000dee <TriggerIORead1+0x32>
		Convert = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	701a      	strb	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	200004c4 	.word	0x200004c4

08000e04 <TriggerIORead2>:

static void TriggerIORead2(uint8_t *Pos){
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	uint8_t Convert;
	uint16_t Value = adc_buffer[ADC_RT_INDEX];
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <TriggerIORead2+0x44>)
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	81bb      	strh	r3, [r7, #12]
	if(Value < TRIGGER_10PERCENT_PULLED){
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	f640 1298 	movw	r2, #2456	; 0x998
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d802      	bhi.n	8000e22 <TriggerIORead2+0x1e>
		Convert = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e004      	b.n	8000e2c <TriggerIORead2+0x28>
	} else {
		Convert = (Value - TRIGGER_ADC_OFFSET) >> 3; //convert to 8 bits
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	73fb      	strb	r3, [r7, #15]
	}
	if(Convert <= 25){ //10% of Max
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b19      	cmp	r3, #25
 8000e30:	d801      	bhi.n	8000e36 <TriggerIORead2+0x32>
		Convert = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
	}
	*Pos = Convert;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	701a      	strb	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	200004c4 	.word	0x200004c4

08000e4c <AddDeviceInfoService>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void);


DeviceInfoServiceStatus_t AddDeviceInfoService(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
	tBleStatus status;
	DeviceInfoServiceStatus_t ret;
	uint16_t uuid = DEVICEINFO_SERVICE_UUID;
 8000e52:	f641 030a 	movw	r3, #6154	; 0x180a
 8000e56:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &DeviceInfoServiceHandle);
 8000e58:	1d39      	adds	r1, r7, #4
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <AddDeviceInfoService+0x44>)
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2310      	movs	r3, #16
 8000e60:	2201      	movs	r2, #1
 8000e62:	2001      	movs	r0, #1
 8000e64:	f006 fe57 	bl	8007b16 <aci_gatt_add_serv>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <AddDeviceInfoService+0x30>
		printf("Adding Device Info Service Failed\n\r");
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <AddDeviceInfoService+0x48>)
 8000e74:	f007 ffae 	bl	8008dd4 <iprintf>
		return DeviceInfo_AddServiceErr;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e004      	b.n	8000e86 <AddDeviceInfoService+0x3a>
	}
	ret = AddDeviceInfoCharacteristics();
 8000e7c:	f000 f852 	bl	8000f24 <AddDeviceInfoCharacteristics>
 8000e80:	4603      	mov	r3, r0
 8000e82:	71bb      	strb	r3, [r7, #6]
    return ret;
 8000e84:	79bb      	ldrb	r3, [r7, #6]

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000204 	.word	0x20000204
 8000e94:	08009f38 	.word	0x08009f38

08000e98 <InitDeviceInfoCharacteristics>:

uint16_t GetDeviceInfoServiceHandle(void){
	return DeviceInfoServiceHandle;
}

static DeviceInfoServiceStatus_t InitDeviceInfoCharacteristics(void){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af02      	add	r7, sp, #8
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e029      	b.n	8000ef8 <InitDeviceInfoCharacteristics+0x60>
    	status = aci_gatt_update_char_value(DeviceInfoServiceHandle, DeviceInfoCharHandleLookUpTable[i], 0, DeviceInfoCharValueLengthLookUpTable[i], DeviceInfoCharValueStrings[i]);
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <InitDeviceInfoCharacteristics+0x70>)
 8000ea6:	8818      	ldrh	r0, [r3, #0]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <InitDeviceInfoCharacteristics+0x74>)
 8000eac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <InitDeviceInfoCharacteristics+0x78>)
 8000eb4:	5cd2      	ldrb	r2, [r2, r3]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4c16      	ldr	r4, [pc, #88]	; (8000f14 <InitDeviceInfoCharacteristics+0x7c>)
 8000eba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f007 f8c3 	bl	800804e <aci_gatt_update_char_value>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71bb      	strb	r3, [r7, #6]
    	if(status != BLE_STATUS_SUCCESS){
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00f      	beq.n	8000ef2 <InitDeviceInfoCharacteristics+0x5a>
    		printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <InitDeviceInfoCharacteristics+0x80>)
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 ff7a 	bl	8008dd4 <iprintf>
    		printf("Fail on Init Device Info with return code %u",status);
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <InitDeviceInfoCharacteristics+0x84>)
 8000ee6:	f007 ff75 	bl	8008dd4 <iprintf>
    		return DeviceInfoCharErrorReturnLookUpTable[i];
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <InitDeviceInfoCharacteristics+0x88>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	e006      	b.n	8000f00 <InitDeviceInfoCharacteristics+0x68>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d9d2      	bls.n	8000ea4 <InitDeviceInfoCharacteristics+0xc>
    	}
    }
    return DeviceInfo_OK;
 8000efe:	2307      	movs	r3, #7
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	20000204 	.word	0x20000204
 8000f0c:	20000208 	.word	0x20000208
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000014 	.word	0x20000014
 8000f18:	20000024 	.word	0x20000024
 8000f1c:	08009f5c 	.word	0x08009f5c
 8000f20:	0800a310 	.word	0x0800a310

08000f24 <AddDeviceInfoCharacteristics>:


static DeviceInfoServiceStatus_t AddDeviceInfoCharacteristics(void){
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af06      	add	r7, sp, #24
	tBleStatus status;
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e03c      	b.n	8000faa <AddDeviceInfoCharacteristics+0x86>
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <AddDeviceInfoCharacteristics+0x9c>)
 8000f32:	881c      	ldrh	r4, [r3, #0]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <AddDeviceInfoCharacteristics+0xa0>)
 8000f38:	5cd5      	ldrb	r5, [r2, r3]
        		                   DeviceInfoCharUUIDTypeLookUpTable[i],               //UUID Type
				                   (const uint8_t*)&DeviceInfoCharUUIDLookUpTable[i],  //UUID Value
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <AddDeviceInfoCharacteristics+0xa4>)
 8000f40:	189e      	adds	r6, r3, r2
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <AddDeviceInfoCharacteristics+0xa8>)
 8000f46:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <AddDeviceInfoCharacteristics+0xac>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	491f      	ldr	r1, [pc, #124]	; (8000fd4 <AddDeviceInfoCharacteristics+0xb0>)
 8000f56:	5c8a      	ldrb	r2, [r1, r2]
 8000f58:	7bf9      	ldrb	r1, [r7, #15]
 8000f5a:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <AddDeviceInfoCharacteristics+0xb4>)
 8000f5c:	5c41      	ldrb	r1, [r0, r1]
				                   DeviceInfo_CharPropertiesLookUpTable[i],            //Char Properties
				                   DeviceInfoCharPermissionsLookUpTable[i],            //Char SecPermissions
								   DeviceInfoCharNotifyModeLookUpTable[i],             //Char Application Notify Mode
				                   16,                                                 //Encryption Key Size
				                   1,                                                  //variable length value field (1) or not (0).
				                   &DeviceInfoCharHandleLookUpTable[i]);               //DeviceInfo Char Handle Address
 8000f5e:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(DeviceInfoServiceHandle,                            //Service Handle
 8000f60:	0040      	lsls	r0, r0, #1
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <AddDeviceInfoCharacteristics+0xb8>)
 8000f64:	4418      	add	r0, r3
 8000f66:	9005      	str	r0, [sp, #20]
 8000f68:	2001      	movs	r0, #1
 8000f6a:	9004      	str	r0, [sp, #16]
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	9003      	str	r0, [sp, #12]
 8000f70:	9102      	str	r1, [sp, #8]
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4663      	mov	r3, ip
 8000f7a:	4632      	mov	r2, r6
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f006 fe52 	bl	8007c28 <aci_gatt_add_char>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73bb      	strb	r3, [r7, #14]
        if(status != BLE_STATUS_SUCCESS){
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <AddDeviceInfoCharacteristics+0x80>
        	printf(DeviceInfoCharErrorStringLookUpTable[i]);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <AddDeviceInfoCharacteristics+0xbc>)
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 ff1c 	bl	8008dd4 <iprintf>
        	return DeviceInfoCharErrorReturnLookUpTable[i];
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <AddDeviceInfoCharacteristics+0xc0>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	e008      	b.n	8000fb6 <AddDeviceInfoCharacteristics+0x92>
    for(uint8_t i = DEVICEINFO_MFGNAME_INDEX; i < DEVICEINFO_SERVICE_CHAR_QTY; i++){
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d9bf      	bls.n	8000f30 <AddDeviceInfoCharacteristics+0xc>
        }
    }
    return InitDeviceInfoCharacteristics();
 8000fb0:	f7ff ff72 	bl	8000e98 <InitDeviceInfoCharacteristics>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000204 	.word	0x20000204
 8000fc4:	0800a2fc 	.word	0x0800a2fc
 8000fc8:	0800a300 	.word	0x0800a300
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000010 	.word	0x20000010
 8000fd4:	0800a308 	.word	0x0800a308
 8000fd8:	0800a30c 	.word	0x0800a30c
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	20000024 	.word	0x20000024
 8000fe4:	0800a310 	.word	0x0800a310

08000fe8 <FitnessControllerBLEInit>:
		0x0400, //x
		0x0800  //y
};


void FitnessControllerBLEInit(void){
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af04      	add	r7, sp, #16
	tBleStatus status; //Var for storing return status

	uint8_t bdaddr[BD_ADDR_SIZE]; //Device address
	const char *DeviceName = "Evan's Fitness Controller"; //Device Name
 8000fee:	4b4d      	ldr	r3, [pc, #308]	; (8001124 <FitnessControllerBLEInit+0x13c>)
 8000ff0:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <FitnessControllerBLEInit+0x140>)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffc:	6018      	str	r0, [r3, #0]
 8000ffe:	3304      	adds	r3, #4
 8001000:	8019      	strh	r1, [r3, #0]
	//Init HCI
	hci_init(ControllerEventNotify,NULL);
 8001002:	2100      	movs	r1, #0
 8001004:	4849      	ldr	r0, [pc, #292]	; (800112c <FitnessControllerBLEInit+0x144>)
 8001006:	f007 fb97 	bl	8008738 <hci_init>
	getBlueNRGVersion(&hwVersion, &fwVersion);
 800100a:	1cba      	adds	r2, r7, #2
 800100c:	1d7b      	adds	r3, r7, #5
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f007 fa0d 	bl	8008430 <getBlueNRGVersion>
	hci_reset();
 8001016:	f007 fa4f 	bl	80084b8 <hci_reset>
	HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f001 fbde 	bl	80027dc <HAL_Delay>

	status = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	461a      	mov	r2, r3
 8001026:	2106      	movs	r1, #6
 8001028:	2000      	movs	r0, #0
 800102a:	f007 f976 	bl	800831a <aci_hal_write_config_data>
 800102e:	4603      	mov	r3, r0
 8001030:	74fb      	strb	r3, [r7, #19]

	if(status != BLE_STATUS_SUCCESS){
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <FitnessControllerBLEInit+0x58>
		printf("aci_hal_write_config_data failed\n\r");
 8001038:	483d      	ldr	r0, [pc, #244]	; (8001130 <FitnessControllerBLEInit+0x148>)
 800103a:	f007 fecb 	bl	8008dd4 <iprintf>
		while(1);
 800103e:	e7fe      	b.n	800103e <FitnessControllerBLEInit+0x56>
	}

	status = aci_gatt_init();
 8001040:	f006 fd46 	bl	8007ad0 <aci_gatt_init>
 8001044:	4603      	mov	r3, r0
 8001046:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 8001048:	7cfb      	ldrb	r3, [r7, #19]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <FitnessControllerBLEInit+0x6e>
		printf("aci_gatt_init failed\n\r");
 800104e:	4839      	ldr	r0, [pc, #228]	; (8001134 <FitnessControllerBLEInit+0x14c>)
 8001050:	f007 fec0 	bl	8008dd4 <iprintf>
		while(1);
 8001054:	e7fe      	b.n	8001054 <FitnessControllerBLEInit+0x6c>
	}


    status = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, strlen(DeviceName), &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff f8ba 	bl	80001d0 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b2da      	uxtb	r2, r3
 8001060:	f107 010a 	add.w	r1, r7, #10
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f006 fb39 	bl	80076ea <aci_gap_init_IDB05A1>
 8001078:	4603      	mov	r3, r0
 800107a:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 800107c:	7cfb      	ldrb	r3, [r7, #19]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <FitnessControllerBLEInit+0xa2>
		printf("aci_gap_init failed\n\r");
 8001082:	482d      	ldr	r0, [pc, #180]	; (8001138 <FitnessControllerBLEInit+0x150>)
 8001084:	f007 fea6 	bl	8008dd4 <iprintf>
		while(1);
 8001088:	e7fe      	b.n	8001088 <FitnessControllerBLEInit+0xa0>
	}


	status = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(DeviceName), DeviceName);
 800108a:	897c      	ldrh	r4, [r7, #10]
 800108c:	893d      	ldrh	r5, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff f89e 	bl	80001d0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4613      	mov	r3, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	4629      	mov	r1, r5
 80010a2:	4620      	mov	r0, r4
 80010a4:	f006 ffd3 	bl	800804e <aci_gatt_update_char_value>
 80010a8:	4603      	mov	r3, r0
 80010aa:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <FitnessControllerBLEInit+0xd2>
		printf("aci_gatt_update_char_value failed\n\r");
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <FitnessControllerBLEInit+0x154>)
 80010b4:	f007 fe8e 	bl	8008dd4 <iprintf>
		while(1);
 80010b8:	e7fe      	b.n	80010b8 <FitnessControllerBLEInit+0xd0>
	}
	uint16_t test_appearance_value = 0x03C4;
 80010ba:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 80010be:	803b      	strh	r3, [r7, #0]
	status = aci_gatt_update_char_value(service_handle,appearance_char_handle,0,2,&test_appearance_value);
 80010c0:	8978      	ldrh	r0, [r7, #10]
 80010c2:	88f9      	ldrh	r1, [r7, #6]
 80010c4:	463b      	mov	r3, r7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	f006 ffbf 	bl	800804e <aci_gatt_update_char_value>
 80010d0:	4603      	mov	r3, r0
 80010d2:	74fb      	strb	r3, [r7, #19]
	AddServices();
 80010d4:	f000 f92e 	bl	8001334 <AddServices>

	status = aci_gap_set_io_capability(IO_CAP_NO_INPUT_NO_OUTPUT);
 80010d8:	2003      	movs	r0, #3
 80010da:	f006 fc40 	bl	800795e <aci_gap_set_io_capability>
 80010de:	4603      	mov	r3, r0
 80010e0:	74fb      	strb	r3, [r7, #19]
	if(status != BLE_STATUS_SUCCESS){
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <FitnessControllerBLEInit+0x106>
        printf("aci_gap_set_io_capabilities failed\n\r");
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <FitnessControllerBLEInit+0x158>)
 80010ea:	f007 fe73 	bl	8008dd4 <iprintf>
	}
	status = aci_gap_set_auth_requirement(MITM_PROTECTION_NOT_REQUIRED,
 80010ee:	2300      	movs	r3, #0
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <FitnessControllerBLEInit+0x15c>)
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2310      	movs	r3, #16
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2307      	movs	r3, #7
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2000      	movs	r0, #0
 8001106:	f006 fc56 	bl	80079b6 <aci_gap_set_auth_requirement>
 800110a:	4603      	mov	r3, r0
 800110c:	74fb      	strb	r3, [r7, #19]
										  7,
										  16,
										  USE_FIXED_PIN_FOR_PAIRING,
										  123456,
										  NO_BONDING);
	if(status != BLE_STATUS_SUCCESS){
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <FitnessControllerBLEInit+0x132>
        printf("aci_gap_set_auth_requirement failed\n\r");
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <FitnessControllerBLEInit+0x160>)
 8001116:	f007 fe5d 	bl	8008dd4 <iprintf>
	}


}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	bf00      	nop
 8001124:	08009f8c 	.word	0x08009f8c
 8001128:	0800a314 	.word	0x0800a314
 800112c:	080013f1 	.word	0x080013f1
 8001130:	08009fa8 	.word	0x08009fa8
 8001134:	08009fcc 	.word	0x08009fcc
 8001138:	08009fe4 	.word	0x08009fe4
 800113c:	08009ffc 	.word	0x08009ffc
 8001140:	0800a020 	.word	0x0800a020
 8001144:	0001e240 	.word	0x0001e240
 8001148:	0800a048 	.word	0x0800a048

0800114c <FitnessController_BLE_Process>:

void FitnessController_BLE_Process(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	//make device discoverable
	if(discoverable == DEVICE_NOTDISCOVERABLE){
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <FitnessController_BLE_Process+0x34>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <FitnessController_BLE_Process+0x12>
		SetDiscoverable();
 800115a:	f000 f919 	bl	8001390 <SetDiscoverable>
	}
	FitnessControllerDataFlag_t DataFlag = FitnessControllerUpdateState(&FitnessController);
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <FitnessController_BLE_Process+0x38>)
 8001160:	f000 f824 	bl	80011ac <FitnessControllerUpdateState>
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
    if(DataFlag == FC_NewDataAvailable){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <FitnessController_BLE_Process+0x26>
    	SendHIDData();
 800116e:	f000 fb57 	bl	8001820 <SendHIDData>
    }
	hci_user_evt_proc();
 8001172:	f007 fc5d 	bl	8008a30 <hci_user_evt_proc>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200003f8 	.word	0x200003f8
 8001184:	20000210 	.word	0x20000210

08001188 <FitnessControllerHardwareInit>:

void FitnessControllerHardwareInit(FitnessControllerHandle_t *FitnessController){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	ControllerButtonInit(FitnessController);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f99d 	bl	80014d0 <ControllerButtonInit>
	ControllerTriggerInit(FitnessController);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f9f0 	bl	800157c <ControllerTriggerInit>
	ControllerStickInit(FitnessController);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fa17 	bl	80015d0 <ControllerStickInit>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <FitnessControllerUpdateState>:

FitnessControllerDataFlag_t FitnessControllerUpdateState(FitnessControllerHandle_t *FitnessController){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	FitnessControllerDataFlag_t ReturnStatus = FC_NoDataAvailable;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80011b8:	2300      	movs	r3, #0
 80011ba:	73bb      	strb	r3, [r7, #14]
 80011bc:	e044      	b.n	8001248 <FitnessControllerUpdateState+0x9c>
    	if(ButtonRead(&FitnessController->Buttons[i].Button) == ButtonChanged){
 80011be:	7bba      	ldrb	r2, [r7, #14]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd14 	bl	8000bfa <ButtonRead>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d134      	bne.n	8001242 <FitnessControllerUpdateState+0x96>
    		ReturnStatus |= FC_NewDataAvailable;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
            if(FitnessController->Buttons[i].Button.State == ButtonPressed){
 80011e0:	7bba      	ldrb	r2, [r7, #14]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	3301      	adds	r3, #1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d110      	bne.n	8001218 <FitnessControllerUpdateState+0x6c>
            	HIDReport.Buttons |= FitnessController->Buttons[i].ButtonMsk;
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <FitnessControllerUpdateState+0x184>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b299      	uxth	r1, r3
 80011fc:	7bba      	ldrb	r2, [r7, #14]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4403      	add	r3, r0
 800120a:	3318      	adds	r3, #24
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	430b      	orrs	r3, r1
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <FitnessControllerUpdateState+0x184>)
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	e014      	b.n	8001242 <FitnessControllerUpdateState+0x96>
            } else {
            	HIDReport.Buttons &= ~(FitnessController->Buttons[i].ButtonMsk);
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <FitnessControllerUpdateState+0x184>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	b219      	sxth	r1, r3
 8001220:	7bba      	ldrb	r2, [r7, #14]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4403      	add	r3, r0
 800122e:	3318      	adds	r3, #24
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b21b      	sxth	r3, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	b21b      	sxth	r3, r3
 8001238:	400b      	ands	r3, r1
 800123a:	b21b      	sxth	r3, r3
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <FitnessControllerUpdateState+0x184>)
 8001240:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	3301      	adds	r3, #1
 8001246:	73bb      	strb	r3, [r7, #14]
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	2b0d      	cmp	r3, #13
 800124c:	d9b7      	bls.n	80011be <FitnessControllerUpdateState+0x12>
            }
    	}
    }

    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 800124e:	2300      	movs	r3, #0
 8001250:	737b      	strb	r3, [r7, #13]
 8001252:	e023      	b.n	800129c <FitnessControllerUpdateState+0xf0>
        if(TriggerRead(&FitnessController->Triggers[i]) == TriggerChanged){
 8001254:	7b7a      	ldrb	r2, [r7, #13]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fd62 	bl	8000d30 <TriggerRead>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d111      	bne.n	8001296 <FitnessControllerUpdateState+0xea>
        	ReturnStatus |= FC_NewDataAvailable;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Triggers[i] = FitnessController->Triggers[i].Position;
 800127a:	7b7a      	ldrb	r2, [r7, #13]
 800127c:	7b79      	ldrb	r1, [r7, #13]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4403      	add	r3, r0
 800128a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <FitnessControllerUpdateState+0x184>)
 8001292:	440b      	add	r3, r1
 8001294:	709a      	strb	r2, [r3, #2]
    for(uint8_t i = 0; i < NUMBER_OF_TRIGGERS; i++){
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	3301      	adds	r3, #1
 800129a:	737b      	strb	r3, [r7, #13]
 800129c:	7b7b      	ldrb	r3, [r7, #13]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d9d8      	bls.n	8001254 <FitnessControllerUpdateState+0xa8>
        }
    }

    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	733b      	strb	r3, [r7, #12]
 80012a6:	e03a      	b.n	800131e <FitnessControllerUpdateState+0x172>
        if(AnalogStickRead(&FitnessController->Sticks[i]) == AnalogStickChanged){
 80012a8:	7b3a      	ldrb	r2, [r7, #12]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fbd3 	bl	8000a66 <AnalogStickRead>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d128      	bne.n	8001318 <FitnessControllerUpdateState+0x16c>
        	ReturnStatus |= FC_NewDataAvailable;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
        	HIDReport.Sticks[i*2] = FitnessController->Sticks[i].X_Position;
 80012ce:	7b3a      	ldrb	r2, [r7, #12]
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	0059      	lsls	r1, r3, #1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4403      	add	r3, r0
 80012e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <FitnessControllerUpdateState+0x184>)
 80012ea:	004b      	lsls	r3, r1, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	4602      	mov	r2, r0
 80012f0:	809a      	strh	r2, [r3, #4]
        	HIDReport.Sticks[i*2+1] = FitnessController->Sticks[i].Y_Position;
 80012f2:	7b3a      	ldrb	r2, [r7, #12]
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	1c59      	adds	r1, r3, #1
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4403      	add	r3, r0
 8001306:	f503 73dd 	add.w	r3, r3, #442	; 0x1ba
 800130a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <FitnessControllerUpdateState+0x184>)
 8001310:	004b      	lsls	r3, r1, #1
 8001312:	4413      	add	r3, r2
 8001314:	4602      	mov	r2, r0
 8001316:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < NUMBER_OF_STICKS; i++){
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	733b      	strb	r3, [r7, #12]
 800131e:	7b3b      	ldrb	r3, [r7, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d9c1      	bls.n	80012a8 <FitnessControllerUpdateState+0xfc>
        }
    }
    return ReturnStatus;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200003fc 	.word	0x200003fc

08001334 <AddServices>:

static void AddServices(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

	  HIDServiceStatus_t HIDStatus;
	  HIDStatus = AddHIDService();
 800133a:	f000 f973 	bl	8001624 <AddHIDService>
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	  if(HIDStatus != HID_OK){
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d003      	beq.n	8001350 <AddServices+0x1c>
          printf("Add HID Service Failed\n\r");
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <AddServices+0x50>)
 800134a:	f007 fd43 	bl	8008dd4 <iprintf>
          while(1);
 800134e:	e7fe      	b.n	800134e <AddServices+0x1a>
	  }

	  BatteryServiceStatus_t BatStatus;
	  BatStatus = AddBatteryService();
 8001350:	f7ff faaa 	bl	80008a8 <AddBatteryService>
 8001354:	4603      	mov	r3, r0
 8001356:	71bb      	strb	r3, [r7, #6]
	  if(BatStatus != Battery_OK){
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d003      	beq.n	8001366 <AddServices+0x32>
		  printf("Add Battery Service Failed\n\r");
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <AddServices+0x54>)
 8001360:	f007 fd38 	bl	8008dd4 <iprintf>
          while(1);
 8001364:	e7fe      	b.n	8001364 <AddServices+0x30>
	  }

	  DeviceInfoServiceStatus_t DIStatus;
	  DIStatus = AddDeviceInfoService();
 8001366:	f7ff fd71 	bl	8000e4c <AddDeviceInfoService>
 800136a:	4603      	mov	r3, r0
 800136c:	717b      	strb	r3, [r7, #5]
	  if(DIStatus != DeviceInfo_OK){
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	2b07      	cmp	r3, #7
 8001372:	d003      	beq.n	800137c <AddServices+0x48>
		  printf("Add Device Service Failed\n\r");
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <AddServices+0x58>)
 8001376:	f007 fd2d 	bl	8008dd4 <iprintf>
          while(1);
 800137a:	e7fe      	b.n	800137a <AddServices+0x46>
	  }

}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a070 	.word	0x0800a070
 8001388:	0800a08c 	.word	0x0800a08c
 800138c:	0800a0ac 	.word	0x0800a0ac

08001390 <SetDiscoverable>:

static tBleStatus SetDiscoverable(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af08      	add	r7, sp, #32
	tBleStatus status;
    status = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8001396:	2300      	movs	r3, #0
 8001398:	9306      	str	r3, [sp, #24]
 800139a:	2300      	movs	r3, #0
 800139c:	9305      	str	r3, [sp, #20]
 800139e:	2300      	movs	r3, #0
 80013a0:	9304      	str	r3, [sp, #16]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9303      	str	r3, [sp, #12]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <SetDiscoverable+0x54>)
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2313      	movs	r3, #19
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2000      	movs	r0, #0
 80013ba:	f006 f9e6 	bl	800778a <aci_gap_set_discoverable>
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    if(status == BLE_STATUS_SUCCESS){
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <SetDiscoverable+0x3e>
    	discoverable = DEVICE_DISCOVERABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <SetDiscoverable+0x58>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    }

	if(status != BLE_STATUS_SUCCESS){
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <SetDiscoverable+0x4a>
		printf("aci_gap_set_discoverable failed\n\r");
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <SetDiscoverable+0x5c>)
 80013d6:	f007 fcfd 	bl	8008dd4 <iprintf>
	}

	return status;
 80013da:	79fb      	ldrb	r3, [r7, #7]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800a31c 	.word	0x0800a31c
 80013e8:	200003f8 	.word	0x200003f8
 80013ec:	0800a0c8 	.word	0x0800a0c8

080013f0 <ControllerEventNotify>:

static void ControllerEventNotify(void *pData){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	  hci_uart_pckt *hci_pckt = pData;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	61fb      	str	r3, [r7, #28]
	  /* obtain event packet */
	  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
	  tBleStatus status;

	  if(hci_pckt->type != HCI_EVENT_PKT){
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d156      	bne.n	80014b8 <ControllerEventNotify+0xc8>
	    return;
	  }

	  switch(event_pckt->evt){
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d02d      	beq.n	800146e <ControllerEventNotify+0x7e>
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	dc55      	bgt.n	80014c2 <ControllerEventNotify+0xd2>
 8001416:	2b05      	cmp	r3, #5
 8001418:	d002      	beq.n	8001420 <ControllerEventNotify+0x30>
 800141a:	2b3e      	cmp	r3, #62	; 0x3e
 800141c:	d006      	beq.n	800142c <ControllerEventNotify+0x3c>
 800141e:	e050      	b.n	80014c2 <ControllerEventNotify+0xd2>
	    case EVT_DISCONN_COMPLETE:
	      {
	    	  SetDiscoverable();
 8001420:	f7ff ffb6 	bl	8001390 <SetDiscoverable>
	    	  connected = DEVICE_CONNECTABLE;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <ControllerEventNotify+0xd8>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 800142a:	e04a      	b.n	80014c2 <ControllerEventNotify+0xd2>

	    case EVT_LE_META_EVENT:
	      {
	        evt_le_meta_event *evt = (void *)event_pckt->data;
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3302      	adds	r3, #2
 8001430:	613b      	str	r3, [r7, #16]

	        switch(evt->subevent){
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d140      	bne.n	80014bc <ControllerEventNotify+0xcc>
	        case EVT_LE_CONN_COMPLETE:
	          {
	            evt_le_connection_complete *cc = (void *)evt->data;
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
	            connection_handle = cc->handle;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <ControllerEventNotify+0xdc>)
 800144a:	801a      	strh	r2, [r3, #0]
	            status = aci_gap_slave_security_request(connection_handle, NO_BONDING, MITM_PROTECTION_NOT_REQUIRED);
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <ControllerEventNotify+0xdc>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f006 fb05 	bl	8007a64 <aci_gap_slave_security_request>
 800145a:	4603      	mov	r3, r0
 800145c:	72fb      	strb	r3, [r7, #11]
	            if(status == BLE_STATUS_SUCCESS){
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <ControllerEventNotify+0x7a>
	                connected = DEVICE_CONNECTED;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <ControllerEventNotify+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
	            }
	          }
	          break;
 800146a:	bf00      	nop
	        }
	      }
	      break;
 800146c:	e026      	b.n	80014bc <ControllerEventNotify+0xcc>

	    case EVT_VENDOR:
	      {
	        evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3302      	adds	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
	        switch(blue_evt->ecode){
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	f640 4201 	movw	r2, #3073	; 0xc01
 800147e:	4293      	cmp	r3, r2
 8001480:	d014      	beq.n	80014ac <ControllerEventNotify+0xbc>
 8001482:	f640 4201 	movw	r2, #3073	; 0xc01
 8001486:	4293      	cmp	r3, r2
 8001488:	dc1a      	bgt.n	80014c0 <ControllerEventNotify+0xd0>
 800148a:	f240 4205 	movw	r2, #1029	; 0x405
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <ControllerEventNotify+0xc0>
 8001492:	f240 4205 	movw	r2, #1029	; 0x405
 8001496:	4293      	cmp	r3, r2
 8001498:	dc12      	bgt.n	80014c0 <ControllerEventNotify+0xd0>
 800149a:	f240 4201 	movw	r2, #1025	; 0x401
 800149e:	4293      	cmp	r3, r2
 80014a0:	d008      	beq.n	80014b4 <ControllerEventNotify+0xc4>
 80014a2:	f240 4202 	movw	r2, #1026	; 0x402
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10a      	bne.n	80014c0 <ControllerEventNotify+0xd0>
	        case(EVT_BLUE_GATT_ATTRIBUTE_MODIFIED):
	        		break;
	        case(EVT_BLUE_GAP_PASS_KEY_REQUEST):
	        		break;
 80014aa:	e004      	b.n	80014b6 <ControllerEventNotify+0xc6>
	        		break;
 80014ac:	bf00      	nop
 80014ae:	e007      	b.n	80014c0 <ControllerEventNotify+0xd0>
	        case(EVT_BLUE_GAP_PAIRING_CMPLT):
	        		break;
	        case(EVT_BLUE_GAP_BOND_LOST):
	        		break;
 80014b0:	bf00      	nop
 80014b2:	e005      	b.n	80014c0 <ControllerEventNotify+0xd0>
	        		break;
 80014b4:	bf00      	nop
	        }
	      }
	      break;
 80014b6:	e003      	b.n	80014c0 <ControllerEventNotify+0xd0>
	    return;
 80014b8:	bf00      	nop
 80014ba:	e002      	b.n	80014c2 <ControllerEventNotify+0xd2>
	      break;
 80014bc:	bf00      	nop
 80014be:	e000      	b.n	80014c2 <ControllerEventNotify+0xd2>
	      break;
 80014c0:	bf00      	nop
	    }
}
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000036 	.word	0x20000036
 80014cc:	20000034 	.word	0x20000034

080014d0 <ControllerButtonInit>:

static void ControllerButtonInit(FitnessControllerHandle_t *FitnessController){
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e03f      	b.n	800155e <ControllerButtonInit+0x8e>
		FitnessController->Buttons[i].ButtonMsk = ButtonMskLUT[i];
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	4923      	ldr	r1, [pc, #140]	; (8001570 <ControllerButtonInit+0xa0>)
 80014e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3318      	adds	r3, #24
 80014f6:	4602      	mov	r2, r0
 80014f8:	801a      	strh	r2, [r3, #0]
		if(i != XINPUT_LEFT_THUMB_INDEX && i != XINPUT_RIGHT_THUMB_INDEX){
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d017      	beq.n	8001530 <ControllerButtonInit+0x60>
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d014      	beq.n	8001530 <ControllerButtonInit+0x60>
		    ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverPosLogic);
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	18d6      	adds	r6, r2, r3
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <ControllerButtonInit+0xa4>)
 8001516:	7bfd      	ldrb	r5, [r7, #15]
 8001518:	466c      	mov	r4, sp
 800151a:	f103 0208 	add.w	r2, r3, #8
 800151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001524:	cb0c      	ldmia	r3, {r2, r3}
 8001526:	4631      	mov	r1, r6
 8001528:	4628      	mov	r0, r5
 800152a:	f7ff fb43 	bl	8000bb4 <ButtonInit>
 800152e:	e013      	b.n	8001558 <ControllerButtonInit+0x88>
		} else {
			ButtonInit(i, &FitnessController->Buttons[i].Button, ButtonIO_DriverNegLogic);
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	18d6      	adds	r6, r2, r3
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <ControllerButtonInit+0xa8>)
 8001540:	7bfd      	ldrb	r5, [r7, #15]
 8001542:	466c      	mov	r4, sp
 8001544:	f103 0208 	add.w	r2, r3, #8
 8001548:	ca07      	ldmia	r2, {r0, r1, r2}
 800154a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800154e:	cb0c      	ldmia	r3, {r2, r3}
 8001550:	4631      	mov	r1, r6
 8001552:	4628      	mov	r0, r5
 8001554:	f7ff fb2e 	bl	8000bb4 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b0d      	cmp	r3, #13
 8001562:	d9bc      	bls.n	80014de <ControllerButtonInit+0xe>
		}
	}

}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	bf00      	nop
 8001570:	0800a330 	.word	0x0800a330
 8001574:	0800a278 	.word	0x0800a278
 8001578:	0800a28c 	.word	0x0800a28c

0800157c <ControllerTriggerInit>:

static void ControllerTriggerInit(FitnessControllerHandle_t *FitnessController){
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]
	TriggerInit(&FitnessController->Triggers[XINPUT_LEFTANALOG_INDEX], TriggerIO_Driver1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <ControllerTriggerInit+0x4c>)
 800158c:	466d      	mov	r5, sp
 800158e:	f103 020c 	add.w	r2, r3, #12
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e885 0003 	stmia.w	r5, {r0, r1}
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fba9 	bl	8000cf4 <TriggerInit>
	TriggerInit(&FitnessController->Triggers[XINPUT_RIGHTANALOG_INDEX], TriggerIO_Driver2);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <ControllerTriggerInit+0x50>)
 80015aa:	466d      	mov	r5, sp
 80015ac:	f103 020c 	add.w	r2, r3, #12
 80015b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fb9a 	bl	8000cf4 <TriggerInit>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdb0      	pop	{r4, r5, r7, pc}
 80015c8:	0800a2a0 	.word	0x0800a2a0
 80015cc:	0800a2b4 	.word	0x0800a2b4

080015d0 <ControllerStickInit>:

static void ControllerStickInit(FitnessControllerHandle_t *FitnessController){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
   AnalogStickInit(&FitnessController->Sticks[XINPUT_LEFTANALOG_INDEX], AnalogStickIO_Driver1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <ControllerStickInit+0x4c>)
 80015e0:	466d      	mov	r5, sp
 80015e2:	f103 020c 	add.w	r2, r3, #12
 80015e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fa17 	bl	8000a24 <AnalogStickInit>
   AnalogStickInit(&FitnessController->Sticks[XINPUT_RIGHTANALOG_INDEX], AnalogStickIO_Driver2);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <ControllerStickInit+0x50>)
 80015fe:	466d      	mov	r5, sp
 8001600:	f103 020c 	add.w	r2, r3, #12
 8001604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001608:	e885 0003 	stmia.w	r5, {r0, r1}
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff fa08 	bl	8000a24 <AnalogStickInit>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bdb0      	pop	{r4, r5, r7, pc}
 800161c:	0800a1e0 	.word	0x0800a1e0
 8001620:	0800a1f4 	.word	0x0800a1f4

08001624 <AddHIDService>:
};

static HIDServiceStatus_t AddHIDCharacteristics(void);
static HIDServiceStatus_t InitHIDCharacteristicValues(void);

HIDServiceStatus_t AddHIDService(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
	tBleStatus status;
	HIDServiceStatus_t ret;
	uint16_t uuid = HID_SERVICE_UUID;
 800162a:	f641 0312 	movw	r3, #6162	; 0x1812
 800162e:	80bb      	strh	r3, [r7, #4]
	status = aci_gatt_add_serv(UUID_TYPE_16, (const uint8_t*)&uuid, PRIMARY_SERVICE, 16, &HidServiceHandle);
 8001630:	1d39      	adds	r1, r7, #4
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <AddHIDService+0x44>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2310      	movs	r3, #16
 8001638:	2201      	movs	r2, #1
 800163a:	2001      	movs	r0, #1
 800163c:	f006 fa6b 	bl	8007b16 <aci_gatt_add_serv>
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
	if(status != BLE_STATUS_SUCCESS){
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <AddHIDService+0x30>
		printf("Adding HID Service Failed\n\r");
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <AddHIDService+0x48>)
 800164c:	f007 fbc2 	bl	8008dd4 <iprintf>
		return HID_AddServiceErr;
 8001650:	2304      	movs	r3, #4
 8001652:	e004      	b.n	800165e <AddHIDService+0x3a>
	}
	ret = AddHIDCharacteristics();
 8001654:	f000 f80c 	bl	8001670 <AddHIDCharacteristics>
 8001658:	4603      	mov	r3, r0
 800165a:	71bb      	strb	r3, [r7, #6]
    return ret;
 800165c:	79bb      	ldrb	r3, [r7, #6]

}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000408 	.word	0x20000408
 800166c:	0800a184 	.word	0x0800a184

08001670 <AddHIDCharacteristics>:

uint16_t GetHIDServiceHandle(void){
	return HidServiceHandle;
}

static HIDServiceStatus_t AddHIDCharacteristics(void){
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b08b      	sub	sp, #44	; 0x2c
 8001674:	af06      	add	r7, sp, #24
	tBleStatus status;
	HIDServiceStatus_t ret;
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e040      	b.n	80016fe <AddHIDCharacteristics+0x8e>
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <AddHIDCharacteristics+0xa8>)
 800167e:	881c      	ldrh	r4, [r3, #0]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <AddHIDCharacteristics+0xac>)
 8001684:	5cd5      	ldrb	r5, [r2, r3]
        		                   HIDCharUUIDType[i],                          //UUID Type
				                   (const uint8_t*)&HIDCharUUIDLookUpTable[i],  //UUID Value
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <AddHIDCharacteristics+0xb0>)
 800168c:	189e      	adds	r6, r3, r2
								   HIDCharValueLenLookUpTable[i],               //Char Value Length
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <AddHIDCharacteristics+0xb4>)
 8001692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 8001696:	fa5f fc83 	uxtb.w	ip, r3
				                   HIDCharPropertiesLookUpTable[i],             //Char Properties
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <AddHIDCharacteristics+0xb8>)
 800169e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	4920      	ldr	r1, [pc, #128]	; (800172c <AddHIDCharacteristics+0xbc>)
 80016aa:	5c8a      	ldrb	r2, [r1, r2]
 80016ac:	7bf9      	ldrb	r1, [r7, #15]
 80016ae:	4820      	ldr	r0, [pc, #128]	; (8001730 <AddHIDCharacteristics+0xc0>)
 80016b0:	5c41      	ldrb	r1, [r0, r1]
				                   HIDCharPermissionsLookUpTable[i],            //Char SecPermissions
								   HID_CharNotifyModeLookUpTable[i],            //Char Application (Server Side)Notify Mode e.g. Will the BLE Controller Notify me when a r/w occurs
				                   16,                                          //Encyption Key Size
				                   0,                                           //Does the value field have variable length? 1= yes, 0 = no
				                   &HIDCharHandleLookUpTable[i]);               //HID Char Handle Address
 80016b2:	7bf8      	ldrb	r0, [r7, #15]
        status = aci_gatt_add_char(HidServiceHandle,                            //Service Handle
 80016b4:	0040      	lsls	r0, r0, #1
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <AddHIDCharacteristics+0xc4>)
 80016b8:	4418      	add	r0, r3
 80016ba:	9005      	str	r0, [sp, #20]
 80016bc:	2000      	movs	r0, #0
 80016be:	9004      	str	r0, [sp, #16]
 80016c0:	2010      	movs	r0, #16
 80016c2:	9003      	str	r0, [sp, #12]
 80016c4:	9102      	str	r1, [sp, #8]
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4663      	mov	r3, ip
 80016ce:	4632      	mov	r2, r6
 80016d0:	4629      	mov	r1, r5
 80016d2:	4620      	mov	r0, r4
 80016d4:	f006 faa8 	bl	8007c28 <aci_gatt_add_char>
 80016d8:	4603      	mov	r3, r0
 80016da:	737b      	strb	r3, [r7, #13]
        if(status != BLE_STATUS_SUCCESS){
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <AddHIDCharacteristics+0x88>
        	printf(HIDCharErrorStringLookUpTable[i]);
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <AddHIDCharacteristics+0xc8>)
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fb72 	bl	8008dd4 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <AddHIDCharacteristics+0xcc>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	e00a      	b.n	800170e <AddHIDCharacteristics+0x9e>
    for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d9bb      	bls.n	800167c <AddHIDCharacteristics+0xc>
        }
    }
    ret = InitHIDCharacteristicValues();
 8001704:	f000 f81c 	bl	8001740 <InitHIDCharacteristicValues>
 8001708:	4603      	mov	r3, r0
 800170a:	73bb      	strb	r3, [r7, #14]
    return ret;
 800170c:	7bbb      	ldrb	r3, [r7, #14]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	20000408 	.word	0x20000408
 800171c:	0800a3a8 	.word	0x0800a3a8
 8001720:	0800a3ac 	.word	0x0800a3ac
 8001724:	20000038 	.word	0x20000038
 8001728:	20000040 	.word	0x20000040
 800172c:	0800a3b4 	.word	0x0800a3b4
 8001730:	0800a3b8 	.word	0x0800a3b8
 8001734:	2000040c 	.word	0x2000040c
 8001738:	20000048 	.word	0x20000048
 800173c:	0800a3bc 	.word	0x0800a3bc

08001740 <InitHIDCharacteristicValues>:

static HIDServiceStatus_t InitHIDCharacteristicValues(void){
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b08d      	sub	sp, #52	; 0x34
 8001744:	af0a      	add	r7, sp, #40	; 0x28
	tBleStatus status;

	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e04e      	b.n	80017ea <InitHIDCharacteristicValues+0xaa>
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <InitHIDCharacteristicValues+0xbc>)
 800174e:	8818      	ldrh	r0, [r3, #0]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <InitHIDCharacteristicValues+0xc0>)
 8001754:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
							                            HIDCharHandleLookUpTable[i],       //Handle of the characteristic.
														NOTIFICATION,                      //The offset from which the attribute value has to be updated
														0,
														0,
														HIDCharValueLenLookUpTable[i],     //Length of the value to be updated
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <InitHIDCharacteristicValues+0xc4>)
 800175c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 8001760:	b2db      	uxtb	r3, r3
 8001762:	79fa      	ldrb	r2, [r7, #7]
														HIDCharValueLookUpTable[i]);       //Updated characteristic value
 8001764:	4c28      	ldr	r4, [pc, #160]	; (8001808 <InitHIDCharacteristicValues+0xc8>)
 8001766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		status = aci_gatt_update_char_value_ext_IDB05A1(HidServiceHandle,              //Handle of the service to which the characteristic belongs.
 800176a:	9202      	str	r2, [sp, #8]
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2201      	movs	r2, #1
 8001776:	f006 fd39 	bl	80081ec <aci_gatt_update_char_value_ext_IDB05A1>
 800177a:	4603      	mov	r3, r0
 800177c:	71bb      	strb	r3, [r7, #6]


        if(status != BLE_STATUS_SUCCESS){
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00d      	beq.n	80017a0 <InitHIDCharacteristicValues+0x60>
        	printf("Error Initializing Characteristic\n\r");
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <InitHIDCharacteristicValues+0xcc>)
 8001786:	f007 fb25 	bl	8008dd4 <iprintf>
        	printf(HIDCharErrorStringLookUpTable[i]);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <InitHIDCharacteristicValues+0xd0>)
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	4618      	mov	r0, r3
 8001794:	f007 fb1e 	bl	8008dd4 <iprintf>
        	return HIDCharErrorReturnLookUpTable[i];
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <InitHIDCharacteristicValues+0xd4>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	e028      	b.n	80017f2 <InitHIDCharacteristicValues+0xb2>
        }
        if(i == HID_REPORT_INDEX){
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d11e      	bne.n	80017e4 <InitHIDCharacteristicValues+0xa4>
        	 uint16_t desc_uuid = HID_REPORTREF_DESC_UUID;
 80017a6:	f642 1308 	movw	r3, #10504	; 0x2908
 80017aa:	80bb      	strh	r3, [r7, #4]
             status = aci_gatt_add_char_desc(HidServiceHandle,
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <InitHIDCharacteristicValues+0xbc>)
 80017ae:	8818      	ldrh	r0, [r3, #0]
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <InitHIDCharacteristicValues+0xc0>)
 80017b2:	88d9      	ldrh	r1, [r3, #6]
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <InitHIDCharacteristicValues+0xd8>)
 80017b8:	9208      	str	r2, [sp, #32]
 80017ba:	2200      	movs	r2, #0
 80017bc:	9207      	str	r2, [sp, #28]
 80017be:	2207      	movs	r2, #7
 80017c0:	9206      	str	r2, [sp, #24]
 80017c2:	2200      	movs	r2, #0
 80017c4:	9205      	str	r2, [sp, #20]
 80017c6:	2201      	movs	r2, #1
 80017c8:	9204      	str	r2, [sp, #16]
 80017ca:	2200      	movs	r2, #0
 80017cc:	9203      	str	r2, [sp, #12]
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <InitHIDCharacteristicValues+0xdc>)
 80017d0:	9202      	str	r2, [sp, #8]
 80017d2:	2202      	movs	r2, #2
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	f006 faef 	bl	8007dbe <aci_gatt_add_char_desc>
 80017e0:	4603      	mov	r3, r0
 80017e2:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = HID_INFO_INDEX; i < HID_SERVICE_CHAR_QTY; i++){
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3301      	adds	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d9ad      	bls.n	800174c <InitHIDCharacteristicValues+0xc>
											 7,
											 0,
											 &HIDReportDescHandle);
        }
	}
	return HID_OK;
 80017f0:	2305      	movs	r3, #5
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000408 	.word	0x20000408
 8001800:	2000040c 	.word	0x2000040c
 8001804:	20000038 	.word	0x20000038
 8001808:	20000058 	.word	0x20000058
 800180c:	0800a1a0 	.word	0x0800a1a0
 8001810:	20000048 	.word	0x20000048
 8001814:	0800a3bc 	.word	0x0800a3bc
 8001818:	20000414 	.word	0x20000414
 800181c:	0800a350 	.word	0x0800a350

08001820 <SendHIDData>:

void SendHIDData(void){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af04      	add	r7, sp, #16
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SendHIDData+0x30>)
 8001828:	8818      	ldrh	r0, [r3, #0]
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <SendHIDData+0x34>)
 800182c:	88d9      	ldrh	r1, [r3, #6]
					                            HIDCharHandleLookUpTable[HID_REPORT_INDEX],       //Handle of the characteristic.
												NOTIFICATION,                                                //The offset from which the attribute value has to be updated
												0,
												0,
												HIDCharValueLenLookUpTable[HID_REPORT_INDEX],     //Length of the value to be updated
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <SendHIDData+0x38>)
 8001830:	88db      	ldrh	r3, [r3, #6]
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001832:	b2db      	uxtb	r3, r3
												HIDCharValueLookUpTable[HID_REPORT_INDEX]);       //Updated characteristic value
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <SendHIDData+0x3c>)
 8001836:	68d2      	ldr	r2, [r2, #12]
	aci_gatt_update_char_value_ext_IDB05A1(     HidServiceHandle,                                     //Handle of the service to which the characteristic belongs.
 8001838:	9202      	str	r2, [sp, #8]
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	2201      	movs	r2, #1
 8001844:	f006 fcd2 	bl	80081ec <aci_gatt_update_char_value_ext_IDB05A1>

}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000408 	.word	0x20000408
 8001854:	2000040c 	.word	0x2000040c
 8001858:	20000038 	.word	0x20000038
 800185c:	20000058 	.word	0x20000058

08001860 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ac      	sub	sp, #176	; 0xb0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2288      	movs	r2, #136	; 0x88
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f007 fa9f 	bl	8008dc4 <memset>
  if(adcHandle->Instance==ADC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3c      	ldr	r2, [pc, #240]	; (800197c <HAL_ADC_MspInit+0x11c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d171      	bne.n	8001974 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001894:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001896:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800189a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80018a6:	2318      	movs	r3, #24
 80018a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018aa:	2307      	movs	r3, #7
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 f8cb 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018cc:	f000 fc1a 	bl	8002104 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_ADC_MspInit+0x120>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LeftStick_X_Pin|LeftStick_Y_Pin|RightStick_X_Pin|RightStick_Y_Pin
 8001900:	233f      	movs	r3, #63	; 0x3f
 8001902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |LeftTrigger_Pin|RightTrigger_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001906:	230b      	movs	r3, #11
 8001908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001916:	4619      	mov	r1, r3
 8001918:	481a      	ldr	r0, [pc, #104]	; (8001984 <HAL_ADC_MspInit+0x124>)
 800191a:	f002 ff39 	bl	8004790 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_ADC_MspInit+0x12c>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_ADC_MspInit+0x128>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0x128>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_ADC_MspInit+0x128>)
 800194e:	2220      	movs	r2, #32
 8001950:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <HAL_ADC_MspInit+0x128>)
 800195a:	f002 fc85 	bl	8004268 <HAL_DMA_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001964:	f000 fbce 	bl	8002104 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_ADC_MspInit+0x128>)
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
 800196e:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_ADC_MspInit+0x128>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001974:	bf00      	nop
 8001976:	37b0      	adds	r7, #176	; 0xb0
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	50040000 	.word	0x50040000
 8001980:	40021000 	.word	0x40021000
 8001984:	48000800 	.word	0x48000800
 8001988:	2000047c 	.word	0x2000047c
 800198c:	40020008 	.word	0x40020008

08001990 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(){
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
	  ADC_MultiModeTypeDef multimode = {0};
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	615a      	str	r2, [r3, #20]

	  hadc1.Instance = ADC1;
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <ADC1_Init+0x170>)
 80019b4:	4a53      	ldr	r2, [pc, #332]	; (8001b04 <ADC1_Init+0x174>)
 80019b6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019b8:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <ADC1_Init+0x170>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <ADC1_Init+0x170>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <ADC1_Init+0x170>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <ADC1_Init+0x170>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <ADC1_Init+0x170>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <ADC1_Init+0x170>)
 80019d8:	2200      	movs	r2, #0
 80019da:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80019dc:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <ADC1_Init+0x170>)
 80019de:	2201      	movs	r2, #1
 80019e0:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 6;
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <ADC1_Init+0x170>)
 80019e4:	2206      	movs	r2, #6
 80019e6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <ADC1_Init+0x170>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <ADC1_Init+0x170>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <ADC1_Init+0x170>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <ADC1_Init+0x170>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a04:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <ADC1_Init+0x170>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <ADC1_Init+0x170>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a12:	483b      	ldr	r0, [pc, #236]	; (8001b00 <ADC1_Init+0x170>)
 8001a14:	f001 f92a 	bl	8002c6c <HAL_ADC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <ADC1_Init+0x92>
	  {
	    Error_Handler();
 8001a1e:	f000 fb71 	bl	8002104 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4834      	ldr	r0, [pc, #208]	; (8001b00 <ADC1_Init+0x170>)
 8001a2e:	f002 f9fb 	bl	8003e28 <HAL_ADCEx_MultiModeConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001a38:	f000 fb64 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001a3c:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <ADC1_Init+0x178>)
 8001a3e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a40:	2306      	movs	r3, #6
 8001a42:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001a44:	2304      	movs	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a48:	237f      	movs	r3, #127	; 0x7f
 8001a4a:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4829      	ldr	r0, [pc, #164]	; (8001b00 <ADC1_Init+0x170>)
 8001a5a:	f001 fb99 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <ADC1_Init+0xd8>
	  {
	    Error_Handler();
 8001a64:	f000 fb4e 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <ADC1_Init+0x17c>)
 8001a6a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4822      	ldr	r0, [pc, #136]	; (8001b00 <ADC1_Init+0x170>)
 8001a76:	f001 fb8b 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <ADC1_Init+0xf4>
	  {
	    Error_Handler();
 8001a80:	f000 fb40 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <ADC1_Init+0x180>)
 8001a86:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a88:	2312      	movs	r3, #18
 8001a8a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481b      	ldr	r0, [pc, #108]	; (8001b00 <ADC1_Init+0x170>)
 8001a92:	f001 fb7d 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <ADC1_Init+0x110>
	  {
	    Error_Handler();
 8001a9c:	f000 fb32 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <ADC1_Init+0x184>)
 8001aa2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001aa4:	2318      	movs	r3, #24
 8001aa6:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4814      	ldr	r0, [pc, #80]	; (8001b00 <ADC1_Init+0x170>)
 8001aae:	f001 fb6f 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <ADC1_Init+0x12c>
	  {
	    Error_Handler();
 8001ab8:	f000 fb24 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_13;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <ADC1_Init+0x188>)
 8001abe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <ADC1_Init+0x170>)
 8001acc:	f001 fb60 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <ADC1_Init+0x14a>
	  {
	    Error_Handler();
 8001ad6:	f000 fb15 	bl	8002104 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <ADC1_Init+0x18c>)
 8001adc:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001ade:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001ae2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <ADC1_Init+0x170>)
 8001aea:	f001 fb51 	bl	8003190 <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <ADC1_Init+0x168>
	  {
	    Error_Handler();
 8001af4:	f000 fb06 	bl	8002104 <Error_Handler>
	  }
}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000418 	.word	0x20000418
 8001b04:	50040000 	.word	0x50040000
 8001b08:	04300002 	.word	0x04300002
 8001b0c:	08600004 	.word	0x08600004
 8001b10:	0c900008 	.word	0x0c900008
 8001b14:	10c00010 	.word	0x10c00010
 8001b18:	36902000 	.word	0x36902000
 8001b1c:	3ac04000 	.word	0x3ac04000

08001b20 <ADC_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/* USER CODE BEGIN 2 */
void ADC_DMA_Init(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <ADC_DMA_Init+0x30>)
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <ADC_DMA_Init+0x30>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6493      	str	r3, [r2, #72]	; 0x48
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <ADC_DMA_Init+0x30>)
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	200b      	movs	r0, #11
 8001b44:	f002 fb3d 	bl	80041c2 <HAL_NVIC_SetPriority>
	  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <BLE_GPIO_Init>:
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 2 */
void BLE_GPIO_Init(void){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	4bbc      	ldr	r3, [pc, #752]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4abb      	ldr	r2, [pc, #748]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4bb9      	ldr	r3, [pc, #740]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4bb6      	ldr	r3, [pc, #728]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4ab5      	ldr	r2, [pc, #724]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4bb3      	ldr	r3, [pc, #716]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4bb0      	ldr	r3, [pc, #704]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4aaf      	ldr	r2, [pc, #700]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4bad      	ldr	r3, [pc, #692]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4aa9      	ldr	r2, [pc, #676]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4ba7      	ldr	r3, [pc, #668]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	4ba4      	ldr	r3, [pc, #656]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4aa3      	ldr	r2, [pc, #652]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4ba1      	ldr	r3, [pc, #644]	; (8001e5c <BLE_GPIO_Init+0x308>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001be8:	489d      	ldr	r0, [pc, #628]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001bea:	f003 f887 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001bf4:	489b      	ldr	r0, [pc, #620]	; (8001e64 <BLE_GPIO_Init+0x310>)
 8001bf6:	f003 f881 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f241 0181 	movw	r1, #4225	; 0x1081
 8001c00:	4899      	ldr	r0, [pc, #612]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001c02:	f003 f87b 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0c:	4896      	ldr	r0, [pc, #600]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001c0e:	f003 f875 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c18:	4894      	ldr	r0, [pc, #592]	; (8001e6c <BLE_GPIO_Init+0x318>)
 8001c1a:	f003 f86f 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c28:	f003 f868 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2120      	movs	r1, #32
 8001c30:	488c      	ldr	r0, [pc, #560]	; (8001e64 <BLE_GPIO_Init+0x310>)
 8001c32:	f003 f863 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4889      	ldr	r0, [pc, #548]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001c3c:	f003 f85e 	bl	8004cfc <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
	  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001c40:	f240 1315 	movw	r3, #277	; 0x115
 8001c44:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4881      	ldr	r0, [pc, #516]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001c5a:	f002 fd99 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001c5e:	236a      	movs	r3, #106	; 0x6a
 8001c60:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c66:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	487b      	ldr	r0, [pc, #492]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001c74:	f002 fd8c 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c82:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4877      	ldr	r0, [pc, #476]	; (8001e6c <BLE_GPIO_Init+0x318>)
 8001c90:	f002 fd7e 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin */
	  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c94:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c98:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	486b      	ldr	r0, [pc, #428]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001cb2:	f002 fd6d 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
	                           PEPin PEPin */
	  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001cb6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001cba:	617b      	str	r3, [r7, #20]
	                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cc8:	230a      	movs	r3, #10
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4863      	ldr	r0, [pc, #396]	; (8001e60 <BLE_GPIO_Init+0x30c>)
 8001cd4:	f002 fd5c 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cdc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cea:	2304      	movs	r3, #4
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	485b      	ldr	r0, [pc, #364]	; (8001e64 <BLE_GPIO_Init+0x310>)
 8001cf6:	f002 fd4b 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
	                           PBPin */
	  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001cfa:	f24f 0320 	movw	r3, #61472	; 0xf020
 8001cfe:	617b      	str	r3, [r7, #20]
	                          |SPSGRF_915_SPI3_CSN_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4854      	ldr	r0, [pc, #336]	; (8001e64 <BLE_GPIO_Init+0x310>)
 8001d14:	f002 fd3c 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin */
	  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d1c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	484c      	ldr	r0, [pc, #304]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001d36:	f002 fd2b 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8001d3a:	f648 4304 	movw	r3, #35844	; 0x8c04
 8001d3e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d44:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4845      	ldr	r0, [pc, #276]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001d52:	f002 fd1d 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001d56:	f243 0381 	movw	r3, #12417	; 0x3081
 8001d5a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	483e      	ldr	r0, [pc, #248]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001d70:	f002 fd0e 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PCPin PCPin */
	  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001d74:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d78:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4837      	ldr	r0, [pc, #220]	; (8001e6c <BLE_GPIO_Init+0x318>)
 8001d8e:	f002 fcff 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PCPin PCPin */
	  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001d92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d96:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d9c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4830      	ldr	r0, [pc, #192]	; (8001e6c <BLE_GPIO_Init+0x318>)
 8001daa:	f002 fcf1 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8001dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f002 fce1 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f002 fcd3 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PAPin PAPin PAPin */
	  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001dea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dee:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f002 fcc1 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	480f      	ldr	r0, [pc, #60]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001e2a:	f002 fcb1 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e2e:	2378      	movs	r3, #120	; 0x78
 8001e30:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <BLE_GPIO_Init+0x314>)
 8001e4a:	f002 fca1 	bl	8004790 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e52:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e54:	2312      	movs	r3, #18
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	e00a      	b.n	8001e70 <BLE_GPIO_Init+0x31c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48001000 	.word	0x48001000
 8001e64:	48000400 	.word	0x48000400
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48000800 	.word	0x48000800
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <BLE_GPIO_Init+0x35c>)
 8001e84:	f002 fc84 	bl	8004790 <HAL_GPIO_Init>
	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2017      	movs	r0, #23
 8001e8e:	f002 f998 	bl	80041c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e92:	2017      	movs	r0, #23
 8001e94:	f002 f9b1 	bl	80041fa <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2028      	movs	r0, #40	; 0x28
 8001e9e:	f002 f990 	bl	80041c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ea2:	2028      	movs	r0, #40	; 0x28
 8001ea4:	f002 f9a9 	bl	80041fa <HAL_NVIC_EnableIRQ>
}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	48000400 	.word	0x48000400

08001eb4 <Button_GPIO_Init>:

void Button_GPIO_Init(void){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a3f      	ldr	r2, [pc, #252]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <Button_GPIO_Init+0x118>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_DOWN_Pin|XINPUT_GAMEPAD_DPAD_UP_Pin|XINPUT_GAMEPAD_A_Pin|XINPUT_GAMEPAD_START_Pin
 8001f42:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8001f46:	617b      	str	r3, [r7, #20]
	                          |XINPUT_GAMEPAD_RIGHT_THUMB_Pin|XINPUT_GAMEPAD_Y_Pin|XINPUT_GAMEPAD_X_Pin|XINPUT_GAMEPAD_B_Pin
	                          |XINPUT_GAMEPAD_RIGHT_SHOULDER_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5a:	f002 fc19 	bl	8004790 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_RIGHT_THUMB_Pin;
 8001f5e:	2310      	movs	r3, #16
 8001f60:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f002 fc0c 	bl	8004790 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_LEFT_Pin;
 8001f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f7c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(XINPUT_GAMEPAD_DPAD_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <Button_GPIO_Init+0x11c>)
 8001f8e:	f002 fbff 	bl	8004790 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_DPAD_RIGHT_Pin|XINPUT_GAMEPAD_LEFT_THUMB_Pin|XINPUT_GAMEPAD_LEFT_SHOULDER_Pin|XINPUT_GAMEPAD_BACK_Pin;
 8001f92:	2317      	movs	r3, #23
 8001f94:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <Button_GPIO_Init+0x120>)
 8001fa6:	f002 fbf3 	bl	8004790 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = XINPUT_GAMEPAD_LEFT_THUMB_Pin;
 8001faa:	2302      	movs	r3, #2
 8001fac:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <Button_GPIO_Init+0x120>)
 8001fbe:	f002 fbe7 	bl	8004790 <HAL_GPIO_Init>

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000c00 	.word	0x48000c00
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <ADC_GPIO_Init+0x2c>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <ADC_GPIO_Init+0x2c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <ADC_GPIO_Init+0x2c>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200c:	f000 fb72 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002010:	f000 f816 	bl	8002040 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_DMA_Init();
  MX_USART1_UART_Init();
 8002014:	f000 f9b2 	bl	800237c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BLE_GPIO_Init();
 8002018:	f7ff fd9c 	bl	8001b54 <BLE_GPIO_Init>
  FitnessControllerBLEInit();
 800201c:	f7fe ffe4 	bl	8000fe8 <FitnessControllerBLEInit>
  printf("Initialization Success!\n");
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <main+0x30>)
 8002022:	f006 ff5d 	bl	8008ee0 <puts>
  FitnessControllerHardwareInit(&FitnessController);
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <main+0x34>)
 8002028:	f7ff f8ae 	bl	8001188 <FitnessControllerHardwareInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(5);
 800202c:	2005      	movs	r0, #5
 800202e:	f000 fbd5 	bl	80027dc <HAL_Delay>
	FitnessController_BLE_Process();
 8002032:	f7ff f88b 	bl	800114c <FitnessController_BLE_Process>
	HAL_Delay(5);
 8002036:	e7f9      	b.n	800202c <main+0x24>
 8002038:	0800a1c4 	.word	0x0800a1c4
 800203c:	20000210 	.word	0x20000210

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b096      	sub	sp, #88	; 0x58
 8002044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	2244      	movs	r2, #68	; 0x44
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f006 feb8 	bl	8008dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002062:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002066:	f002 fea3 	bl	8004db0 <HAL_PWREx_ControlVoltageScaling>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002070:	f000 f848 	bl	8002104 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002074:	f002 fe7e 	bl	8004d74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <SystemClock_Config+0xc0>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <SystemClock_Config+0xc0>)
 8002080:	f023 0318 	bic.w	r3, r3, #24
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002088:	2314      	movs	r3, #20
 800208a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209c:	2302      	movs	r3, #2
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80020a0:	2301      	movs	r3, #1
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020a8:	2328      	movs	r3, #40	; 0x28
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020ac:	2307      	movs	r3, #7
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fecd 	bl	8004e5c <HAL_RCC_OscConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80020c8:	f000 f81c 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020cc:	230f      	movs	r3, #15
 80020ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d0:	2303      	movs	r3, #3
 80020d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	2104      	movs	r1, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fa95 	bl	8005614 <HAL_RCC_ClockConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020f0:	f000 f808 	bl	8002104 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020f4:	f003 ff9c 	bl	8006030 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020f8:	bf00      	nop
 80020fa:	3758      	adds	r7, #88	; 0x58
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210c:	e7fe      	b.n	800210c <Error_Handler+0x8>
	...

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_MspInit+0x44>)
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_MspInit+0x44>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6613      	str	r3, [r2, #96]	; 0x60
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_MspInit+0x44>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_MspInit+0x44>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_MspInit+0x44>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_MspInit+0x44>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 fafa 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA1_Channel1_IRQHandler+0x10>)
 80021b2:	f002 f9af 	bl	8004514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000047c 	.word	0x2000047c

080021c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80021c4:	2020      	movs	r0, #32
 80021c6:	f002 fdb1 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <EXTI9_5_IRQHandler+0x24>)
 80021cc:	f002 fab0 	bl	8004730 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80021d0:	2080      	movs	r0, #128	; 0x80
 80021d2:	f002 fdab 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80021d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021da:	f002 fda7 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200000f4 	.word	0x200000f4

080021e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80021ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021f0:	f002 fd9c 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80021f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021f8:	f002 fd98 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80021fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002200:	f002 fd94 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002204:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002208:	f002 fd90 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e00a      	b.n	8002238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002222:	f3af 8000 	nop.w
 8002226:	4601      	mov	r1, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	b2ca      	uxtb	r2, r1
 8002230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf0      	blt.n	8002222 <_read+0x12>
	}

return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e009      	b.n	8002270 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f917 	bl	8002498 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbf1      	blt.n	800225c <_write+0x12>
	}
	return len;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_close>:

int _close(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022aa:	605a      	str	r2, [r3, #4]
	return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_isatty>:

int _isatty(int file)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	return 1;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
	return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <_sbrk+0x5c>)
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <_sbrk+0x60>)
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <_sbrk+0x64>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <_sbrk+0x68>)
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d207      	bcs.n	800232c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800231c:	f006 fd1a 	bl	8008d54 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	220c      	movs	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e009      	b.n	8002340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_sbrk+0x64>)
 800233c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20018000 	.word	0x20018000
 800234c:	00000400 	.word	0x00000400
 8002350:	200004d4 	.word	0x200004d4
 8002354:	20000b48 	.word	0x20000b48

08002358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 8002382:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <MX_USART1_UART_Init+0x5c>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART1_UART_Init+0x58>)
 80023c0:	f004 fc4a 	bl	8006c58 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023ca:	f7ff fe9b 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004d8 	.word	0x200004d8
 80023d8:	40013800 	.word	0x40013800

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0ac      	sub	sp, #176	; 0xb0
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2288      	movs	r2, #136	; 0x88
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f006 fce1 	bl	8008dc4 <memset>
  if(uartHandle->Instance==USART1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_UART_MspInit+0xb0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d13a      	bne.n	8002482 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800240c:	2301      	movs	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002410:	2300      	movs	r3, #0
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fb1f 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7ff fe6e 	bl	8002104 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_UART_MspInit+0xb4>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_UART_MspInit+0xb4>)
 800242e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002432:	6613      	str	r3, [r2, #96]	; 0x60
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_UART_MspInit+0xb4>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_UART_MspInit+0xb4>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_UART_MspInit+0xb4>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_UART_MspInit+0xb4>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002458:	23c0      	movs	r3, #192	; 0xc0
 800245a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002470:	2307      	movs	r3, #7
 8002472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_UART_MspInit+0xb8>)
 800247e:	f002 f987 	bl	8004790 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	37b0      	adds	r7, #176	; 0xb0
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40013800 	.word	0x40013800
 8002490:	40021000 	.word	0x40021000
 8002494:	48000400 	.word	0x48000400

08002498 <__io_putchar>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 10);
 80024a0:	1d39      	adds	r1, r7, #4
 80024a2:	230a      	movs	r3, #10
 80024a4:	2201      	movs	r2, #1
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <__io_putchar+0x20>)
 80024a8:	f004 fc24 	bl	8006cf4 <HAL_UART_Transmit>
	return ch;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200004d8 	.word	0x200004d8

080024bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024c0:	f7ff ff4a 	bl	8002358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c6:	490d      	ldr	r1, [pc, #52]	; (80024fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <LoopForever+0xe>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024dc:	4c0a      	ldr	r4, [pc, #40]	; (8002508 <LoopForever+0x16>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ea:	f006 fc39 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ee:	f7ff fd8b 	bl	8002008 <main>

080024f2 <LoopForever>:

LoopForever:
    b LoopForever
 80024f2:	e7fe      	b.n	80024f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002500:	0800a4b0 	.word	0x0800a4b0
  ldr r2, =_sbss
 8002504:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002508:	20000b44 	.word	0x20000b44

0800250c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC1_2_IRQHandler>
	...

08002510 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <BSP_SPI3_Init+0x54>)
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <BSP_SPI3_Init+0x58>)
 800251e:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <BSP_SPI3_Init+0x5c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	4911      	ldr	r1, [pc, #68]	; (800256c <BSP_SPI3_Init+0x5c>)
 8002528:	600a      	str	r2, [r1, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d114      	bne.n	8002558 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <BSP_SPI3_Init+0x54>)
 8002530:	f004 fa20 	bl	8006974 <HAL_SPI_GetState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <BSP_SPI3_Init+0x54>)
 800253c:	f000 f882 	bl	8002644 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002546:	4807      	ldr	r0, [pc, #28]	; (8002564 <BSP_SPI3_Init+0x54>)
 8002548:	f000 f83a 	bl	80025c0 <MX_SPI3_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002552:	f06f 0307 	mvn.w	r3, #7
 8002556:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000055c 	.word	0x2000055c
 8002568:	40003c00 	.word	0x40003c00
 800256c:	200005c0 	.word	0x200005c0

08002570 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <BSP_SPI3_SendRecv+0x3c>)
 8002590:	f003 ffdd 	bl	800654e <HAL_SPI_TransmitReceive>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800259a:	f06f 0305 	mvn.w	r3, #5
 800259e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80025a0:	697b      	ldr	r3, [r7, #20]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000055c 	.word	0x2000055c

080025b0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80025b4:	f000 f906 	bl	80027c4 <HAL_GetTick>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <MX_SPI3_Init+0x80>)
 80025d0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025e6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fa:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2218      	movs	r2, #24
 8002600:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2207      	movs	r2, #7
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2208      	movs	r2, #8
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f003 fee4 	bl	80063f4 <HAL_SPI_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40003c00 	.word	0x40003c00

08002644 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <SPI3_MspInit+0xa8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <SPI3_MspInit+0xa8>)
 8002652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002656:	6593      	str	r3, [r2, #88]	; 0x58
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <SPI3_MspInit+0xa8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <SPI3_MspInit+0xa8>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <SPI3_MspInit+0xa8>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <SPI3_MspInit+0xa8>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 800267c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800268e:	2306      	movs	r3, #6
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4815      	ldr	r0, [pc, #84]	; (80026f0 <SPI3_MspInit+0xac>)
 800269a:	f002 f879 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800269e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80026b0:	2306      	movs	r3, #6
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <SPI3_MspInit+0xac>)
 80026bc:	f002 f868 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80026d2:	2306      	movs	r3, #6
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <SPI3_MspInit+0xac>)
 80026de:	f002 f857 	bl	8004790 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	; 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	48000800 	.word	0x48000800

080026f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fe:	2003      	movs	r0, #3
 8002700:	f001 fd54 	bl	80041ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f80d 	bl	8002724 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	e001      	b.n	800271a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002716:	f7ff fcfb 	bl	8002110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800271a:	79fb      	ldrb	r3, [r7, #7]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_InitTick+0x6c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_InitTick+0x70>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_InitTick+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fd6f 	bl	8004232 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d809      	bhi.n	8002774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f001 fd2b 	bl	80041c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_InitTick+0x74>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e007      	b.n	8002784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e004      	b.n	8002784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e001      	b.n	8002784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000070 	.word	0x20000070
 8002794:	20000068 	.word	0x20000068
 8002798:	2000006c 	.word	0x2000006c

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000070 	.word	0x20000070
 80027c0:	200005c4 	.word	0x200005c4

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	200005c4 	.word	0x200005c4

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff ffee 	bl	80027c4 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_Delay+0x44>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffde 	bl	80027c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000070 	.word	0x20000070

08002824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <LL_ADC_SetOffset+0x44>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	03fff000 	.word	0x03fff000

080028d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	461a      	mov	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3360      	adds	r3, #96	; 0x60
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3330      	adds	r3, #48	; 0x30
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	211f      	movs	r1, #31
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 011f 	and.w	r1, r3, #31
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3314      	adds	r3, #20
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0e5b      	lsrs	r3, r3, #25
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0d1b      	lsrs	r3, r3, #20
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2107      	movs	r1, #7
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0318 	and.w	r3, r3, #24
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a30:	40d9      	lsrs	r1, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	400b      	ands	r3, r1
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	0007ffff 	.word	0x0007ffff

08002a54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 031f 	and.w	r3, r3, #31
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6093      	str	r3, [r2, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d101      	bne.n	8002aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f043 0202 	orr.w	r2, r3, #2
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_IsEnabled+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_IsEnabled+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_IsDisableOngoing+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_IsDisableOngoing+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e136      	b.n	8002ef4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fe fde3 	bl	8001860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fef1 	bl	8002a94 <LL_ADC_IsDeepPowerDownEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fed7 	bl	8002a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff0c 	bl	8002ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fef0 	bl	8002abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_ADC_Init+0x290>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4a87      	ldr	r2, [pc, #540]	; (8002f00 <HAL_ADC_Init+0x294>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff feee 	bl	8002ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff62 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80cf 	bne.w	8002ee2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 80cb 	bne.w	8002ee2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fefb 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d115      	bne.n	8002d98 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6c:	4865      	ldr	r0, [pc, #404]	; (8002f04 <HAL_ADC_Init+0x298>)
 8002d6e:	f7ff fef5 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d72:	4604      	mov	r4, r0
 8002d74:	4864      	ldr	r0, [pc, #400]	; (8002f08 <HAL_ADC_Init+0x29c>)
 8002d76:	f7ff fef1 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	431c      	orrs	r4, r3
 8002d7e:	4863      	ldr	r0, [pc, #396]	; (8002f0c <HAL_ADC_Init+0x2a0>)
 8002d80:	f7ff feec 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4323      	orrs	r3, r4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	485f      	ldr	r0, [pc, #380]	; (8002f10 <HAL_ADC_Init+0x2a4>)
 8002d94:	f7ff fd46 	bl	8002824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7e5b      	ldrb	r3, [r3, #25]
 8002d9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002da8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	045b      	lsls	r3, r3, #17
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_ADC_Init+0x2a8>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fef5 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8002e0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff16 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 8002e1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d13d      	bne.n	8002e9e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d13a      	bne.n	8002e9e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d118      	bne.n	8002e8e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	611a      	str	r2, [r3, #16]
 8002e8c:	e007      	b.n	8002e9e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f023 010f 	bic.w	r1, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebe:	e007      	b.n	8002ed0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 020f 	bic.w	r2, r2, #15
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f023 0303 	bic.w	r3, r3, #3
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
 8002ee0:	e007      	b.n	8002ef2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3724      	adds	r7, #36	; 0x24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	20000068 	.word	0x20000068
 8002f00:	053e2d63 	.word	0x053e2d63
 8002f04:	50040000 	.word	0x50040000
 8002f08:	50040100 	.word	0x50040100
 8002f0c:	50040200 	.word	0x50040200
 8002f10:	50040300 	.word	0x50040300
 8002f14:	fff0c007 	.word	0xfff0c007

08002f18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f24:	4853      	ldr	r0, [pc, #332]	; (8003074 <HAL_ADC_Start_DMA+0x15c>)
 8002f26:	f7ff fd95 	bl	8002a54 <LL_ADC_GetMultimode>
 8002f2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe61 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 8093 	bne.w	8003064 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_Start_DMA+0x34>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e08e      	b.n	800306a <HAL_ADC_Start_DMA+0x152>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a47      	ldr	r2, [pc, #284]	; (8003078 <HAL_ADC_Start_DMA+0x160>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d008      	beq.n	8002f70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d172      	bne.n	8003056 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fdb9 	bl	8003ae8 <ADC_Enable>
 8002f76:	4603      	mov	r3, r0
 8002f78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d165      	bne.n	800304c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a38      	ldr	r2, [pc, #224]	; (800307c <HAL_ADC_Start_DMA+0x164>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d002      	beq.n	8002fa4 <HAL_ADC_Start_DMA+0x8c>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_Start_DMA+0x8e>
 8002fa4:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_ADC_Start_DMA+0x168>)
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d002      	beq.n	8002fb4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f023 0206 	bic.w	r2, r3, #6
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fd8:	e002      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_ADC_Start_DMA+0x16c>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_ADC_Start_DMA+0x170>)
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_ADC_Start_DMA+0x174>)
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	221c      	movs	r2, #28
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0210 	orr.w	r2, r2, #16
 8003016:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	4619      	mov	r1, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f001 f9ce 	bl	80043d8 <HAL_DMA_Start_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fdaf 	bl	8002ba8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800304a:	e00d      	b.n	8003068 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003054:	e008      	b.n	8003068 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003062:	e001      	b.n	8003068 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	50040300 	.word	0x50040300
 8003078:	50040200 	.word	0x50040200
 800307c:	50040100 	.word	0x50040100
 8003080:	50040000 	.word	0x50040000
 8003084:	08003cb3 	.word	0x08003cb3
 8003088:	08003d8b 	.word	0x08003d8b
 800308c:	08003da7 	.word	0x08003da7

08003090 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Stop_DMA+0x16>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e051      	b.n	800314a <HAL_ADC_Stop_DMA+0xba>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030ae:	2103      	movs	r1, #3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fc5d 	bl	8003970 <ADC_ConversionStop>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d13f      	bne.n	8003140 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d10f      	bne.n	80030fe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f9d8 	bl	8004498 <HAL_DMA_Abort>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0210 	bic.w	r2, r2, #16
 800310c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fd6d 	bl	8003bf4 <ADC_Disable>
 800311a:	4603      	mov	r3, r0
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e002      	b.n	8003126 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fd67 	bl	8003bf4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0b6      	sub	sp, #216	; 0xd8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x22>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e3c7      	b.n	8003942 <HAL_ADC_ConfigChannel+0x7b2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fd1a 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 83a8 	bne.w	800391c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d824      	bhi.n	800321e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	3b02      	subs	r3, #2
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d81b      	bhi.n	8003216 <HAL_ADC_ConfigChannel+0x86>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_ADC_ConfigChannel+0x54>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	08003205 	.word	0x08003205
 80031f0:	0800320d 	.word	0x0800320d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	220c      	movs	r2, #12
 80031f8:	605a      	str	r2, [r3, #4]
          break;
 80031fa:	e011      	b.n	8003220 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2212      	movs	r2, #18
 8003200:	605a      	str	r2, [r3, #4]
          break;
 8003202:	e00d      	b.n	8003220 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2218      	movs	r2, #24
 8003208:	605a      	str	r2, [r3, #4]
          break;
 800320a:	e009      	b.n	8003220 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003212:	605a      	str	r2, [r3, #4]
          break;
 8003214:	e004      	b.n	8003220 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2206      	movs	r2, #6
 800321a:	605a      	str	r2, [r3, #4]
          break;
 800321c:	e000      	b.n	8003220 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800321e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	f7ff fb95 	bl	800295c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fcde 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 800323c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fcfe 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 800324a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800324e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 81a6 	bne.w	80035a4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 81a1 	bne.w	80035a4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	461a      	mov	r2, r3
 8003270:	f7ff fba0 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00a      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032a6:	f7ff faf1 	bl	800288c <LL_ADC_SetOffset>
 80032aa:	e17b      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fb0e 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x148>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fb03 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e01e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x186>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff faf8 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e004      	b.n	8003314 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800330a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_ADC_ConfigChannel+0x19e>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	e018      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800334a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e004      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fac7 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff faab 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_ADC_ConfigChannel+0x20e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff faa0 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	e01e      	b.n	80033dc <HAL_ADC_ConfigChannel+0x24c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fa95 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80033d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x264>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	e018      	b.n	8003426 <HAL_ADC_ConfigChannel+0x296>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003408:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800340c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e004      	b.n	8003426 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800341c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003426:	429a      	cmp	r2, r3
 8003428:	d106      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fa64 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fa48 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x2d4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fa3d 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	e01e      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x312>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fa32 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800348a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x32a>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	e016      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x358>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80034da:	2320      	movs	r3, #32
 80034dc:	e004      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80034de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d106      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fa03 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2103      	movs	r1, #3
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f9e7 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003506:	4603      	mov	r3, r0
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x396>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2103      	movs	r1, #3
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f9dc 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	0e9b      	lsrs	r3, r3, #26
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	e017      	b.n	8003556 <HAL_ADC_ConfigChannel+0x3c6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2103      	movs	r1, #3
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f9d1 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800353e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003540:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800354c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <HAL_ADC_ConfigChannel+0x3de>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	e011      	b.n	8003592 <HAL_ADC_ConfigChannel+0x402>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800357c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003592:	429a      	cmp	r2, r3
 8003594:	d106      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	2103      	movs	r1, #3
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f9ae 	bl	8002900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fad7 	bl	8002b5c <LL_ADC_IsEnabled>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 813f 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7ff fa22 	bl	8002a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a8e      	ldr	r2, [pc, #568]	; (8003808 <HAL_ADC_ConfigChannel+0x678>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f040 8130 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x46c>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e019      	b.n	8003630 <HAL_ADC_ConfigChannel+0x4a0>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800360a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800360e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e003      	b.n	8003620 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2b09      	cmp	r3, #9
 8003628:	bf94      	ite	ls
 800362a:	2301      	movls	r3, #1
 800362c:	2300      	movhi	r3, #0
 800362e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003630:	2b00      	cmp	r3, #0
 8003632:	d079      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x4c0>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	3301      	adds	r3, #1
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364e:	e015      	b.n	800367c <HAL_ADC_ConfigChannel+0x4ec>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e003      	b.n	8003674 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800366c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	069b      	lsls	r3, r3, #26
 8003678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_ADC_ConfigChannel+0x50c>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0e9b      	lsrs	r3, r3, #26
 800368e:	3301      	adds	r3, #1
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	e017      	b.n	80036cc <HAL_ADC_ConfigChannel+0x53c>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80036b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	ea42 0103 	orr.w	r1, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x562>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	e018      	b.n	8003724 <HAL_ADC_ConfigChannel+0x594>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800370a:	2320      	movs	r3, #32
 800370c:	e003      	b.n	8003716 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003724:	430b      	orrs	r3, r1
 8003726:	e080      	b.n	800382a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x5b4>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	3301      	adds	r3, #1
 800373c:	069b      	lsls	r3, r3, #26
 800373e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003742:	e015      	b.n	8003770 <HAL_ADC_ConfigChannel+0x5e0>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	069b      	lsls	r3, r3, #26
 800376c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x600>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	e017      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x630>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	61fb      	str	r3, [r7, #28]
  return result;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x65c>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	3b1e      	subs	r3, #30
 80037e4:	051b      	lsls	r3, r3, #20
 80037e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ea:	e01d      	b.n	8003828 <HAL_ADC_ConfigChannel+0x698>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	613b      	str	r3, [r7, #16]
  return result;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e005      	b.n	8003814 <HAL_ADC_ConfigChannel+0x684>
 8003808:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 021f 	and.w	r2, r3, #31
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	3b1e      	subs	r3, #30
 8003822:	051b      	lsls	r3, r3, #20
 8003824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	430b      	orrs	r3, r1
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	4619      	mov	r1, r3
 8003830:	f7ff f8c0 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b44      	ldr	r3, [pc, #272]	; (800394c <HAL_ADC_ConfigChannel+0x7bc>)
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d07a      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003840:	4843      	ldr	r0, [pc, #268]	; (8003950 <HAL_ADC_ConfigChannel+0x7c0>)
 8003842:	f7ff f815 	bl	8002870 <LL_ADC_GetCommonPathInternalCh>
 8003846:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_ADC_ConfigChannel+0x7c4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d12c      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d126      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3c      	ldr	r2, [pc, #240]	; (8003958 <HAL_ADC_ConfigChannel+0x7c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x6e4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3b      	ldr	r2, [pc, #236]	; (800395c <HAL_ADC_ConfigChannel+0x7cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d15d      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800387c:	4619      	mov	r1, r3
 800387e:	4834      	ldr	r0, [pc, #208]	; (8003950 <HAL_ADC_ConfigChannel+0x7c0>)
 8003880:	f7fe ffe3 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003884:	4b36      	ldr	r3, [pc, #216]	; (8003960 <HAL_ADC_ConfigChannel+0x7d0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	4a36      	ldr	r2, [pc, #216]	; (8003964 <HAL_ADC_ConfigChannel+0x7d4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800389e:	e002      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f9      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ac:	e040      	b.n	8003930 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <HAL_ADC_ConfigChannel+0x7d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d118      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x75a>
 80038b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d112      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_ADC_ConfigChannel+0x7c8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0x748>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a22      	ldr	r2, [pc, #136]	; (800395c <HAL_ADC_ConfigChannel+0x7cc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d12d      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e0:	4619      	mov	r1, r3
 80038e2:	481b      	ldr	r0, [pc, #108]	; (8003950 <HAL_ADC_ConfigChannel+0x7c0>)
 80038e4:	f7fe ffb1 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e8:	e024      	b.n	8003934 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_ADC_ConfigChannel+0x7dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d120      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11a      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <HAL_ADC_ConfigChannel+0x7c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d115      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800390a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800390e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003912:	4619      	mov	r1, r3
 8003914:	480e      	ldr	r0, [pc, #56]	; (8003950 <HAL_ADC_ConfigChannel+0x7c0>)
 8003916:	f7fe ff98 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
 800391a:	e00c      	b.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800392e:	e002      	b.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800393e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003942:	4618      	mov	r0, r3
 8003944:	37d8      	adds	r7, #216	; 0xd8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	80080000 	.word	0x80080000
 8003950:	50040300 	.word	0x50040300
 8003954:	c7520000 	.word	0xc7520000
 8003958:	50040000 	.word	0x50040000
 800395c:	50040200 	.word	0x50040200
 8003960:	20000068 	.word	0x20000068
 8003964:	053e2d63 	.word	0x053e2d63
 8003968:	cb840000 	.word	0xcb840000
 800396c:	80000001 	.word	0x80000001

08003970 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f936 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 800398c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f957 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 8003998:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8098 	beq.w	8003ad8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7e5b      	ldrb	r3, [r3, #25]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d126      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7e1b      	ldrb	r3, [r3, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d122      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039ca:	e014      	b.n	80039f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4a45      	ldr	r2, [pc, #276]	; (8003ae4 <ADC_ConversionStop+0x174>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d90d      	bls.n	80039f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e074      	b.n	8003ada <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d1e3      	bne.n	80039cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d014      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff f8ee 	bl	8002bf8 <LL_ADC_REG_IsConversionOngoing>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f8ab 	bl	8002b82 <LL_ADC_IsDisableOngoing>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff f8ca 	bl	8002bd0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d014      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff f8fd 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff f893 	bl	8002b82 <LL_ADC_IsDisableOngoing>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff f8d9 	bl	8002c1e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d005      	beq.n	8003a7e <ADC_ConversionStop+0x10e>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d105      	bne.n	8003a84 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a78:	230c      	movs	r3, #12
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	e005      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	617b      	str	r3, [r7, #20]
        break;
 8003a82:	e002      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a84:	2304      	movs	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fe9b 	bl	80027c4 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a90:	e01b      	b.n	8003aca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a92:	f7fe fe97 	bl	80027c4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d914      	bls.n	8003aca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1dc      	bne.n	8003a92 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	a33fffff 	.word	0xa33fffff

08003ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f82f 	bl	8002b5c <LL_ADC_IsEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d169      	bne.n	8003bd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <ADC_Enable+0xfc>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e055      	b.n	8003bda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ffea 	bl	8002b0c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b38:	482b      	ldr	r0, [pc, #172]	; (8003be8 <ADC_Enable+0x100>)
 8003b3a:	f7fe fe99 	bl	8002870 <LL_ADC_GetCommonPathInternalCh>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <ADC_Enable+0x104>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <ADC_Enable+0x108>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b62:	e002      	b.n	8003b6a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f9      	bne.n	8003b64 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b70:	f7fe fe28 	bl	80027c4 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b76:	e028      	b.n	8003bca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe ffed 	bl	8002b5c <LL_ADC_IsEnabled>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ffbd 	bl	8002b0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b92:	f7fe fe17 	bl	80027c4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d00d      	beq.n	8003bca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d1cf      	bne.n	8003b78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	8000003f 	.word	0x8000003f
 8003be8:	50040300 	.word	0x50040300
 8003bec:	20000068 	.word	0x20000068
 8003bf0:	053e2d63 	.word	0x053e2d63

08003bf4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe ffbe 	bl	8002b82 <LL_ADC_IsDisableOngoing>
 8003c06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe ffa5 	bl	8002b5c <LL_ADC_IsEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d047      	beq.n	8003ca8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d144      	bne.n	8003ca8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030d 	and.w	r3, r3, #13
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10c      	bne.n	8003c46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe ff7f 	bl	8002b34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c3e:	f7fe fdc1 	bl	80027c4 <HAL_GetTick>
 8003c42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c44:	e029      	b.n	8003c9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0210 	orr.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e023      	b.n	8003caa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c62:	f7fe fdaf 	bl	80027c4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d914      	bls.n	8003c9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1dc      	bne.n	8003c62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d14b      	bne.n	8003d64 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fe23 	bl	8002936 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d032      	beq.n	8003d5c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d12b      	bne.n	8003d5c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11f      	bne.n	8003d5c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
 8003d28:	e018      	b.n	8003d5c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff f9f8 	bl	8003152 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d62:	e00e      	b.n	8003d82 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff fa02 	bl	800317a <HAL_ADC_ErrorCallback>
}
 8003d76:	e004      	b.n	8003d82 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff f9e4 	bl	8003166 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff f9d4 	bl	800317a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <LL_ADC_IsEnabled>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_IsEnabled+0x18>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_IsEnabled+0x1a>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d101      	bne.n	8003e18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b09f      	sub	sp, #124	; 0x7c
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e093      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003e52:	2300      	movs	r3, #0
 8003e54:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d102      	bne.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	e001      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e072      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ffb8 	bl	8003e00 <LL_ADC_REG_IsConversionOngoing>
 8003e90:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ffb2 	bl	8003e00 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d154      	bne.n	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d151      	bne.n	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003eaa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02c      	beq.n	8003f0e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ec6:	035b      	lsls	r3, r3, #13
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ed0:	4829      	ldr	r0, [pc, #164]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ed2:	f7ff ff82 	bl	8003dda <LL_ADC_IsEnabled>
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	4828      	ldr	r0, [pc, #160]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003eda:	f7ff ff7e 	bl	8003dda <LL_ADC_IsEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	431c      	orrs	r4, r3
 8003ee2:	4828      	ldr	r0, [pc, #160]	; (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003ee4:	f7ff ff79 	bl	8003dda <LL_ADC_IsEnabled>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4323      	orrs	r3, r4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d137      	bne.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ef8:	f023 030f 	bic.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	6811      	ldr	r1, [r2, #0]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f0c:	e028      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f1a:	4817      	ldr	r0, [pc, #92]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f1c:	f7ff ff5d 	bl	8003dda <LL_ADC_IsEnabled>
 8003f20:	4604      	mov	r4, r0
 8003f22:	4816      	ldr	r0, [pc, #88]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f24:	f7ff ff59 	bl	8003dda <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	431c      	orrs	r4, r3
 8003f2c:	4815      	ldr	r0, [pc, #84]	; (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f2e:	f7ff ff54 	bl	8003dda <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4323      	orrs	r3, r4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d112      	bne.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f42:	f023 030f 	bic.w	r3, r3, #15
 8003f46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f48:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f4a:	e009      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f5e:	e000      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	377c      	adds	r7, #124	; 0x7c
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	50040000 	.word	0x50040000
 8003f7c:	50040100 	.word	0x50040100
 8003f80:	50040300 	.word	0x50040300
 8003f84:	50040200 	.word	0x50040200

08003f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	60d3      	str	r3, [r2, #12]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f003 0307 	and.w	r3, r3, #7
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db0b      	blt.n	8004016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	4907      	ldr	r1, [pc, #28]	; (8004024 <__NVIC_EnableIRQ+0x38>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2001      	movs	r0, #1
 800400e:	fa00 f202 	lsl.w	r2, r0, r2
 8004012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100

08004028 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	db12      	blt.n	8004060 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	490a      	ldr	r1, [pc, #40]	; (800406c <__NVIC_DisableIRQ+0x44>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2001      	movs	r0, #1
 800404a:	fa00 f202 	lsl.w	r2, r0, r2
 800404e:	3320      	adds	r3, #32
 8004050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004054:	f3bf 8f4f 	dsb	sy
}
 8004058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800405a:	f3bf 8f6f 	isb	sy
}
 800405e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000e100 	.word	0xe000e100

08004070 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db0c      	blt.n	800409c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <__NVIC_ClearPendingIRQ+0x38>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2001      	movs	r0, #1
 8004092:	fa00 f202 	lsl.w	r2, r0, r2
 8004096:	3360      	adds	r3, #96	; 0x60
 8004098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100

080040ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	6039      	str	r1, [r7, #0]
 80040b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	db0a      	blt.n	80040d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	490c      	ldr	r1, [pc, #48]	; (80040f8 <__NVIC_SetPriority+0x4c>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	440b      	add	r3, r1
 80040d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d4:	e00a      	b.n	80040ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4908      	ldr	r1, [pc, #32]	; (80040fc <__NVIC_SetPriority+0x50>)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	3b04      	subs	r3, #4
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	440b      	add	r3, r1
 80040ea:	761a      	strb	r2, [r3, #24]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	e000e100 	.word	0xe000e100
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f1c3 0307 	rsb	r3, r3, #7
 800411a:	2b04      	cmp	r3, #4
 800411c:	bf28      	it	cs
 800411e:	2304      	movcs	r3, #4
 8004120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3304      	adds	r3, #4
 8004126:	2b06      	cmp	r3, #6
 8004128:	d902      	bls.n	8004130 <NVIC_EncodePriority+0x30>
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3b03      	subs	r3, #3
 800412e:	e000      	b.n	8004132 <NVIC_EncodePriority+0x32>
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	f04f 32ff 	mov.w	r2, #4294967295
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	401a      	ands	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004148:	f04f 31ff 	mov.w	r1, #4294967295
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43d9      	mvns	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004158:	4313      	orrs	r3, r2
         );
}
 800415a:	4618      	mov	r0, r3
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3b01      	subs	r3, #1
 8004174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004178:	d301      	bcc.n	800417e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800417a:	2301      	movs	r3, #1
 800417c:	e00f      	b.n	800419e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <SysTick_Config+0x40>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004186:	210f      	movs	r1, #15
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	f7ff ff8e 	bl	80040ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <SysTick_Config+0x40>)
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <SysTick_Config+0x40>)
 8004198:	2207      	movs	r2, #7
 800419a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000e010 	.word	0xe000e010

080041ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fee7 	bl	8003f88 <__NVIC_SetPriorityGrouping>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041d4:	f7ff fefc 	bl	8003fd0 <__NVIC_GetPriorityGrouping>
 80041d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	6978      	ldr	r0, [r7, #20]
 80041e0:	f7ff ff8e 	bl	8004100 <NVIC_EncodePriority>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff5d 	bl	80040ac <__NVIC_SetPriority>
}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff feef 	bl	8003fec <__NVIC_EnableIRQ>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff feff 	bl	8004028 <__NVIC_DisableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ff94 	bl	8004168 <SysTick_Config>
 8004240:	4603      	mov	r3, r0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff09 	bl	8004070 <__NVIC_ClearPendingIRQ>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e098      	b.n	80043ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <HAL_DMA_Init+0x150>)
 8004282:	429a      	cmp	r2, r3
 8004284:	d80f      	bhi.n	80042a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <HAL_DMA_Init+0x154>)
 800428e:	4413      	add	r3, r2
 8004290:	4a4b      	ldr	r2, [pc, #300]	; (80043c0 <HAL_DMA_Init+0x158>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a48      	ldr	r2, [pc, #288]	; (80043c4 <HAL_DMA_Init+0x15c>)
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
 80042a4:	e00e      	b.n	80042c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <HAL_DMA_Init+0x160>)
 80042ae:	4413      	add	r3, r2
 80042b0:	4a43      	ldr	r2, [pc, #268]	; (80043c0 <HAL_DMA_Init+0x158>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	009a      	lsls	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a42      	ldr	r2, [pc, #264]	; (80043cc <HAL_DMA_Init+0x164>)
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d039      	beq.n	8004394 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <HAL_DMA_Init+0x15c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d11a      	bne.n	8004360 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_DMA_Init+0x168>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f003 031c 	and.w	r3, r3, #28
 8004336:	210f      	movs	r1, #15
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	4924      	ldr	r1, [pc, #144]	; (80043d0 <HAL_DMA_Init+0x168>)
 8004340:	4013      	ands	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_DMA_Init+0x168>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	f003 031c 	and.w	r3, r3, #28
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	491d      	ldr	r1, [pc, #116]	; (80043d0 <HAL_DMA_Init+0x168>)
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]
 800435e:	e019      	b.n	8004394 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_DMA_Init+0x16c>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	f003 031c 	and.w	r3, r3, #28
 800436c:	210f      	movs	r1, #15
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	4917      	ldr	r1, [pc, #92]	; (80043d4 <HAL_DMA_Init+0x16c>)
 8004376:	4013      	ands	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_DMA_Init+0x16c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f003 031c 	and.w	r3, r3, #28
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	4911      	ldr	r1, [pc, #68]	; (80043d4 <HAL_DMA_Init+0x16c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40020407 	.word	0x40020407
 80043bc:	bffdfff8 	.word	0xbffdfff8
 80043c0:	cccccccd 	.word	0xcccccccd
 80043c4:	40020000 	.word	0x40020000
 80043c8:	bffdfbf8 	.word	0xbffdfbf8
 80043cc:	40020400 	.word	0x40020400
 80043d0:	400200a8 	.word	0x400200a8
 80043d4:	400204a8 	.word	0x400204a8

080043d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_Start_IT+0x20>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e04b      	b.n	8004490 <HAL_DMA_Start_IT+0xb8>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d13a      	bne.n	8004482 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f91e 	bl	8004672 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 020e 	orr.w	r2, r2, #14
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e00f      	b.n	8004470 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0204 	bic.w	r2, r2, #4
 800445e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 020a 	orr.w	r2, r2, #10
 800446e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e005      	b.n	800448e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800448e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d008      	beq.n	80044c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2204      	movs	r2, #4
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e022      	b.n	8004508 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 020e 	bic.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f003 021c 	and.w	r2, r3, #28
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2101      	movs	r1, #1
 80044f0:	fa01 f202 	lsl.w	r2, r1, r2
 80044f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f003 031c 	and.w	r3, r3, #28
 8004534:	2204      	movs	r2, #4
 8004536:	409a      	lsls	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d026      	beq.n	800458e <HAL_DMA_IRQHandler+0x7a>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d021      	beq.n	800458e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f003 021c 	and.w	r2, r3, #28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	2104      	movs	r1, #4
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	2b00      	cmp	r3, #0
 8004582:	d071      	beq.n	8004668 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800458c:	e06c      	b.n	8004668 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f003 031c 	and.w	r3, r3, #28
 8004596:	2202      	movs	r2, #2
 8004598:	409a      	lsls	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02e      	beq.n	8004600 <HAL_DMA_IRQHandler+0xec>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d029      	beq.n	8004600 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 020a 	bic.w	r2, r2, #10
 80045c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f003 021c 	and.w	r2, r3, #28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2102      	movs	r1, #2
 80045e0:	fa01 f202 	lsl.w	r2, r1, r2
 80045e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d038      	beq.n	8004668 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045fe:	e033      	b.n	8004668 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f003 031c 	and.w	r3, r3, #28
 8004608:	2208      	movs	r2, #8
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02a      	beq.n	800466a <HAL_DMA_IRQHandler+0x156>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d025      	beq.n	800466a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020e 	bic.w	r2, r2, #14
 800462c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f003 021c 	and.w	r2, r3, #28
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2101      	movs	r1, #1
 800463c:	fa01 f202 	lsl.w	r2, r1, r2
 8004640:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004668:	bf00      	nop
 800466a:	bf00      	nop
}
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f003 021c 	and.w	r2, r3, #28
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f202 	lsl.w	r2, r1, r2
 8004692:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d108      	bne.n	80046b6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046b4:	e007      	b.n	80046c6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	460b      	mov	r3, r1
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]
      break;
 80046f0:	e002      	b.n	80046f8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
      break;
 80046f6:	bf00      	nop
  }

  return status;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e003      	b.n	8004722 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_EXTI_IRQHandler+0x5c>)
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4798      	blx	r3
    }
  }
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40010414 	.word	0x40010414

08004790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479e:	e17f      	b.n	8004aa0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8171 	beq.w	8004a9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d005      	beq.n	80047d0 <HAL_GPIO_Init+0x40>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d130      	bne.n	8004832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004806:	2201      	movs	r2, #1
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0201 	and.w	r2, r3, #1
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b03      	cmp	r3, #3
 800483c:	d118      	bne.n	8004870 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004844:	2201      	movs	r2, #1
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	08db      	lsrs	r3, r3, #3
 800485a:	f003 0201 	and.w	r2, r3, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b03      	cmp	r3, #3
 800487a:	d017      	beq.n	80048ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d123      	bne.n	8004900 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	08da      	lsrs	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3208      	adds	r2, #8
 80048c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	220f      	movs	r2, #15
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2203      	movs	r2, #3
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80ac 	beq.w	8004a9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004942:	4b5f      	ldr	r3, [pc, #380]	; (8004ac0 <HAL_GPIO_Init+0x330>)
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	4a5e      	ldr	r2, [pc, #376]	; (8004ac0 <HAL_GPIO_Init+0x330>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6613      	str	r3, [r2, #96]	; 0x60
 800494e:	4b5c      	ldr	r3, [pc, #368]	; (8004ac0 <HAL_GPIO_Init+0x330>)
 8004950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800495a:	4a5a      	ldr	r2, [pc, #360]	; (8004ac4 <HAL_GPIO_Init+0x334>)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	3302      	adds	r3, #2
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004984:	d025      	beq.n	80049d2 <HAL_GPIO_Init+0x242>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4f      	ldr	r2, [pc, #316]	; (8004ac8 <HAL_GPIO_Init+0x338>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01f      	beq.n	80049ce <HAL_GPIO_Init+0x23e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <HAL_GPIO_Init+0x33c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d019      	beq.n	80049ca <HAL_GPIO_Init+0x23a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4d      	ldr	r2, [pc, #308]	; (8004ad0 <HAL_GPIO_Init+0x340>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_GPIO_Init+0x236>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_GPIO_Init+0x344>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00d      	beq.n	80049c2 <HAL_GPIO_Init+0x232>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_GPIO_Init+0x348>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <HAL_GPIO_Init+0x22e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <HAL_GPIO_Init+0x34c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_GPIO_Init+0x22a>
 80049b6:	2306      	movs	r3, #6
 80049b8:	e00c      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049ba:	2307      	movs	r3, #7
 80049bc:	e00a      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049be:	2305      	movs	r3, #5
 80049c0:	e008      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049c2:	2304      	movs	r3, #4
 80049c4:	e006      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e004      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_GPIO_Init+0x244>
 80049d2:	2300      	movs	r3, #0
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	f002 0203 	and.w	r2, r2, #3
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	4093      	lsls	r3, r2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049e4:	4937      	ldr	r1, [pc, #220]	; (8004ac4 <HAL_GPIO_Init+0x334>)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049f2:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a16:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a46:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_GPIO_Init+0x350>)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f47f ae78 	bne.w	80047a0 <HAL_GPIO_Init+0x10>
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	48000400 	.word	0x48000400
 8004acc:	48000800 	.word	0x48000800
 8004ad0:	48000c00 	.word	0x48000c00
 8004ad4:	48001000 	.word	0x48001000
 8004ad8:	48001400 	.word	0x48001400
 8004adc:	48001800 	.word	0x48001800
 8004ae0:	40010400 	.word	0x40010400

08004ae4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004af2:	e0cd      	b.n	8004c90 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004af4:	2201      	movs	r2, #1
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80c0 	beq.w	8004c8a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b0a:	4a68      	ldr	r2, [pc, #416]	; (8004cac <HAL_GPIO_DeInit+0x1c8>)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b32:	d025      	beq.n	8004b80 <HAL_GPIO_DeInit+0x9c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a5e      	ldr	r2, [pc, #376]	; (8004cb0 <HAL_GPIO_DeInit+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01f      	beq.n	8004b7c <HAL_GPIO_DeInit+0x98>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <HAL_GPIO_DeInit+0x1d0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d019      	beq.n	8004b78 <HAL_GPIO_DeInit+0x94>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a5c      	ldr	r2, [pc, #368]	; (8004cb8 <HAL_GPIO_DeInit+0x1d4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_GPIO_DeInit+0x90>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a5b      	ldr	r2, [pc, #364]	; (8004cbc <HAL_GPIO_DeInit+0x1d8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00d      	beq.n	8004b70 <HAL_GPIO_DeInit+0x8c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a5a      	ldr	r2, [pc, #360]	; (8004cc0 <HAL_GPIO_DeInit+0x1dc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <HAL_GPIO_DeInit+0x88>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a59      	ldr	r2, [pc, #356]	; (8004cc4 <HAL_GPIO_DeInit+0x1e0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_GPIO_DeInit+0x84>
 8004b64:	2306      	movs	r3, #6
 8004b66:	e00c      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b68:	2307      	movs	r3, #7
 8004b6a:	e00a      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b6c:	2305      	movs	r3, #5
 8004b6e:	e008      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b70:	2304      	movs	r3, #4
 8004b72:	e006      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b74:	2303      	movs	r3, #3
 8004b76:	e004      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e002      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_GPIO_DeInit+0x9e>
 8004b80:	2300      	movs	r3, #0
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	f002 0203 	and.w	r2, r2, #3
 8004b88:	0092      	lsls	r2, r2, #2
 8004b8a:	4093      	lsls	r3, r2
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d132      	bne.n	8004bf8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b92:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	494b      	ldr	r1, [pc, #300]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004ba0:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	4947      	ldr	r1, [pc, #284]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	4944      	ldr	r1, [pc, #272]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004bbc:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	4940      	ldr	r1, [pc, #256]	; (8004cc8 <HAL_GPIO_DeInit+0x1e4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004bda:	4a34      	ldr	r2, [pc, #208]	; (8004cac <HAL_GPIO_DeInit+0x1c8>)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	3302      	adds	r3, #2
 8004be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43da      	mvns	r2, r3
 8004bea:	4830      	ldr	r0, [pc, #192]	; (8004cac <HAL_GPIO_DeInit+0x1c8>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	089b      	lsrs	r3, r3, #2
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2103      	movs	r1, #3
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	08da      	lsrs	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3208      	adds	r2, #8
 8004c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	08d2      	lsrs	r2, r2, #3
 8004c2c:	4019      	ands	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3208      	adds	r2, #8
 8004c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2103      	movs	r1, #3
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	2101      	movs	r1, #1
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	2103      	movs	r1, #3
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f af2b 	bne.w	8004af4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	48000400 	.word	0x48000400
 8004cb4:	48000800 	.word	0x48000800
 8004cb8:	48000c00 	.word	0x48000c00
 8004cbc:	48001000 	.word	0x48001000
 8004cc0:	48001400 	.word	0x48001400
 8004cc4:	48001800 	.word	0x48001800
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e001      	b.n	8004cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d0c:	787b      	ldrb	r3, [r7, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d18:	e002      	b.n	8004d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f806 	bl	8004d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40007000 	.word	0x40007000

08004d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_PWREx_GetVoltageRange+0x18>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40007000 	.word	0x40007000

08004db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbe:	d130      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc0:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d038      	beq.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2232      	movs	r2, #50	; 0x32
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0c9b      	lsrs	r3, r3, #18
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004df4:	e002      	b.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfc:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e08:	d102      	bne.n	8004e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f2      	bne.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d110      	bne.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d007      	beq.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e38:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40007000 	.word	0x40007000
 8004e54:	20000068 	.word	0x20000068
 8004e58:	431bde83 	.word	0x431bde83

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e3ca      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	4b97      	ldr	r3, [pc, #604]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e78:	4b94      	ldr	r3, [pc, #592]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80e4 	beq.w	8005058 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4a>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	f040 808b 	bne.w	8004fb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 8087 	bne.w	8004fb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ea6:	4b89      	ldr	r3, [pc, #548]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCC_OscConfig+0x62>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e3a2      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	4b82      	ldr	r3, [pc, #520]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x7c>
 8004ece:	4b7f      	ldr	r3, [pc, #508]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed6:	e005      	b.n	8004ee4 <HAL_RCC_OscConfig+0x88>
 8004ed8:	4b7c      	ldr	r3, [pc, #496]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d223      	bcs.n	8004f30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fd55 	bl	800599c <RCC_SetFlashLatencyFromMSIRange>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e383      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efc:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a72      	ldr	r2, [pc, #456]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f02:	f043 0308 	orr.w	r3, r3, #8
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	496d      	ldr	r1, [pc, #436]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	4968      	ldr	r1, [pc, #416]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
 8004f2e:	e025      	b.n	8004f7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f30:	4b66      	ldr	r3, [pc, #408]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a65      	ldr	r2, [pc, #404]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f36:	f043 0308 	orr.w	r3, r3, #8
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4960      	ldr	r1, [pc, #384]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f4e:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	495b      	ldr	r1, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fd15 	bl	800599c <RCC_SetFlashLatencyFromMSIRange>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e343      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f7c:	f000 fc4a 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b52      	ldr	r3, [pc, #328]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	4950      	ldr	r1, [pc, #320]	; (80050d0 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
 8004f98:	4a4e      	ldr	r2, [pc, #312]	; (80050d4 <HAL_RCC_OscConfig+0x278>)
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f9c:	4b4e      	ldr	r3, [pc, #312]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd fbbf 	bl	8002724 <HAL_InitTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d052      	beq.n	8005056 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	e327      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d032      	beq.n	8005022 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fbc:	4b43      	ldr	r3, [pc, #268]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a42      	ldr	r2, [pc, #264]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fbfc 	bl	80027c4 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fd0:	f7fd fbf8 	bl	80027c4 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e310      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fe2:	4b3a      	ldr	r3, [pc, #232]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a36      	ldr	r2, [pc, #216]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4931      	ldr	r1, [pc, #196]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	492c      	ldr	r1, [pc, #176]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]
 8005020:	e01a      	b.n	8005058 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005022:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800502e:	f7fd fbc9 	bl	80027c4 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005036:	f7fd fbc5 	bl	80027c4 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e2dd      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x1da>
 8005054:	e000      	b.n	8005058 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005056:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d074      	beq.n	800514e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b08      	cmp	r3, #8
 8005068:	d005      	beq.n	8005076 <HAL_RCC_OscConfig+0x21a>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d10e      	bne.n	800508e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d10b      	bne.n	800508e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d064      	beq.n	800514c <HAL_RCC_OscConfig+0x2f0>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d160      	bne.n	800514c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e2ba      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d106      	bne.n	80050a6 <HAL_RCC_OscConfig+0x24a>
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e026      	b.n	80050f4 <HAL_RCC_OscConfig+0x298>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ae:	d115      	bne.n	80050dc <HAL_RCC_OscConfig+0x280>
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a05      	ldr	r2, [pc, #20]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 80050b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a02      	ldr	r2, [pc, #8]	; (80050cc <HAL_RCC_OscConfig+0x270>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x298>
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	0800a3c0 	.word	0x0800a3c0
 80050d4:	20000068 	.word	0x20000068
 80050d8:	2000006c 	.word	0x2000006c
 80050dc:	4ba0      	ldr	r3, [pc, #640]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a9f      	ldr	r2, [pc, #636]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b9d      	ldr	r3, [pc, #628]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a9c      	ldr	r2, [pc, #624]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80050ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd fb62 	bl	80027c4 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005104:	f7fd fb5e 	bl	80027c4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	; 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e276      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005116:	4b92      	ldr	r3, [pc, #584]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x2a8>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fd fb4e 	bl	80027c4 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800512c:	f7fd fb4a 	bl	80027c4 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e262      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800513e:	4b88      	ldr	r3, [pc, #544]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x2d0>
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800514c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d060      	beq.n	800521c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d005      	beq.n	800516c <HAL_RCC_OscConfig+0x310>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d119      	bne.n	800519a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d116      	bne.n	800519a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516c:	4b7c      	ldr	r3, [pc, #496]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_OscConfig+0x328>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e23f      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	4973      	ldr	r1, [pc, #460]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005198:	e040      	b.n	800521c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d023      	beq.n	80051ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a2:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a6e      	ldr	r2, [pc, #440]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd fb09 	bl	80027c4 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fd fb05 	bl	80027c4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e21d      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c8:	4b65      	ldr	r3, [pc, #404]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b62      	ldr	r3, [pc, #392]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	495f      	ldr	r1, [pc, #380]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
 80051e8:	e018      	b.n	800521c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80051f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fd fae5 	bl	80027c4 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fe:	f7fd fae1 	bl	80027c4 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1f9      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005210:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03c      	beq.n	80052a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01c      	beq.n	800526a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005230:	4b4b      	ldr	r3, [pc, #300]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005236:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005240:	f7fd fac0 	bl	80027c4 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005248:	f7fd fabc 	bl	80027c4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e1d4      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ef      	beq.n	8005248 <HAL_RCC_OscConfig+0x3ec>
 8005268:	e01b      	b.n	80052a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	4a3b      	ldr	r2, [pc, #236]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527a:	f7fd faa3 	bl	80027c4 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd fa9f 	bl	80027c4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e1b7      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005294:	4b32      	ldr	r3, [pc, #200]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1ef      	bne.n	8005282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80a6 	beq.w	80053fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b0:	2300      	movs	r3, #0
 80052b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052b4:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10d      	bne.n	80052dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ca:	6593      	str	r3, [r2, #88]	; 0x58
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d8:	2301      	movs	r3, #1
 80052da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052dc:	4b21      	ldr	r3, [pc, #132]	; (8005364 <HAL_RCC_OscConfig+0x508>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d118      	bne.n	800531a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_RCC_OscConfig+0x508>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <HAL_RCC_OscConfig+0x508>)
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f4:	f7fd fa66 	bl	80027c4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fd fa62 	bl	80027c4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e17a      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <HAL_RCC_OscConfig+0x508>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d108      	bne.n	8005334 <HAL_RCC_OscConfig+0x4d8>
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005332:	e029      	b.n	8005388 <HAL_RCC_OscConfig+0x52c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b05      	cmp	r3, #5
 800533a:	d115      	bne.n	8005368 <HAL_RCC_OscConfig+0x50c>
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	4a03      	ldr	r2, [pc, #12]	; (8005360 <HAL_RCC_OscConfig+0x504>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800535c:	e014      	b.n	8005388 <HAL_RCC_OscConfig+0x52c>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	40007000 	.word	0x40007000
 8005368:	4b9c      	ldr	r3, [pc, #624]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	4a9b      	ldr	r2, [pc, #620]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005378:	4b98      	ldr	r3, [pc, #608]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	4a97      	ldr	r2, [pc, #604]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d016      	beq.n	80053be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fd fa18 	bl	80027c4 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fd fa14 	bl	80027c4 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e12a      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ae:	4b8b      	ldr	r3, [pc, #556]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ed      	beq.n	8005398 <HAL_RCC_OscConfig+0x53c>
 80053bc:	e015      	b.n	80053ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053be:	f7fd fa01 	bl	80027c4 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fd f9fd 	bl	80027c4 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e113      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053dc:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ed      	bne.n	80053c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f0:	4b7a      	ldr	r3, [pc, #488]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	4a79      	ldr	r2, [pc, #484]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80fe 	beq.w	8005602 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	2b02      	cmp	r3, #2
 800540c:	f040 80d0 	bne.w	80055b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005410:	4b72      	ldr	r3, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0203 	and.w	r2, r3, #3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	429a      	cmp	r2, r3
 8005422:	d130      	bne.n	8005486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	3b01      	subs	r3, #1
 8005430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d127      	bne.n	8005486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d11f      	bne.n	8005486 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005450:	2a07      	cmp	r2, #7
 8005452:	bf14      	ite	ne
 8005454:	2201      	movne	r2, #1
 8005456:	2200      	moveq	r2, #0
 8005458:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800545a:	4293      	cmp	r3, r2
 800545c:	d113      	bne.n	8005486 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d109      	bne.n	8005486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	3b01      	subs	r3, #1
 8005480:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d06e      	beq.n	8005564 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d069      	beq.n	8005560 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800548c:	4b53      	ldr	r3, [pc, #332]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005498:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0ad      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054a8:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80054ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054b4:	f7fd f986 	bl	80027c4 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fd f982 	bl	80027c4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e09a      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054da:	4b40      	ldr	r3, [pc, #256]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <HAL_RCC_OscConfig+0x784>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054ea:	3a01      	subs	r2, #1
 80054ec:	0112      	lsls	r2, r2, #4
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054f4:	0212      	lsls	r2, r2, #8
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054fc:	0852      	lsrs	r2, r2, #1
 80054fe:	3a01      	subs	r2, #1
 8005500:	0552      	lsls	r2, r2, #21
 8005502:	4311      	orrs	r1, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005508:	0852      	lsrs	r2, r2, #1
 800550a:	3a01      	subs	r2, #1
 800550c:	0652      	lsls	r2, r2, #25
 800550e:	4311      	orrs	r1, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005514:	0912      	lsrs	r2, r2, #4
 8005516:	0452      	lsls	r2, r2, #17
 8005518:	430a      	orrs	r2, r1
 800551a:	4930      	ldr	r1, [pc, #192]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800551c:	4313      	orrs	r3, r2
 800551e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005520:	4b2e      	ldr	r3, [pc, #184]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2d      	ldr	r2, [pc, #180]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800552a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005538:	f7fd f944 	bl	80027c4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd f940 	bl	80027c4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e058      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800555e:	e050      	b.n	8005602 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e04f      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d148      	bne.n	8005602 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800557a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a16      	ldr	r2, [pc, #88]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 8005582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005588:	f7fd f91c 	bl	80027c4 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005590:	f7fd f918 	bl	80027c4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e030      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x734>
 80055ae:	e028      	b.n	8005602 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d023      	beq.n	80055fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <HAL_RCC_OscConfig+0x780>)
 80055bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fd f8ff 	bl	80027c4 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c8:	e00c      	b.n	80055e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fd f8fb 	bl	80027c4 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d905      	bls.n	80055e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e013      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_RCC_OscConfig+0x7b0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ec      	bne.n	80055ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x7b0>)
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	4905      	ldr	r1, [pc, #20]	; (800560c <HAL_RCC_OscConfig+0x7b0>)
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_OscConfig+0x7b4>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	60cb      	str	r3, [r1, #12]
 80055fc:	e001      	b.n	8005602 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000
 8005610:	feeefffc 	.word	0xfeeefffc

08005614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0e7      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005628:	4b75      	ldr	r3, [pc, #468]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d910      	bls.n	8005658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b72      	ldr	r3, [pc, #456]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 0207 	bic.w	r2, r3, #7
 800563e:	4970      	ldr	r1, [pc, #448]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b6e      	ldr	r3, [pc, #440]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0cf      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d010      	beq.n	8005686 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	4b66      	ldr	r3, [pc, #408]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005670:	429a      	cmp	r2, r3
 8005672:	d908      	bls.n	8005686 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005674:	4b63      	ldr	r3, [pc, #396]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4960      	ldr	r1, [pc, #384]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04c      	beq.n	800572c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569a:	4b5a      	ldr	r3, [pc, #360]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d121      	bne.n	80056ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0a6      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056b2:	4b54      	ldr	r3, [pc, #336]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d115      	bne.n	80056ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e09a      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056ca:	4b4e      	ldr	r3, [pc, #312]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e08e      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056da:	4b4a      	ldr	r3, [pc, #296]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e086      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ea:	4b46      	ldr	r3, [pc, #280]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0203 	bic.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4943      	ldr	r1, [pc, #268]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fc:	f7fd f862 	bl	80027c4 <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	e00a      	b.n	800571a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005704:	f7fd f85e 	bl	80027c4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e06e      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	4b3a      	ldr	r3, [pc, #232]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 020c 	and.w	r2, r3, #12
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	429a      	cmp	r2, r3
 800572a:	d1eb      	bne.n	8005704 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	4b31      	ldr	r3, [pc, #196]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005744:	429a      	cmp	r2, r3
 8005746:	d208      	bcs.n	800575a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005748:	4b2e      	ldr	r3, [pc, #184]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	492b      	ldr	r1, [pc, #172]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800575a:	4b29      	ldr	r3, [pc, #164]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d210      	bcs.n	800578a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 0207 	bic.w	r2, r3, #7
 8005770:	4923      	ldr	r1, [pc, #140]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005778:	4b21      	ldr	r3, [pc, #132]	; (8005800 <HAL_RCC_ClockConfig+0x1ec>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d001      	beq.n	800578a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e036      	b.n	80057f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4918      	ldr	r1, [pc, #96]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4910      	ldr	r1, [pc, #64]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057c8:	f000 f824 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCC_ClockConfig+0x1f0>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	091b      	lsrs	r3, r3, #4
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	490b      	ldr	r1, [pc, #44]	; (8005808 <HAL_RCC_ClockConfig+0x1f4>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <HAL_RCC_ClockConfig+0x1f8>)
 80057e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_ClockConfig+0x1fc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fc ff99 	bl	8002724 <HAL_InitTick>
 80057f2:	4603      	mov	r3, r0
 80057f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80057f6:	7afb      	ldrb	r3, [r7, #11]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40022000 	.word	0x40022000
 8005804:	40021000 	.word	0x40021000
 8005808:	0800a3c0 	.word	0x0800a3c0
 800580c:	20000068 	.word	0x20000068
 8005810:	2000006c 	.word	0x2000006c

08005814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005822:	4b3e      	ldr	r3, [pc, #248]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800582c:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_GetSysClockFreq+0x34>
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b0c      	cmp	r3, #12
 8005840:	d121      	bne.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11e      	bne.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005848:	4b34      	ldr	r3, [pc, #208]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005854:	4b31      	ldr	r3, [pc, #196]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 8005856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e005      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005864:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005870:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005884:	e00a      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d102      	bne.n	8005892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800588c:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RCC_GetSysClockFreq+0x110>)
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e004      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d101      	bne.n	800589c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005898:	4b23      	ldr	r3, [pc, #140]	; (8005928 <HAL_RCC_GetSysClockFreq+0x114>)
 800589a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d134      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058a2:	4b1e      	ldr	r3, [pc, #120]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d003      	beq.n	80058ba <HAL_RCC_GetSysClockFreq+0xa6>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d003      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0xac>
 80058b8:	e005      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058ba:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <HAL_RCC_GetSysClockFreq+0x110>)
 80058bc:	617b      	str	r3, [r7, #20]
      break;
 80058be:	e005      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_RCC_GetSysClockFreq+0x114>)
 80058c2:	617b      	str	r3, [r7, #20]
      break;
 80058c4:	e002      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	617b      	str	r3, [r7, #20]
      break;
 80058ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	3301      	adds	r3, #1
 80058d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	fb03 f202 	mul.w	r2, r3, r2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	0e5b      	lsrs	r3, r3, #25
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	3301      	adds	r3, #1
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800590c:	69bb      	ldr	r3, [r7, #24]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	0800a3d8 	.word	0x0800a3d8
 8005924:	00f42400 	.word	0x00f42400
 8005928:	007a1200 	.word	0x007a1200

0800592c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_RCC_GetHCLKFreq+0x14>)
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000068 	.word	0x20000068

08005944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005948:	f7ff fff0 	bl	800592c <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_RCC_GetPCLK1Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000
 800596c:	0800a3d0 	.word	0x0800a3d0

08005970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005974:	f7ff ffda 	bl	800592c <HAL_RCC_GetHCLKFreq>
 8005978:	4602      	mov	r2, r0
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	0adb      	lsrs	r3, r3, #11
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	4904      	ldr	r1, [pc, #16]	; (8005998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005986:	5ccb      	ldrb	r3, [r1, r3]
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021000 	.word	0x40021000
 8005998:	0800a3d0 	.word	0x0800a3d0

0800599c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059a8:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059b4:	f7ff f9ee 	bl	8004d94 <HAL_PWREx_GetVoltageRange>
 80059b8:	6178      	str	r0, [r7, #20]
 80059ba:	e014      	b.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	4a24      	ldr	r2, [pc, #144]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c6:	6593      	str	r3, [r2, #88]	; 0x58
 80059c8:	4b22      	ldr	r3, [pc, #136]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059d4:	f7ff f9de 	bl	8004d94 <HAL_PWREx_GetVoltageRange>
 80059d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ec:	d10b      	bne.n	8005a06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d919      	bls.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2ba0      	cmp	r3, #160	; 0xa0
 80059f8:	d902      	bls.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059fa:	2302      	movs	r3, #2
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e013      	b.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a00:	2301      	movs	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	e010      	b.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d902      	bls.n	8005a12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e00a      	b.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d102      	bne.n	8005a1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a18:	2302      	movs	r3, #2
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	e004      	b.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b70      	cmp	r3, #112	; 0x70
 8005a22:	d101      	bne.n	8005a28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a24:	2301      	movs	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f023 0207 	bic.w	r2, r3, #7
 8005a30:	4909      	ldr	r1, [pc, #36]	; (8005a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d001      	beq.n	8005a4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40022000 	.word	0x40022000

08005a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a64:	2300      	movs	r3, #0
 8005a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d041      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a80:	d02a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a86:	d824      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a8c:	d008      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a92:	d81e      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9c:	d010      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a9e:	e018      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aa0:	4b86      	ldr	r3, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a85      	ldr	r2, [pc, #532]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aac:	e015      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 facb 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005abe:	e00c      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3320      	adds	r3, #32
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fbb6 	bl	8006238 <RCCEx_PLLSAI2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad0:	e003      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	4973      	ldr	r1, [pc, #460]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d041      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b10:	d02a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b16:	d824      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1c:	d008      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b22:	d81e      	bhi.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2c:	d010      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b2e:	e018      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b30:	4b62      	ldr	r3, [pc, #392]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a61      	ldr	r2, [pc, #388]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b3c:	e015      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fa83 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b4e:	e00c      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3320      	adds	r3, #32
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fb6e 	bl	8006238 <RCCEx_PLLSAI2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	74fb      	strb	r3, [r7, #19]
      break;
 8005b66:	e000      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b70:	4b52      	ldr	r3, [pc, #328]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7e:	494f      	ldr	r1, [pc, #316]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b86:	e001      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80a0 	beq.w	8005cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b9e:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb4:	4b41      	ldr	r3, [pc, #260]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	4a40      	ldr	r2, [pc, #256]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd0:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3a      	ldr	r2, [pc, #232]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bdc:	f7fc fdf2 	bl	80027c4 <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005be2:	e009      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be4:	f7fc fdee 	bl	80027c4 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d902      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	74fb      	strb	r3, [r7, #19]
        break;
 8005bf6:	e005      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0ef      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d15c      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c0a:	4b2c      	ldr	r3, [pc, #176]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01f      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d019      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c34:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a20      	ldr	r2, [pc, #128]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fc fdad 	bl	80027c4 <HAL_GetTick>
 8005c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6c:	e00b      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f7fc fda9 	bl	80027c4 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d902      	bls.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	74fb      	strb	r3, [r7, #19]
            break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c86:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ec      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005caa:	4904      	ldr	r1, [pc, #16]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cb4:	7cfb      	ldrb	r3, [r7, #19]
 8005cb6:	74bb      	strb	r3, [r7, #18]
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc8:	7c7b      	ldrb	r3, [r7, #17]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cce:	4b9e      	ldr	r3, [pc, #632]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd2:	4a9d      	ldr	r2, [pc, #628]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce6:	4b98      	ldr	r3, [pc, #608]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f023 0203 	bic.w	r2, r3, #3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	4994      	ldr	r1, [pc, #592]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d08:	4b8f      	ldr	r3, [pc, #572]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f023 020c 	bic.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	498c      	ldr	r1, [pc, #560]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d2a:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	4983      	ldr	r1, [pc, #524]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	497b      	ldr	r1, [pc, #492]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d6e:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7c:	4972      	ldr	r1, [pc, #456]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d90:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	496a      	ldr	r1, [pc, #424]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005db2:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	4961      	ldr	r1, [pc, #388]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dd4:	4b5c      	ldr	r3, [pc, #368]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de2:	4959      	ldr	r1, [pc, #356]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005df6:	4b54      	ldr	r3, [pc, #336]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	4950      	ldr	r1, [pc, #320]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e18:	4b4b      	ldr	r3, [pc, #300]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	4948      	ldr	r1, [pc, #288]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e3a:	4b43      	ldr	r3, [pc, #268]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	493f      	ldr	r1, [pc, #252]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d028      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e5c:	4b3a      	ldr	r3, [pc, #232]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6a:	4937      	ldr	r1, [pc, #220]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e7a:	d106      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e7c:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4a31      	ldr	r2, [pc, #196]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e86:	60d3      	str	r3, [r2, #12]
 8005e88:	e011      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e92:	d10c      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f8d8 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eaa:	7cfb      	ldrb	r3, [r7, #19]
 8005eac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d028      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	491f      	ldr	r1, [pc, #124]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed8:	d106      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee4:	60d3      	str	r3, [r2, #12]
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f8a9 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d02b      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f26:	4908      	ldr	r1, [pc, #32]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f36:	d109      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a02      	ldr	r2, [pc, #8]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f42:	60d3      	str	r3, [r2, #12]
 8005f44:	e014      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f877 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f66:	7cfb      	ldrb	r3, [r7, #19]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f6c:	7cfb      	ldrb	r3, [r7, #19]
 8005f6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02f      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f7c:	4b2b      	ldr	r3, [pc, #172]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8a:	4928      	ldr	r1, [pc, #160]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f9a:	d10d      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f854 	bl	8006050 <RCCEx_PLLSAI1_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d014      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	74bb      	strb	r3, [r7, #18]
 8005fb6:	e011      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3320      	adds	r3, #32
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f935 	bl	8006238 <RCCEx_PLLSAI2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff6:	490d      	ldr	r1, [pc, #52]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800600a:	4b08      	ldr	r3, [pc, #32]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800601a:	4904      	ldr	r1, [pc, #16]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006022:	7cbb      	ldrb	r3, [r7, #18]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40021000 	.word	0x40021000

08006030 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800603a:	f043 0304 	orr.w	r3, r3, #4
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000

08006050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800605e:	4b75      	ldr	r3, [pc, #468]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800606a:	4b72      	ldr	r3, [pc, #456]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0203 	and.w	r2, r3, #3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d10d      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
       ||
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006082:	4b6c      	ldr	r3, [pc, #432]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	091b      	lsrs	r3, r3, #4
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
       ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d047      	beq.n	8006126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	e044      	b.n	8006126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d018      	beq.n	80060d6 <RCCEx_PLLSAI1_Config+0x86>
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d825      	bhi.n	80060f4 <RCCEx_PLLSAI1_Config+0xa4>
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d002      	beq.n	80060b2 <RCCEx_PLLSAI1_Config+0x62>
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d009      	beq.n	80060c4 <RCCEx_PLLSAI1_Config+0x74>
 80060b0:	e020      	b.n	80060f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060b2:	4b60      	ldr	r3, [pc, #384]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11d      	bne.n	80060fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c2:	e01a      	b.n	80060fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060c4:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d116      	bne.n	80060fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d4:	e013      	b.n	80060fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060d6:	4b57      	ldr	r3, [pc, #348]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060e2:	4b54      	ldr	r3, [pc, #336]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060f2:	e006      	b.n	8006102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      break;
 80060f8:	e004      	b.n	8006104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060fa:	bf00      	nop
 80060fc:	e002      	b.n	8006104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060fe:	bf00      	nop
 8006100:	e000      	b.n	8006104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006102:	bf00      	nop
    }

    if(status == HAL_OK)
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10d      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800610a:	4b4a      	ldr	r3, [pc, #296]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6819      	ldr	r1, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	3b01      	subs	r3, #1
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	430b      	orrs	r3, r1
 8006120:	4944      	ldr	r1, [pc, #272]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d17d      	bne.n	8006228 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800612c:	4b41      	ldr	r3, [pc, #260]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a40      	ldr	r2, [pc, #256]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006138:	f7fc fb44 	bl	80027c4 <HAL_GetTick>
 800613c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800613e:	e009      	b.n	8006154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006140:	f7fc fb40 	bl	80027c4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d902      	bls.n	8006154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	73fb      	strb	r3, [r7, #15]
        break;
 8006152:	e005      	b.n	8006160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006154:	4b37      	ldr	r3, [pc, #220]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ef      	bne.n	8006140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d160      	bne.n	8006228 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d111      	bne.n	8006190 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800616c:	4b31      	ldr	r3, [pc, #196]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6892      	ldr	r2, [r2, #8]
 800617c:	0211      	lsls	r1, r2, #8
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68d2      	ldr	r2, [r2, #12]
 8006182:	0912      	lsrs	r2, r2, #4
 8006184:	0452      	lsls	r2, r2, #17
 8006186:	430a      	orrs	r2, r1
 8006188:	492a      	ldr	r1, [pc, #168]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800618a:	4313      	orrs	r3, r2
 800618c:	610b      	str	r3, [r1, #16]
 800618e:	e027      	b.n	80061e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d112      	bne.n	80061bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006196:	4b27      	ldr	r3, [pc, #156]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800619e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6892      	ldr	r2, [r2, #8]
 80061a6:	0211      	lsls	r1, r2, #8
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6912      	ldr	r2, [r2, #16]
 80061ac:	0852      	lsrs	r2, r2, #1
 80061ae:	3a01      	subs	r2, #1
 80061b0:	0552      	lsls	r2, r2, #21
 80061b2:	430a      	orrs	r2, r1
 80061b4:	491f      	ldr	r1, [pc, #124]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	610b      	str	r3, [r1, #16]
 80061ba:	e011      	b.n	80061e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061bc:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6892      	ldr	r2, [r2, #8]
 80061cc:	0211      	lsls	r1, r2, #8
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6952      	ldr	r2, [r2, #20]
 80061d2:	0852      	lsrs	r2, r2, #1
 80061d4:	3a01      	subs	r2, #1
 80061d6:	0652      	lsls	r2, r2, #25
 80061d8:	430a      	orrs	r2, r1
 80061da:	4916      	ldr	r1, [pc, #88]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061e0:	4b14      	ldr	r3, [pc, #80]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a13      	ldr	r2, [pc, #76]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fc faea 	bl	80027c4 <HAL_GetTick>
 80061f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061f2:	e009      	b.n	8006208 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061f4:	f7fc fae6 	bl	80027c4 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d902      	bls.n	8006208 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	73fb      	strb	r3, [r7, #15]
          break;
 8006206:	e005      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ef      	beq.n	80061f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	4904      	ldr	r1, [pc, #16]	; (8006234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000

08006238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006246:	4b6a      	ldr	r3, [pc, #424]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d018      	beq.n	8006284 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006252:	4b67      	ldr	r3, [pc, #412]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f003 0203 	and.w	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d10d      	bne.n	800627e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
       ||
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800626a:	4b61      	ldr	r3, [pc, #388]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
       ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d047      	beq.n	800630e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
 8006282:	e044      	b.n	800630e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d018      	beq.n	80062be <RCCEx_PLLSAI2_Config+0x86>
 800628c:	2b03      	cmp	r3, #3
 800628e:	d825      	bhi.n	80062dc <RCCEx_PLLSAI2_Config+0xa4>
 8006290:	2b01      	cmp	r3, #1
 8006292:	d002      	beq.n	800629a <RCCEx_PLLSAI2_Config+0x62>
 8006294:	2b02      	cmp	r3, #2
 8006296:	d009      	beq.n	80062ac <RCCEx_PLLSAI2_Config+0x74>
 8006298:	e020      	b.n	80062dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800629a:	4b55      	ldr	r3, [pc, #340]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d11d      	bne.n	80062e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062aa:	e01a      	b.n	80062e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d116      	bne.n	80062e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062bc:	e013      	b.n	80062e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062be:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ca:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062da:	e006      	b.n	80062ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      break;
 80062e0:	e004      	b.n	80062ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062f2:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	3b01      	subs	r3, #1
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	430b      	orrs	r3, r1
 8006308:	4939      	ldr	r1, [pc, #228]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800630a:	4313      	orrs	r3, r2
 800630c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d167      	bne.n	80063e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006314:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a35      	ldr	r2, [pc, #212]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800631a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006320:	f7fc fa50 	bl	80027c4 <HAL_GetTick>
 8006324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006326:	e009      	b.n	800633c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006328:	f7fc fa4c 	bl	80027c4 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d902      	bls.n	800633c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	73fb      	strb	r3, [r7, #15]
        break;
 800633a:	e005      	b.n	8006348 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800633c:	4b2c      	ldr	r3, [pc, #176]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1ef      	bne.n	8006328 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d14a      	bne.n	80063e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006354:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800635c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6892      	ldr	r2, [r2, #8]
 8006364:	0211      	lsls	r1, r2, #8
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68d2      	ldr	r2, [r2, #12]
 800636a:	0912      	lsrs	r2, r2, #4
 800636c:	0452      	lsls	r2, r2, #17
 800636e:	430a      	orrs	r2, r1
 8006370:	491f      	ldr	r1, [pc, #124]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006372:	4313      	orrs	r3, r2
 8006374:	614b      	str	r3, [r1, #20]
 8006376:	e011      	b.n	800639c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	0211      	lsls	r1, r2, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6912      	ldr	r2, [r2, #16]
 800638e:	0852      	lsrs	r2, r2, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	0652      	lsls	r2, r2, #25
 8006394:	430a      	orrs	r2, r1
 8006396:	4916      	ldr	r1, [pc, #88]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fc fa0c 	bl	80027c4 <HAL_GetTick>
 80063ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063ae:	e009      	b.n	80063c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063b0:	f7fc fa08 	bl	80027c4 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d902      	bls.n	80063c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	73fb      	strb	r3, [r7, #15]
          break;
 80063c2:	e005      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0ef      	beq.n	80063b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	4904      	ldr	r1, [pc, #16]	; (80063f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000

080063f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e095      	b.n	8006532 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d108      	bne.n	8006420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006416:	d009      	beq.n	800642c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	61da      	str	r2, [r3, #28]
 800641e:	e005      	b.n	800642c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f877 	bl	800653a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800646c:	d902      	bls.n	8006474 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e002      	b.n	800647a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006478:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006482:	d007      	beq.n	8006494 <HAL_SPI_Init+0xa0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648c:	d002      	beq.n	8006494 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	ea42 0103 	orr.w	r1, r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f003 0204 	and.w	r2, r3, #4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006510:	ea42 0103 	orr.w	r1, r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08a      	sub	sp, #40	; 0x28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800655c:	2301      	movs	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x26>
 8006570:	2302      	movs	r3, #2
 8006572:	e1fb      	b.n	800696c <HAL_SPI_TransmitReceive+0x41e>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657c:	f7fc f922 	bl	80027c4 <HAL_GetTick>
 8006580:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006588:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006598:	7efb      	ldrb	r3, [r7, #27]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00e      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x6e>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a4:	d106      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x66>
 80065ae:	7efb      	ldrb	r3, [r7, #27]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d003      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065ba:	e1cd      	b.n	8006958 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x80>
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065d4:	e1c0      	b.n	8006958 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d003      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2205      	movs	r2, #5
 80065e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	887a      	ldrh	r2, [r7, #2]
 80065fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	887a      	ldrh	r2, [r7, #2]
 8006610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	887a      	ldrh	r2, [r7, #2]
 8006616:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800662c:	d802      	bhi.n	8006634 <HAL_SPI_TransmitReceive+0xe6>
 800662e:	8a3b      	ldrh	r3, [r7, #16]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d908      	bls.n	8006646 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	e007      	b.n	8006656 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d007      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800667c:	d97c      	bls.n	8006778 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_TransmitReceive+0x13e>
 8006686:	8a7b      	ldrh	r3, [r7, #18]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d169      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b0:	e056      	b.n	8006760 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d11b      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x1aa>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d016      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x1aa>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d113      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b01      	cmp	r3, #1
 8006704:	d11c      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x1f2>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	b292      	uxth	r2, r2
 800671e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	1c9a      	adds	r2, r3, #2
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800673c:	2301      	movs	r3, #1
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006740:	f7fc f840 	bl	80027c4 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674c:	429a      	cmp	r2, r3
 800674e:	d807      	bhi.n	8006760 <HAL_SPI_TransmitReceive+0x212>
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d003      	beq.n	8006760 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800675e:	e0fb      	b.n	8006958 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1a3      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x164>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d19d      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x164>
 8006776:	e0df      	b.n	8006938 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_SPI_TransmitReceive+0x23a>
 8006780:	8a7b      	ldrh	r3, [r7, #18]
 8006782:	2b01      	cmp	r3, #1
 8006784:	f040 80cb 	bne.w	800691e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d912      	bls.n	80067b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	881a      	ldrh	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	1c9a      	adds	r2, r3, #2
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b02      	subs	r3, #2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067b6:	e0b2      	b.n	800691e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067de:	e09e      	b.n	800691e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d134      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x30a>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02f      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x30a>
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d12c      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d912      	bls.n	800682e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b02      	subs	r3, #2
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800682c:	e012      	b.n	8006854 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	7812      	ldrb	r2, [r2, #0]
 800683a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d148      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x3aa>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d042      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b01      	cmp	r3, #1
 800687c:	d923      	bls.n	80068c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	b292      	uxth	r2, r2
 800688a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	1c9a      	adds	r2, r3, #2
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b02      	subs	r3, #2
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d81f      	bhi.n	80068f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068c2:	605a      	str	r2, [r3, #4]
 80068c4:	e016      	b.n	80068f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f103 020c 	add.w	r2, r3, #12
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068f4:	2301      	movs	r3, #1
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068f8:	f7fb ff64 	bl	80027c4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006904:	429a      	cmp	r2, r3
 8006906:	d803      	bhi.n	8006910 <HAL_SPI_TransmitReceive+0x3c2>
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d102      	bne.n	8006916 <HAL_SPI_TransmitReceive+0x3c8>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800691c:	e01c      	b.n	8006958 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f af5b 	bne.w	80067e0 <HAL_SPI_TransmitReceive+0x292>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f47f af54 	bne.w	80067e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f945 	bl	8006bcc <SPI_EndRxTxTransaction>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	661a      	str	r2, [r3, #96]	; 0x60
 8006954:	e000      	b.n	8006958 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800696c:	4618      	mov	r0, r3
 800696e:	3728      	adds	r7, #40	; 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006982:	b2db      	uxtb	r3, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	4613      	mov	r3, r2
 800699e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069a0:	f7fb ff10 	bl	80027c4 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069b0:	f7fb ff08 	bl	80027c4 <HAL_GetTick>
 80069b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	015b      	lsls	r3, r3, #5
 80069bc:	0d1b      	lsrs	r3, r3, #20
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069c6:	e054      	b.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d050      	beq.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d0:	f7fb fef8 	bl	80027c4 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d902      	bls.n	80069e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d13d      	bne.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fe:	d111      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	d004      	beq.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a12:	d107      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2c:	d10f      	bne.n	8006a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e017      	b.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d19b      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000068 	.word	0x20000068

08006aa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ab2:	f7fb fe87 	bl	80027c4 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	4413      	add	r3, r2
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ac2:	f7fb fe7f 	bl	80027c4 <HAL_GetTick>
 8006ac6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ad0:	4b3d      	ldr	r3, [pc, #244]	; (8006bc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	00da      	lsls	r2, r3, #3
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	0d1b      	lsrs	r3, r3, #20
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ae8:	e060      	b.n	8006bac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006af0:	d107      	bne.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d050      	beq.n	8006bac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b0a:	f7fb fe5b 	bl	80027c4 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d902      	bls.n	8006b20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d13d      	bne.n	8006b9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b38:	d111      	bne.n	8006b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b42:	d004      	beq.n	8006b4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d107      	bne.n	8006b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b66:	d10f      	bne.n	8006b88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e010      	b.n	8006bbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d196      	bne.n	8006aea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000068 	.word	0x20000068

08006bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff ff5b 	bl	8006aa0 <SPI_WaitFifoStateUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e027      	b.n	8006c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	2180      	movs	r1, #128	; 0x80
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff fec0 	bl	8006990 <SPI_WaitFlagStateUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e014      	b.n	8006c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ff34 	bl	8006aa0 <SPI_WaitFifoStateUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c42:	f043 0220 	orr.w	r2, r3, #32
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e000      	b.n	8006c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e040      	b.n	8006cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb fbae 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2224      	movs	r2, #36	; 0x24
 8006c84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8c0 	bl	8006e1c <UART_SetConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e022      	b.n	8006cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb6c 	bl	800738c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fbf3 	bl	80074d0 <UART_CheckIdleState>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	4613      	mov	r3, r2
 8006d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	f040 8082 	bne.w	8006e12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_UART_Transmit+0x26>
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07a      	b.n	8006e14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UART_Transmit+0x38>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e073      	b.n	8006e14 <HAL_UART_Transmit+0x120>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2221      	movs	r2, #33	; 0x21
 8006d40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d42:	f7fb fd3f 	bl	80027c4 <HAL_GetTick>
 8006d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d108      	bne.n	8006d74 <HAL_UART_Transmit+0x80>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e003      	b.n	8006d7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d84:	e02d      	b.n	8006de2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fbe6 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e039      	b.n	8006e14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881a      	ldrh	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db2:	b292      	uxth	r2, r2
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e008      	b.n	8006dd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1cb      	bne.n	8006d86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2200      	movs	r2, #0
 8006df6:	2140      	movs	r1, #64	; 0x40
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fbb2 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e005      	b.n	8006e14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e20:	b08a      	sub	sp, #40	; 0x28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4ba4      	ldr	r3, [pc, #656]	; (80070dc <UART_SetConfig+0x2c0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a99      	ldr	r2, [pc, #612]	; (80070e0 <UART_SetConfig+0x2c4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	4313      	orrs	r3, r2
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a90      	ldr	r2, [pc, #576]	; (80070e4 <UART_SetConfig+0x2c8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d126      	bne.n	8006ef4 <UART_SetConfig+0xd8>
 8006ea6:	4b90      	ldr	r3, [pc, #576]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d81b      	bhi.n	8006eec <UART_SetConfig+0xd0>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0xa0>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed2:	e116      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eda:	e112      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee2:	e10e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eea:	e10a      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e106      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a7c      	ldr	r2, [pc, #496]	; (80070ec <UART_SetConfig+0x2d0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d138      	bne.n	8006f70 <UART_SetConfig+0x154>
 8006efe:	4b7a      	ldr	r3, [pc, #488]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	2b0c      	cmp	r3, #12
 8006f0a:	d82d      	bhi.n	8006f68 <UART_SetConfig+0x14c>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <UART_SetConfig+0xf8>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f69 	.word	0x08006f69
 8006f2c:	08006f69 	.word	0x08006f69
 8006f30:	08006f69 	.word	0x08006f69
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4e:	e0d8      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f50:	2302      	movs	r3, #2
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f56:	e0d4      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5e:	e0d0      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f66:	e0cc      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6e:	e0c8      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5e      	ldr	r2, [pc, #376]	; (80070f0 <UART_SetConfig+0x2d4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d125      	bne.n	8006fc6 <UART_SetConfig+0x1aa>
 8006f7a:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d016      	beq.n	8006fb6 <UART_SetConfig+0x19a>
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d818      	bhi.n	8006fbe <UART_SetConfig+0x1a2>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d00a      	beq.n	8006fa6 <UART_SetConfig+0x18a>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d814      	bhi.n	8006fbe <UART_SetConfig+0x1a2>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <UART_SetConfig+0x182>
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d008      	beq.n	8006fae <UART_SetConfig+0x192>
 8006f9c:	e00f      	b.n	8006fbe <UART_SetConfig+0x1a2>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa4:	e0ad      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fac:	e0a9      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fae:	2304      	movs	r3, #4
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb4:	e0a5      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fbc:	e0a1      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc4:	e09d      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4a      	ldr	r2, [pc, #296]	; (80070f4 <UART_SetConfig+0x2d8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d125      	bne.n	800701c <UART_SetConfig+0x200>
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fda:	2bc0      	cmp	r3, #192	; 0xc0
 8006fdc:	d016      	beq.n	800700c <UART_SetConfig+0x1f0>
 8006fde:	2bc0      	cmp	r3, #192	; 0xc0
 8006fe0:	d818      	bhi.n	8007014 <UART_SetConfig+0x1f8>
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d00a      	beq.n	8006ffc <UART_SetConfig+0x1e0>
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d814      	bhi.n	8007014 <UART_SetConfig+0x1f8>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <UART_SetConfig+0x1d8>
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d008      	beq.n	8007004 <UART_SetConfig+0x1e8>
 8006ff2:	e00f      	b.n	8007014 <UART_SetConfig+0x1f8>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffa:	e082      	b.n	8007102 <UART_SetConfig+0x2e6>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e07e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e07a      	b.n	8007102 <UART_SetConfig+0x2e6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e076      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e072      	b.n	8007102 <UART_SetConfig+0x2e6>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a35      	ldr	r2, [pc, #212]	; (80070f8 <UART_SetConfig+0x2dc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d12a      	bne.n	800707c <UART_SetConfig+0x260>
 8007026:	4b30      	ldr	r3, [pc, #192]	; (80070e8 <UART_SetConfig+0x2cc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007034:	d01a      	beq.n	800706c <UART_SetConfig+0x250>
 8007036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800703a:	d81b      	bhi.n	8007074 <UART_SetConfig+0x258>
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d00c      	beq.n	800705c <UART_SetConfig+0x240>
 8007042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007046:	d815      	bhi.n	8007074 <UART_SetConfig+0x258>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <UART_SetConfig+0x238>
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d008      	beq.n	8007064 <UART_SetConfig+0x248>
 8007052:	e00f      	b.n	8007074 <UART_SetConfig+0x258>
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e052      	b.n	8007102 <UART_SetConfig+0x2e6>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e04e      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706a:	e04a      	b.n	8007102 <UART_SetConfig+0x2e6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007072:	e046      	b.n	8007102 <UART_SetConfig+0x2e6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707a:	e042      	b.n	8007102 <UART_SetConfig+0x2e6>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <UART_SetConfig+0x2c4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d13a      	bne.n	80070fc <UART_SetConfig+0x2e0>
 8007086:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <UART_SetConfig+0x2cc>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007094:	d01a      	beq.n	80070cc <UART_SetConfig+0x2b0>
 8007096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800709a:	d81b      	bhi.n	80070d4 <UART_SetConfig+0x2b8>
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a0:	d00c      	beq.n	80070bc <UART_SetConfig+0x2a0>
 80070a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a6:	d815      	bhi.n	80070d4 <UART_SetConfig+0x2b8>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <UART_SetConfig+0x298>
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d008      	beq.n	80070c4 <UART_SetConfig+0x2a8>
 80070b2:	e00f      	b.n	80070d4 <UART_SetConfig+0x2b8>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ba:	e022      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e01e      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ca:	e01a      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e016      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e012      	b.n	8007102 <UART_SetConfig+0x2e6>
 80070dc:	efff69f3 	.word	0xefff69f3
 80070e0:	40008000 	.word	0x40008000
 80070e4:	40013800 	.word	0x40013800
 80070e8:	40021000 	.word	0x40021000
 80070ec:	40004400 	.word	0x40004400
 80070f0:	40004800 	.word	0x40004800
 80070f4:	40004c00 	.word	0x40004c00
 80070f8:	40005000 	.word	0x40005000
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a9f      	ldr	r2, [pc, #636]	; (8007384 <UART_SetConfig+0x568>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d17a      	bne.n	8007202 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800710c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007110:	2b08      	cmp	r3, #8
 8007112:	d824      	bhi.n	800715e <UART_SetConfig+0x342>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x300>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007141 	.word	0x08007141
 8007120:	0800715f 	.word	0x0800715f
 8007124:	08007149 	.word	0x08007149
 8007128:	0800715f 	.word	0x0800715f
 800712c:	0800714f 	.word	0x0800714f
 8007130:	0800715f 	.word	0x0800715f
 8007134:	0800715f 	.word	0x0800715f
 8007138:	0800715f 	.word	0x0800715f
 800713c:	08007157 	.word	0x08007157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fe fc00 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8007144:	61f8      	str	r0, [r7, #28]
        break;
 8007146:	e010      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007148:	4b8f      	ldr	r3, [pc, #572]	; (8007388 <UART_SetConfig+0x56c>)
 800714a:	61fb      	str	r3, [r7, #28]
        break;
 800714c:	e00d      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800714e:	f7fe fb61 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8007152:	61f8      	str	r0, [r7, #28]
        break;
 8007154:	e009      	b.n	800716a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800715a:	61fb      	str	r3, [r7, #28]
        break;
 800715c:	e005      	b.n	800716a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007168:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80fb 	beq.w	8007368 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	429a      	cmp	r2, r3
 8007180:	d305      	bcc.n	800718e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	429a      	cmp	r2, r3
 800718c:	d903      	bls.n	8007196 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007194:	e0e8      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2200      	movs	r2, #0
 800719a:	461c      	mov	r4, r3
 800719c:	4615      	mov	r5, r2
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	022b      	lsls	r3, r5, #8
 80071a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071ac:	0222      	lsls	r2, r4, #8
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6849      	ldr	r1, [r1, #4]
 80071b2:	0849      	lsrs	r1, r1, #1
 80071b4:	2000      	movs	r0, #0
 80071b6:	4688      	mov	r8, r1
 80071b8:	4681      	mov	r9, r0
 80071ba:	eb12 0a08 	adds.w	sl, r2, r8
 80071be:	eb43 0b09 	adc.w	fp, r3, r9
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 f854 	bl	8000280 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071e6:	d308      	bcc.n	80071fa <UART_SetConfig+0x3de>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ee:	d204      	bcs.n	80071fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	e0b6      	b.n	8007368 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007200:	e0b2      	b.n	8007368 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720a:	d15e      	bne.n	80072ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800720c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007210:	2b08      	cmp	r3, #8
 8007212:	d828      	bhi.n	8007266 <UART_SetConfig+0x44a>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <UART_SetConfig+0x400>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	08007267 	.word	0x08007267
 800722c:	08007257 	.word	0x08007257
 8007230:	08007267 	.word	0x08007267
 8007234:	08007267 	.word	0x08007267
 8007238:	08007267 	.word	0x08007267
 800723c:	0800725f 	.word	0x0800725f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007240:	f7fe fb80 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8007244:	61f8      	str	r0, [r7, #28]
        break;
 8007246:	e014      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007248:	f7fe fb92 	bl	8005970 <HAL_RCC_GetPCLK2Freq>
 800724c:	61f8      	str	r0, [r7, #28]
        break;
 800724e:	e010      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007250:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <UART_SetConfig+0x56c>)
 8007252:	61fb      	str	r3, [r7, #28]
        break;
 8007254:	e00d      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007256:	f7fe fadd 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 800725a:	61f8      	str	r0, [r7, #28]
        break;
 800725c:	e009      	b.n	8007272 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800725e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007262:	61fb      	str	r3, [r7, #28]
        break;
 8007264:	e005      	b.n	8007272 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d077      	beq.n	8007368 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	005a      	lsls	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	441a      	add	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d916      	bls.n	80072c2 <UART_SetConfig+0x4a6>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729a:	d212      	bcs.n	80072c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f023 030f 	bic.w	r3, r3, #15
 80072a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	8afb      	ldrh	r3, [r7, #22]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	8afa      	ldrh	r2, [r7, #22]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e052      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072c8:	e04e      	b.n	8007368 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d827      	bhi.n	8007322 <UART_SetConfig+0x506>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x4bc>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	08007305 	.word	0x08007305
 80072e0:	0800730d 	.word	0x0800730d
 80072e4:	08007323 	.word	0x08007323
 80072e8:	08007313 	.word	0x08007313
 80072ec:	08007323 	.word	0x08007323
 80072f0:	08007323 	.word	0x08007323
 80072f4:	08007323 	.word	0x08007323
 80072f8:	0800731b 	.word	0x0800731b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072fc:	f7fe fb22 	bl	8005944 <HAL_RCC_GetPCLK1Freq>
 8007300:	61f8      	str	r0, [r7, #28]
        break;
 8007302:	e014      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007304:	f7fe fb34 	bl	8005970 <HAL_RCC_GetPCLK2Freq>
 8007308:	61f8      	str	r0, [r7, #28]
        break;
 800730a:	e010      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <UART_SetConfig+0x56c>)
 800730e:	61fb      	str	r3, [r7, #28]
        break;
 8007310:	e00d      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fe fa7f 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8007316:	61f8      	str	r0, [r7, #28]
        break;
 8007318:	e009      	b.n	800732e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	61fb      	str	r3, [r7, #28]
        break;
 8007320:	e005      	b.n	800732e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800732c:	bf00      	nop
    }

    if (pclk != 0U)
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	085a      	lsrs	r2, r3, #1
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d909      	bls.n	8007362 <UART_SetConfig+0x546>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d205      	bcs.n	8007362 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	e002      	b.n	8007368 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007378:	4618      	mov	r0, r3
 800737a:	3728      	adds	r7, #40	; 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007382:	bf00      	nop
 8007384:	40008000 	.word	0x40008000
 8007388:	00f42400 	.word	0x00f42400

0800738c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748a:	d10a      	bne.n	80074a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]
  }
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e0:	f7fb f970 	bl	80027c4 <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10e      	bne.n	8007512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f82d 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e023      	b.n	800755a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d10e      	bne.n	800753e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f817 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00d      	b.n	800755a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b09c      	sub	sp, #112	; 0x70
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007572:	e0a5      	b.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	f000 80a1 	beq.w	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7fb f921 	bl	80027c4 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <UART_WaitOnFlagUntilTimeout+0x32>
 800758e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007590:	2b00      	cmp	r3, #0
 8007592:	d13e      	bne.n	8007612 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a8:	667b      	str	r3, [r7, #100]	; 0x64
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	663b      	str	r3, [r7, #96]	; 0x60
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80075e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e067      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d04f      	beq.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762e:	d147      	bne.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007638:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800764e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
 800765a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	66bb      	str	r3, [r7, #104]	; 0x68
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800768c:	623a      	str	r2, [r7, #32]
 800768e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2220      	movs	r2, #32
 80076aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e010      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69da      	ldr	r2, [r3, #28]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4013      	ands	r3, r2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	429a      	cmp	r2, r3
 80076dc:	f43f af4a 	beq.w	8007574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3770      	adds	r7, #112	; 0x70
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08c      	sub	sp, #48	; 0x30
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4603      	mov	r3, r0
 80076f4:	71fb      	strb	r3, [r7, #7]
 80076f6:	460b      	mov	r3, r1
 80076f8:	71bb      	strb	r3, [r7, #6]
 80076fa:	4613      	mov	r3, r2
 80076fc:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007702:	79bb      	ldrb	r3, [r7, #6]
 8007704:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007706:	797b      	ldrb	r3, [r7, #5]
 8007708:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	2207      	movs	r2, #7
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fb56 	bl	8008dc4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007718:	f107 0318 	add.w	r3, r7, #24
 800771c:	2218      	movs	r2, #24
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f001 fb4f 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007726:	233f      	movs	r3, #63	; 0x3f
 8007728:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800772a:	238a      	movs	r3, #138	; 0x8a
 800772c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007734:	2303      	movs	r3, #3
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800773e:	2307      	movs	r3, #7
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007742:	f107 0318 	add.w	r3, r7, #24
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f857 	bl	80087fc <hci_send_req>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	da01      	bge.n	8007758 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007754:	23ff      	movs	r3, #255	; 0xff
 8007756:	e014      	b.n	8007782 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007758:	7b3b      	ldrb	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800775e:	7b3b      	ldrb	r3, [r7, #12]
 8007760:	e00f      	b.n	8007782 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007762:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007766:	b29a      	uxth	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800776c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007770:	b29a      	uxth	r2, r3
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007776:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800777a:	b29a      	uxth	r2, r3
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3730      	adds	r7, #48	; 0x30
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800778a:	b590      	push	{r4, r7, lr}
 800778c:	b095      	sub	sp, #84	; 0x54
 800778e:	af00      	add	r7, sp, #0
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	461a      	mov	r2, r3
 8007798:	4623      	mov	r3, r4
 800779a:	71fb      	strb	r3, [r7, #7]
 800779c:	4603      	mov	r3, r0
 800779e:	80bb      	strh	r3, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
 80077a4:	4613      	mov	r3, r2
 80077a6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80077ae:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80077b2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80077b6:	4413      	add	r3, r2
 80077b8:	330e      	adds	r3, #14
 80077ba:	2b28      	cmp	r3, #40	; 0x28
 80077bc:	d901      	bls.n	80077c2 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80077be:	2342      	movs	r3, #66	; 0x42
 80077c0:	e0c9      	b.n	8007956 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80077c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077c6:	3350      	adds	r3, #80	; 0x50
 80077c8:	443b      	add	r3, r7
 80077ca:	79fa      	ldrb	r2, [r7, #7]
 80077cc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80077d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077d4:	3301      	adds	r3, #1
 80077d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80077da:	88bb      	ldrh	r3, [r7, #4]
 80077dc:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80077de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077e2:	f107 0208 	add.w	r2, r7, #8
 80077e6:	4413      	add	r3, r2
 80077e8:	88ba      	ldrh	r2, [r7, #4]
 80077ea:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80077ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077f0:	3302      	adds	r3, #2
 80077f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80077f6:	887b      	ldrh	r3, [r7, #2]
 80077f8:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80077fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077fe:	f107 0208 	add.w	r2, r7, #8
 8007802:	4413      	add	r3, r2
 8007804:	887a      	ldrh	r2, [r7, #2]
 8007806:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007808:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800780c:	3302      	adds	r3, #2
 800780e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8007812:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007816:	3350      	adds	r3, #80	; 0x50
 8007818:	443b      	add	r3, r7
 800781a:	79ba      	ldrb	r2, [r7, #6]
 800781c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007824:	3301      	adds	r3, #1
 8007826:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800782a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800782e:	3350      	adds	r3, #80	; 0x50
 8007830:	443b      	add	r3, r7
 8007832:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007836:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800783a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800783e:	3301      	adds	r3, #1
 8007840:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8007844:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007848:	3350      	adds	r3, #80	; 0x50
 800784a:	443b      	add	r3, r7
 800784c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007850:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007858:	3301      	adds	r3, #1
 800785a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800785e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007862:	f107 0208 	add.w	r2, r7, #8
 8007866:	4413      	add	r3, r2
 8007868:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800786c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fa9a 	bl	8008da8 <memcpy>
  indx +=  LocalNameLen;
 8007874:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007878:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800787c:	4413      	add	r3, r2
 800787e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8007882:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007886:	3350      	adds	r3, #80	; 0x50
 8007888:	443b      	add	r3, r7
 800788a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800788e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007892:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007896:	3301      	adds	r3, #1
 8007898:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800789c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078a0:	f107 0208 	add.w	r2, r7, #8
 80078a4:	4413      	add	r3, r2
 80078a6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80078aa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fa7b 	bl	8008da8 <memcpy>
  indx +=  ServiceUUIDLen;  
 80078b2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80078b6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80078ba:	4413      	add	r3, r2
 80078bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80078c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80078c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80078c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078cc:	f107 0208 	add.w	r2, r7, #8
 80078d0:	4413      	add	r3, r2
 80078d2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80078d6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80078d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078dc:	3302      	adds	r3, #2
 80078de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80078e2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80078e6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80078ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078ee:	f107 0208 	add.w	r2, r7, #8
 80078f2:	4413      	add	r3, r2
 80078f4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80078f8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80078fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078fe:	3302      	adds	r3, #2
 8007900:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007908:	2218      	movs	r2, #24
 800790a:	2100      	movs	r1, #0
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fa59 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007912:	233f      	movs	r3, #63	; 0x3f
 8007914:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8007916:	2383      	movs	r3, #131	; 0x83
 8007918:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8007920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007924:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8007926:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800792a:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800792c:	2301      	movs	r3, #1
 800792e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8007930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f000 ff60 	bl	80087fc <hci_send_req>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	da01      	bge.n	8007946 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8007942:	23ff      	movs	r3, #255	; 0xff
 8007944:	e007      	b.n	8007956 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8007946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <aci_gap_set_discoverable+0x1ca>
    return status;
 800794e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007952:	e000      	b.n	8007956 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3754      	adds	r7, #84	; 0x54
 800795a:	46bd      	mov	sp, r7
 800795c:	bd90      	pop	{r4, r7, pc}

0800795e <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08a      	sub	sp, #40	; 0x28
 8007962:	af00      	add	r7, sp, #0
 8007964:	4603      	mov	r3, r0
 8007966:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	733b      	strb	r3, [r7, #12]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800796c:	f107 0310 	add.w	r3, r7, #16
 8007970:	2218      	movs	r2, #24
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fa25 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800797a:	233f      	movs	r3, #63	; 0x3f
 800797c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
 800797e:	2385      	movs	r3, #133	; 0x85
 8007980:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8007982:	f107 030c 	add.w	r3, r7, #12
 8007986:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 8007988:	2301      	movs	r3, #1
 800798a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800798c:	f107 030f 	add.w	r3, r7, #15
 8007990:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
    
  if (hci_send_req(&rq, FALSE) < 0)
 8007996:	f107 0310 	add.w	r3, r7, #16
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f000 ff2d 	bl	80087fc <hci_send_req>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da01      	bge.n	80079ac <aci_gap_set_io_capability+0x4e>
    return BLE_STATUS_TIMEOUT;
 80079a8:	23ff      	movs	r3, #255	; 0xff
 80079aa:	e000      	b.n	80079ae <aci_gap_set_io_capability+0x50>
    
  return status;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3728      	adds	r7, #40	; 0x28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80079b6:	b590      	push	{r4, r7, lr}
 80079b8:	b091      	sub	sp, #68	; 0x44
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	603a      	str	r2, [r7, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	4603      	mov	r3, r0
 80079c2:	71fb      	strb	r3, [r7, #7]
 80079c4:	460b      	mov	r3, r1
 80079c6:	71bb      	strb	r3, [r7, #6]
 80079c8:	4613      	mov	r3, r2
 80079ca:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80079d0:	79bb      	ldrb	r3, [r7, #6]
 80079d2:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80079d4:	79bb      	ldrb	r3, [r7, #6]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	f107 030e 	add.w	r3, r7, #14
 80079e0:	6814      	ldr	r4, [r2, #0]
 80079e2:	6850      	ldr	r0, [r2, #4]
 80079e4:	6891      	ldr	r1, [r2, #8]
 80079e6:	68d2      	ldr	r2, [r2, #12]
 80079e8:	601c      	str	r4, [r3, #0]
 80079ea:	6058      	str	r0, [r3, #4]
 80079ec:	6099      	str	r1, [r3, #8]
 80079ee:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80079f0:	797b      	ldrb	r3, [r7, #5]
 80079f2:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80079f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80079f8:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80079fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80079fe:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8007a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a04:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8007a08:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8007a0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a14:	2218      	movs	r2, #24
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f9d3 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a1e:	233f      	movs	r3, #63	; 0x3f
 8007a20:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8007a22:	2386      	movs	r3, #134	; 0x86
 8007a24:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8007a2c:	231a      	movs	r3, #26
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8007a30:	f107 030b 	add.w	r3, r7, #11
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8007a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a3e:	2100      	movs	r1, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fedb 	bl	80087fc <hci_send_req>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da01      	bge.n	8007a50 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8007a4c:	23ff      	movs	r3, #255	; 0xff
 8007a4e:	e005      	b.n	8007a5c <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <aci_gap_set_auth_requirement+0xa4>
    return status;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	e000      	b.n	8007a5c <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3744      	adds	r7, #68	; 0x44
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}

08007a64 <aci_gap_slave_security_request>:
  
  return status;
}

tBleStatus aci_gap_slave_security_request(uint16_t conn_handle, uint8_t bonding, uint8_t mitm_protection)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	80fb      	strh	r3, [r7, #6]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	717b      	strb	r3, [r7, #5]
 8007a72:	4613      	mov	r3, r2
 8007a74:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gap_slave_security_request_cp cp;
  uint8_t status;

  cp.conn_handle = htobs(conn_handle);
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	81bb      	strh	r3, [r7, #12]
  cp.bonding = bonding;
 8007a7a:	797b      	ldrb	r3, [r7, #5]
 8007a7c:	73bb      	strb	r3, [r7, #14]
  cp.mitm_protection = mitm_protection;
 8007a7e:	793b      	ldrb	r3, [r7, #4]
 8007a80:	73fb      	strb	r3, [r7, #15]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a82:	f107 0310 	add.w	r3, r7, #16
 8007a86:	2218      	movs	r2, #24
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f99a 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a90:	233f      	movs	r3, #63	; 0x3f
 8007a92:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_GAP_SLAVE_SECURITY_REQUEST;
 8007a94:	238d      	movs	r3, #141	; 0x8d
 8007a96:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8007a98:	f107 030c 	add.w	r3, r7, #12
 8007a9c:	61bb      	str	r3, [r7, #24]
  rq.clen = sizeof(cp);
 8007a9e:	2304      	movs	r3, #4
 8007aa0:	61fb      	str	r3, [r7, #28]
  rq.event = EVT_CMD_STATUS;
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	617b      	str	r3, [r7, #20]
  rq.rparam = &status;
 8007aa6:	f107 030b 	add.w	r3, r7, #11
 8007aaa:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8007aac:	2301      	movs	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fea0 	bl	80087fc <hci_send_req>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da01      	bge.n	8007ac6 <aci_gap_slave_security_request+0x62>
    return BLE_STATUS_TIMEOUT;
 8007ac2:	23ff      	movs	r3, #255	; 0xff
 8007ac4:	e000      	b.n	8007ac8 <aci_gap_slave_security_request+0x64>

  return status;
 8007ac6:	7afb      	ldrb	r3, [r7, #11]

}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3728      	adds	r7, #40	; 0x28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007ad6:	f107 0308 	add.w	r3, r7, #8
 8007ada:	2218      	movs	r2, #24
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f970 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007ae4:	233f      	movs	r3, #63	; 0x3f
 8007ae6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8007ae8:	f240 1301 	movw	r3, #257	; 0x101
 8007aec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007af2:	2301      	movs	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8007af6:	f107 0308 	add.w	r3, r7, #8
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fe7d 	bl	80087fc <hci_send_req>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	da01      	bge.n	8007b0c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8007b08:	23ff      	movs	r3, #255	; 0xff
 8007b0a:	e000      	b.n	8007b0e <aci_gatt_init+0x3e>

  return status;
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b090      	sub	sp, #64	; 0x40
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
 8007b26:	460b      	mov	r3, r1
 8007b28:	71bb      	strb	r3, [r7, #6]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8007b34:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b38:	3340      	adds	r3, #64	; 0x40
 8007b3a:	443b      	add	r3, r7
 8007b3c:	79fa      	ldrb	r2, [r7, #7]
 8007b3e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007b42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b46:	3301      	adds	r3, #1
 8007b48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d103      	bne.n	8007b5a <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8007b52:	2302      	movs	r3, #2
 8007b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007b58:	e002      	b.n	8007b60 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8007b5a:	2310      	movs	r3, #16
 8007b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8007b60:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b64:	f107 020c 	add.w	r2, r7, #12
 8007b68:	4413      	add	r3, r2
 8007b6a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f919 	bl	8008da8 <memcpy>
  indx +=  uuid_len;
 8007b76:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007b7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b7e:	4413      	add	r3, r2
 8007b80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8007b84:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b88:	3340      	adds	r3, #64	; 0x40
 8007b8a:	443b      	add	r3, r7
 8007b8c:	79ba      	ldrb	r2, [r7, #6]
 8007b8e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007b92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007b96:	3301      	adds	r3, #1
 8007b98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8007b9c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007ba0:	3340      	adds	r3, #64	; 0x40
 8007ba2:	443b      	add	r3, r7
 8007ba4:	797a      	ldrb	r2, [r7, #5]
 8007ba6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8007baa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007bae:	3301      	adds	r3, #1
 8007bb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007bb4:	f107 0320 	add.w	r3, r7, #32
 8007bb8:	2203      	movs	r2, #3
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f901 	bl	8008dc4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bc6:	2218      	movs	r2, #24
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 f8fa 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007bd0:	233f      	movs	r3, #63	; 0x3f
 8007bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8007bd4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007bd8:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8007bda:	f107 030c 	add.w	r3, r7, #12
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8007be0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8007be6:	f107 0320 	add.w	r3, r7, #32
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8007bec:	2303      	movs	r3, #3
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8007bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fe00 	bl	80087fc <hci_send_req>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da01      	bge.n	8007c06 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8007c02:	23ff      	movs	r3, #255	; 0xff
 8007c04:	e00c      	b.n	8007c20 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8007c06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8007c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c12:	e005      	b.n	8007c20 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8007c14:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	801a      	strh	r2, [r3, #0]

  return 0;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3740      	adds	r7, #64	; 0x40
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b092      	sub	sp, #72	; 0x48
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	603a      	str	r2, [r7, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	80fb      	strh	r3, [r7, #6]
 8007c36:	460b      	mov	r3, r1
 8007c38:	717b      	strb	r3, [r7, #5]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8007c48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c4c:	f107 020c 	add.w	r2, r7, #12
 8007c50:	4413      	add	r3, r2
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007c56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8007c60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c64:	3348      	adds	r3, #72	; 0x48
 8007c66:	443b      	add	r3, r7
 8007c68:	797a      	ldrb	r2, [r7, #5]
 8007c6a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007c6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c72:	3301      	adds	r3, #1
 8007c74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8007c78:	797b      	ldrb	r3, [r7, #5]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d103      	bne.n	8007c86 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c84:	e002      	b.n	8007c8c <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8007c86:	2310      	movs	r3, #16
 8007c88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8007c8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c90:	f107 020c 	add.w	r2, r7, #12
 8007c94:	4413      	add	r3, r2
 8007c96:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f883 	bl	8008da8 <memcpy>
  indx +=  uuid_len;
 8007ca2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007ca6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007caa:	4413      	add	r3, r2
 8007cac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8007cb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cb4:	3348      	adds	r3, #72	; 0x48
 8007cb6:	443b      	add	r3, r7
 8007cb8:	793a      	ldrb	r2, [r7, #4]
 8007cba:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8007cc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ccc:	3348      	adds	r3, #72	; 0x48
 8007cce:	443b      	add	r3, r7
 8007cd0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007cd4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8007ce2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ce6:	3348      	adds	r3, #72	; 0x48
 8007ce8:	443b      	add	r3, r7
 8007cea:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8007cee:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007cf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8007cfc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d00:	3348      	adds	r3, #72	; 0x48
 8007d02:	443b      	add	r3, r7
 8007d04:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8007d08:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007d0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d10:	3301      	adds	r3, #1
 8007d12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8007d16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d1a:	3348      	adds	r3, #72	; 0x48
 8007d1c:	443b      	add	r3, r7
 8007d1e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8007d22:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007d26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8007d30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d34:	3348      	adds	r3, #72	; 0x48
 8007d36:	443b      	add	r3, r7
 8007d38:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007d3c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8007d40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d44:	3301      	adds	r3, #1
 8007d46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d4e:	2203      	movs	r2, #3
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 f836 	bl	8008dc4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d5c:	2218      	movs	r2, #24
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f82f 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007d66:	233f      	movs	r3, #63	; 0x3f
 8007d68:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8007d6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007d6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8007d76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8007d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8007d82:	2303      	movs	r3, #3
 8007d84:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8007d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fd35 	bl	80087fc <hci_send_req>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	da01      	bge.n	8007d9c <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8007d98:	23ff      	movs	r3, #255	; 0xff
 8007d9a:	e00c      	b.n	8007db6 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8007d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <aci_gatt_add_char+0x182>
    return resp.status;
 8007da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007da8:	e005      	b.n	8007db6 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8007daa:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db2:	801a      	strh	r2, [r3, #0]

  return 0;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3748      	adds	r7, #72	; 0x48
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <aci_gatt_add_char_desc>:
                                  uint8_t accPermissions,
                                  uint8_t gattEvtMask,
                                  uint8_t encryKeySize,
                                  uint8_t isVariable,
                                  uint16_t* descHandle)                     
{
 8007dbe:	b590      	push	{r4, r7, lr}
 8007dc0:	b0cd      	sub	sp, #308	; 0x134
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007ddc:	4622      	mov	r2, r4
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007de8:	4602      	mov	r2, r0
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007df4:	460a      	mov	r2, r1
 8007df6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gatt_add_char_desc_rp resp;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  serviceHandle = htobs(serviceHandle);
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007e06:	881a      	ldrh	r2, [r3, #0]
 8007e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0c:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8007e10:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8007e12:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e16:	f107 0210 	add.w	r2, r7, #16
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e20:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8007e24:	8812      	ldrh	r2, [r2, #0]
 8007e26:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007e28:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  charHandle = htobs(charHandle);
 8007e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e36:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e3a:	881a      	ldrh	r2, [r3, #0]
 8007e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e44:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8007e46:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e4a:	f107 0210 	add.w	r2, r7, #16
 8007e4e:	4413      	add	r3, r2
 8007e50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e54:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8007e58:	8812      	ldrh	r2, [r2, #0]
 8007e5a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007e5c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e60:	3302      	adds	r3, #2
 8007e62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descUuidType;
 8007e66:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e6e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007e72:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8007e76:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 8007e7a:	7809      	ldrb	r1, [r1, #0]
 8007e7c:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007e7e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007e82:	3301      	adds	r3, #1
 8007e84:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  if(descUuidType == UUID_TYPE_16){
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d103      	bne.n	8007e9e <aci_gatt_add_char_desc+0xe0>
    uuid_len = 2;
 8007e96:	2302      	movs	r3, #2
 8007e98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8007e9c:	e002      	b.n	8007ea4 <aci_gatt_add_char_desc+0xe6>
  }
  else {
    uuid_len = 16;
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  }        
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 8007ea4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007ea8:	f107 0210 	add.w	r2, r7, #16
 8007eac:	18d0      	adds	r0, r2, r3
 8007eae:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eba:	6819      	ldr	r1, [r3, #0]
 8007ebc:	f000 ff74 	bl	8008da8 <memcpy>
  indx +=  uuid_len;
 8007ec0:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8007ec4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007ec8:	4413      	add	r3, r2
 8007eca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descValueMaxLen;
 8007ece:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007ed2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ed6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007eda:	f897 1140 	ldrb.w	r1, [r7, #320]	; 0x140
 8007ede:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007ee0:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = descValueLen;
 8007eea:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ef2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007ef6:	f897 1144 	ldrb.w	r1, [r7, #324]	; 0x144
 8007efa:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007efc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f00:	3301      	adds	r3, #1
 8007f02:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 8007f06:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007f0a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f0e:	4413      	add	r3, r2
 8007f10:	2bfb      	cmp	r3, #251	; 0xfb
 8007f12:	dd01      	ble.n	8007f18 <aci_gatt_add_char_desc+0x15a>
    return BLE_STATUS_INVALID_PARAMS;
 8007f14:	2342      	movs	r3, #66	; 0x42
 8007f16:	e095      	b.n	8008044 <aci_gatt_add_char_desc+0x286>
  
  BLUENRG_memcpy(buffer + indx, descValue, descValueLen);
 8007f18:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f1c:	f107 0210 	add.w	r2, r7, #16
 8007f20:	4413      	add	r3, r2
 8007f22:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007f26:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 ff3c 	bl	8008da8 <memcpy>
  indx += descValueLen;
 8007f30:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8007f34:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8007f38:	4413      	add	r3, r2
 8007f3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = secPermissions;
 8007f3e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f46:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f4a:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
 8007f4e:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f50:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f54:	3301      	adds	r3, #1
 8007f56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = accPermissions;
 8007f5a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f62:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f66:	f897 1150 	ldrb.w	r1, [r7, #336]	; 0x150
 8007f6a:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f6c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f70:	3301      	adds	r3, #1
 8007f72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = gattEvtMask;
 8007f76:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f7e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f82:	f897 1154 	ldrb.w	r1, [r7, #340]	; 0x154
 8007f86:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007f88:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = encryKeySize;
 8007f92:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f9a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007f9e:	f897 1158 	ldrb.w	r1, [r7, #344]	; 0x158
 8007fa2:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007fa4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  buffer[indx] = isVariable;
 8007fae:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fb6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007fba:	f897 115c 	ldrb.w	r1, [r7, #348]	; 0x15c
 8007fbe:	54d1      	strb	r1, [r2, r3]
  indx++;
 8007fc0:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fce:	2203      	movs	r2, #3
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fef6 	bl	8008dc4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007fd8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007fdc:	2218      	movs	r2, #24
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 feef 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007fe6:	233f      	movs	r3, #63	; 0x3f
 8007fe8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  rq.ocf = OCF_GATT_ADD_CHAR_DESC;
 8007fec:	f240 1305 	movw	r3, #261	; 0x105
 8007ff0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  rq.cparam = (void *)buffer;
 8007ff4:	f107 0310 	add.w	r3, r7, #16
 8007ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.clen = indx;
 8007ffc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8008000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rparam = &resp;
 8008004:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008008:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 800800c:	2303      	movs	r3, #3
 800800e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  if (hci_send_req(&rq, FALSE) < 0)
 8008012:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fbef 	bl	80087fc <hci_send_req>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	da01      	bge.n	8008028 <aci_gatt_add_char_desc+0x26a>
    return BLE_STATUS_TIMEOUT;
 8008024:	23ff      	movs	r3, #255	; 0xff
 8008026:	e00d      	b.n	8008044 <aci_gatt_add_char_desc+0x286>

  if (resp.status) {
 8008028:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <aci_gatt_add_char_desc+0x278>
    return resp.status;
 8008030:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8008034:	e006      	b.n	8008044 <aci_gatt_add_char_desc+0x286>
  }
    
  *descHandle = btohs(resp.handle);
 8008036:	f8b7 3111 	ldrh.w	r3, [r7, #273]	; 0x111
 800803a:	b29a      	uxth	r2, r3
 800803c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008040:	801a      	strh	r2, [r3, #0]

  return 0;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800804a:	46bd      	mov	sp, r7
 800804c:	bd90      	pop	{r4, r7, pc}

0800804e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800804e:	b5b0      	push	{r4, r5, r7, lr}
 8008050:	b0ca      	sub	sp, #296	; 0x128
 8008052:	af00      	add	r7, sp, #0
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	4610      	mov	r0, r2
 800805a:	4619      	mov	r1, r3
 800805c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008060:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8008064:	462a      	mov	r2, r5
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800806c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008070:	4622      	mov	r2, r4
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008078:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800807c:	4602      	mov	r2, r0
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008084:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008088:	460a      	mov	r2, r1
 800808a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008092:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008096:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2bfa      	cmp	r3, #250	; 0xfa
 800809e:	d901      	bls.n	80080a4 <aci_gatt_update_char_value+0x56>
    return BLE_STATUS_INVALID_PARAMS;
 80080a0:	2342      	movs	r3, #66	; 0x42
 80080a2:	e09e      	b.n	80081e2 <aci_gatt_update_char_value+0x194>

  servHandle = htobs(servHandle);
 80080a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080a8:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080b2:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80080b6:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	f107 0208 	add.w	r2, r7, #8
 80080c0:	4413      	add	r3, r2
 80080c2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80080c6:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 80080ca:	8812      	ldrh	r2, [r2, #0]
 80080cc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d2:	3302      	adds	r3, #2
 80080d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  charHandle = htobs(charHandle);
 80080d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080e0:	881a      	ldrh	r2, [r3, #0]
 80080e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80080e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080ea:	801a      	strh	r2, [r3, #0]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80080ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f0:	f107 0208 	add.w	r2, r7, #8
 80080f4:	4413      	add	r3, r2
 80080f6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80080fa:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80080fe:	8812      	ldrh	r2, [r2, #0]
 8008100:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008106:	3302      	adds	r3, #2
 8008108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValOffset;
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008110:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008114:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008118:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800811c:	f2a1 1125 	subw	r1, r1, #293	; 0x125
 8008120:	7809      	ldrb	r1, [r1, #0]
 8008122:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008128:	3301      	adds	r3, #1
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = charValueLen;
 800812e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008132:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008136:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800813a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800813e:	f5a1 7193 	sub.w	r1, r1, #294	; 0x126
 8008142:	7809      	ldrb	r1, [r1, #0]
 8008144:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800814a:	3301      	adds	r3, #1
 800814c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008154:	f107 0208 	add.w	r2, r7, #8
 8008158:	18d0      	adds	r0, r2, r3
 800815a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800815e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800816a:	f000 fe1d 	bl	8008da8 <memcpy>
  indx +=  charValueLen;
 800816e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008172:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008176:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4413      	add	r3, r2
 800817e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008182:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008186:	2218      	movs	r2, #24
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fe1a 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008190:	233f      	movs	r3, #63	; 0x3f
 8008192:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008196:	f44f 7383 	mov.w	r3, #262	; 0x106
 800819a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 80081a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 80081ae:	f207 130b 	addw	r3, r7, #267	; 0x10b
 80081b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 80081bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fb1a 	bl	80087fc <hci_send_req>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da01      	bge.n	80081d2 <aci_gatt_update_char_value+0x184>
    return BLE_STATUS_TIMEOUT;
 80081ce:	23ff      	movs	r3, #255	; 0xff
 80081d0:	e007      	b.n	80081e2 <aci_gatt_update_char_value+0x194>

  if (status) {
 80081d2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <aci_gatt_update_char_value+0x192>
    return status;
 80081da:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80081de:	e000      	b.n	80081e2 <aci_gatt_update_char_value+0x194>
  }

  return 0;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bdb0      	pop	{r4, r5, r7, pc}

080081ec <aci_gatt_update_char_value_ext_IDB05A1>:

tBleStatus aci_gatt_update_char_value_ext_IDB05A1(uint16_t service_handle, uint16_t char_handle,
                                                  uint8_t update_type, uint16_t char_length,
                                                  uint16_t value_offset, uint8_t value_length,
                                                  const uint8_t* value)
{
 80081ec:	b5b0      	push	{r4, r5, r7, lr}
 80081ee:	b0ca      	sub	sp, #296	; 0x128
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4605      	mov	r5, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081fe:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8008202:	462a      	mov	r2, r5
 8008204:	801a      	strh	r2, [r3, #0]
 8008206:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800820a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800820e:	4622      	mov	r2, r4
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008216:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800821a:	4602      	mov	r2, r0
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008222:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008226:	460a      	mov	r2, r1
 8008228:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  gatt_upd_char_val_ext_cp cp;
  
  if(value_length > sizeof(cp.value))
 800822a:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800822e:	2bf6      	cmp	r3, #246	; 0xf6
 8008230:	d901      	bls.n	8008236 <aci_gatt_update_char_value_ext_IDB05A1+0x4a>
    return BLE_STATUS_INVALID_PARAMS;
 8008232:	2342      	movs	r3, #66	; 0x42
 8008234:	e06c      	b.n	8008310 <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  cp.service_handle = htobs(service_handle);
 8008236:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800823a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800823e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008242:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 8008246:	8812      	ldrh	r2, [r2, #0]
 8008248:	801a      	strh	r2, [r3, #0]
  cp.char_handle = htobs(char_handle);
 800824a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800824e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008252:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008256:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800825a:	8812      	ldrh	r2, [r2, #0]
 800825c:	805a      	strh	r2, [r3, #2]
  cp.update_type = update_type;
 800825e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008262:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008266:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800826a:	f2a2 1225 	subw	r2, r2, #293	; 0x125
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	711a      	strb	r2, [r3, #4]
  cp.char_length = htobs(char_length);
 8008272:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008276:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800827a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800827e:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8008282:	8812      	ldrh	r2, [r2, #0]
 8008284:	f8a3 2005 	strh.w	r2, [r3, #5]
  cp.value_offset = htobs(value_offset);
 8008288:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800828c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008290:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8008294:	f8a3 2007 	strh.w	r2, [r3, #7]
  cp.value_length = value_length;
 8008298:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800829c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80082a0:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 80082a4:	725a      	strb	r2, [r3, #9]
  BLUENRG_memcpy(cp.value, value, value_length);
 80082a6:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
 80082aa:	f107 030c 	add.w	r3, r7, #12
 80082ae:	330a      	adds	r3, #10
 80082b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fd77 	bl	8008da8 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082be:	2218      	movs	r2, #24
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fd7e 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082c8:	233f      	movs	r3, #63	; 0x3f
 80082ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = OCF_GATT_UPD_CHAR_VAL_EXT;
 80082ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80082d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = &cp;
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = GATT_UPD_CHAR_VAL_EXT_CP_SIZE + value_length;
 80082de:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 80082e2:	330a      	adds	r3, #10
 80082e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082e8:	f207 130f 	addw	r3, r7, #271	; 0x10f
 80082ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  if (hci_send_req(&rq, FALSE) < 0)
 80082f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fa7d 	bl	80087fc <hci_send_req>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	da01      	bge.n	800830c <aci_gatt_update_char_value_ext_IDB05A1+0x120>
    return BLE_STATUS_TIMEOUT;
 8008308:	23ff      	movs	r3, #255	; 0xff
 800830a:	e001      	b.n	8008310 <aci_gatt_update_char_value_ext_IDB05A1+0x124>
  
  return status;
 800830c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8008310:	4618      	mov	r0, r3
 8008312:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008316:	46bd      	mov	sp, r7
 8008318:	bdb0      	pop	{r4, r5, r7, pc}

0800831a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b0ca      	sub	sp, #296	; 0x128
 800831e:	af00      	add	r7, sp, #0
 8008320:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008324:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800832e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008332:	4602      	mov	r2, r0
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800833a:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 800833e:	460a      	mov	r2, r1
 8008340:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8008348:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800834c:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2bff      	cmp	r3, #255	; 0xff
 8008354:	d101      	bne.n	800835a <aci_hal_write_config_data+0x40>
    return BLE_STATUS_INVALID_PARAMS;
 8008356:	2342      	movs	r3, #66	; 0x42
 8008358:	e065      	b.n	8008426 <aci_hal_write_config_data+0x10c>

  buffer[indx] = offset;
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800835e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008362:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008366:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800836a:	f2a1 1121 	subw	r1, r1, #289	; 0x121
 800836e:	7809      	ldrb	r1, [r1, #0]
 8008370:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008376:	3301      	adds	r3, #1
 8008378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
  buffer[indx] = len;
 800837c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008380:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008384:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008388:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800838c:	f5a1 7191 	sub.w	r1, r1, #290	; 0x122
 8008390:	7809      	ldrb	r1, [r1, #0]
 8008392:	54d1      	strb	r1, [r2, r3]
  indx++;
 8008394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008398:	3301      	adds	r3, #1
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800839e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083a2:	f107 0208 	add.w	r2, r7, #8
 80083a6:	18d0      	adds	r0, r2, r3
 80083a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80083ac:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80083b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80083ba:	6819      	ldr	r1, [r3, #0]
 80083bc:	f000 fcf4 	bl	8008da8 <memcpy>
  indx +=  len;
 80083c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80083c4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80083c8:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083d4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80083d8:	2218      	movs	r2, #24
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fcf1 	bl	8008dc4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80083e2:	233f      	movs	r3, #63	; 0x3f
 80083e4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80083e8:	230c      	movs	r3, #12
 80083ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  rq.cparam = (void *)buffer;
 80083ee:	f107 0308 	add.w	r3, r7, #8
 80083f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.clen = indx;
 80083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.rparam = &status;
 80083fe:	f207 130b 	addw	r3, r7, #267	; 0x10b
 8008402:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rlen = 1;
 8008406:	2301      	movs	r3, #1
 8008408:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  if (hci_send_req(&rq, FALSE) < 0)
 800840c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f9f2 	bl	80087fc <hci_send_req>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	da01      	bge.n	8008422 <aci_hal_write_config_data+0x108>
    return BLE_STATUS_TIMEOUT;
 800841e:	23ff      	movs	r3, #255	; 0xff
 8008420:	e001      	b.n	8008426 <aci_hal_write_config_data+0x10c>

  return status;
 8008422:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
}
 8008426:	4618      	mov	r0, r3
 8008428:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b089      	sub	sp, #36	; 0x24
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800843a:	f107 0410 	add.w	r4, r7, #16
 800843e:	f107 0215 	add.w	r2, r7, #21
 8008442:	f107 0112 	add.w	r1, r7, #18
 8008446:	f107 0016 	add.w	r0, r7, #22
 800844a:	f107 030e 	add.w	r3, r7, #14
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	4623      	mov	r3, r4
 8008452:	f000 f853 	bl	80084fc <hci_le_read_local_version>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d126      	bne.n	80084ae <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008460:	8a7b      	ldrh	r3, [r7, #18]
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	b29b      	uxth	r3, r3
 8008466:	b2da      	uxtb	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b29a      	uxth	r2, r3
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b21a      	sxth	r2, r3
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	b29b      	uxth	r3, r3
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	b21b      	sxth	r3, r3
 8008486:	b2db      	uxtb	r3, r3
 8008488:	b21b      	sxth	r3, r3
 800848a:	4313      	orrs	r3, r2
 800848c:	b21b      	sxth	r3, r3
 800848e:	b29a      	uxth	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b21a      	sxth	r2, r3
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	b21b      	sxth	r3, r3
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd90      	pop	{r4, r7, pc}

080084b8 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	2218      	movs	r2, #24
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fc7c 	bl	8008dc4 <memset>
  rq.ogf = OGF_HOST_CTL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80084d0:	2303      	movs	r3, #3
 80084d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80084d4:	1dfb      	adds	r3, r7, #7
 80084d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80084d8:	2301      	movs	r3, #1
 80084da:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f98a 	bl	80087fc <hci_send_req>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	da01      	bge.n	80084f2 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80084ee:	23ff      	movs	r3, #255	; 0xff
 80084f0:	e000      	b.n	80084f4 <hci_reset+0x3c>
  
  return status;  
 80084f2:	79fb      	ldrb	r3, [r7, #7]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	2209      	movs	r2, #9
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fc56 	bl	8008dc4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008518:	f107 0320 	add.w	r3, r7, #32
 800851c:	2218      	movs	r2, #24
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fc4f 	bl	8008dc4 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008526:	2304      	movs	r3, #4
 8008528:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800852a:	2301      	movs	r3, #1
 800852c:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800853c:	2309      	movs	r3, #9
 800853e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008540:	f107 0320 	add.w	r3, r7, #32
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f958 	bl	80087fc <hci_send_req>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	da01      	bge.n	8008556 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008552:	23ff      	movs	r3, #255	; 0xff
 8008554:	e018      	b.n	8008588 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008556:	7d3b      	ldrb	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <hci_le_read_local_version+0x64>
    return resp.status;
 800855c:	7d3b      	ldrb	r3, [r7, #20]
 800855e:	e013      	b.n	8008588 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008560:	7d7a      	ldrb	r2, [r7, #21]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008566:	8afa      	ldrh	r2, [r7, #22]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800856c:	7e3a      	ldrb	r2, [r7, #24]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008572:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008576:	b29a      	uxth	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800857c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008580:	b29a      	uxth	r2, r3
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3738      	adds	r7, #56	; 0x38
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3308      	adds	r3, #8
 800859c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d001      	beq.n	80085aa <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80085a6:	2301      	movs	r3, #1
 80085a8:	e00c      	b.n	80085c4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3302      	adds	r3, #2
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80085b8:	3b03      	subs	r3, #3
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d001      	beq.n	80085c2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80085be:	2302      	movs	r3, #2
 80085c0:	e000      	b.n	80085c4 <verify_packet+0x34>
  
  return 0;      
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80085d0:	b590      	push	{r4, r7, lr}
 80085d2:	b0c7      	sub	sp, #284	; 0x11c
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80085e0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085ea:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80085ee:	4622      	mov	r2, r4
 80085f0:	801a      	strh	r2, [r3, #0]
 80085f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085fa:	4602      	mov	r2, r0
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008602:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8008606:	460a      	mov	r2, r1
 8008608:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800860a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800860e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800861a:	b21a      	sxth	r2, r3
 800861c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008620:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	029b      	lsls	r3, r3, #10
 8008628:	b21b      	sxth	r3, r3
 800862a:	4313      	orrs	r3, r2
 800862c:	b21b      	sxth	r3, r3
 800862e:	b29a      	uxth	r2, r3
 8008630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 800863a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800863e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008642:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008646:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 800864e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008652:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800865a:	f107 0318 	add.w	r3, r7, #24
 800865e:	3301      	adds	r3, #1
 8008660:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008664:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8008668:	8811      	ldrh	r1, [r2, #0]
 800866a:	7892      	ldrb	r2, [r2, #2]
 800866c:	8019      	strh	r1, [r3, #0]
 800866e:	709a      	strb	r2, [r3, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	3304      	adds	r3, #4
 8008676:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800867a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800867e:	7812      	ldrb	r2, [r2, #0]
 8008680:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008684:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8008688:	6809      	ldr	r1, [r1, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fb8c 	bl	8008da8 <memcpy>
  
  if (hciContext.io.Send)
 8008690:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <send_cmd+0xf0>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00d      	beq.n	80086b4 <send_cmd+0xe4>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008698:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <send_cmd+0xf0>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80086a0:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	b292      	uxth	r2, r2
 80086a8:	3204      	adds	r2, #4
 80086aa:	b291      	uxth	r1, r2
 80086ac:	f107 0218 	add.w	r2, r7, #24
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
  }
}
 80086b4:	bf00      	nop
 80086b6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd90      	pop	{r4, r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000b14 	.word	0x20000b14

080086c4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80086ce:	e00a      	b.n	80086e6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4619      	mov	r1, r3
 80086d6:	6838      	ldr	r0, [r7, #0]
 80086d8:	f000 faec 	bl	8008cb4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa53 	bl	8008b8c <list_insert_head>
  while (!list_is_empty(src_list))
 80086e6:	6838      	ldr	r0, [r7, #0]
 80086e8:	f000 fa2e 	bl	8008b48 <list_is_empty>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0ee      	beq.n	80086d0 <move_list+0xc>
  }
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008702:	e009      	b.n	8008718 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	4619      	mov	r1, r3
 8008708:	4809      	ldr	r0, [pc, #36]	; (8008730 <free_event_list+0x34>)
 800870a:	f000 faac 	bl	8008c66 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4619      	mov	r1, r3
 8008712:	4808      	ldr	r0, [pc, #32]	; (8008734 <free_event_list+0x38>)
 8008714:	f000 fa60 	bl	8008bd8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008718:	4806      	ldr	r0, [pc, #24]	; (8008734 <free_event_list+0x38>)
 800871a:	f000 faf2 	bl	8008d02 <list_get_size>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	ddef      	ble.n	8008704 <free_event_list+0x8>
  }
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	200005d0 	.word	0x200005d0
 8008734:	200005c8 	.word	0x200005c8

08008738 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <hci_init+0x74>)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800874e:	4818      	ldr	r0, [pc, #96]	; (80087b0 <hci_init+0x78>)
 8008750:	f000 f9ea 	bl	8008b28 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008754:	4817      	ldr	r0, [pc, #92]	; (80087b4 <hci_init+0x7c>)
 8008756:	f000 f9e7 	bl	8008b28 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800875a:	f7f8 f859 	bl	8000810 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]
 8008762:	e00d      	b.n	8008780 <hci_init+0x48>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	4a12      	ldr	r2, [pc, #72]	; (80087b8 <hci_init+0x80>)
 8008770:	4413      	add	r3, r2
 8008772:	4619      	mov	r1, r3
 8008774:	480e      	ldr	r0, [pc, #56]	; (80087b0 <hci_init+0x78>)
 8008776:	f000 fa2f 	bl	8008bd8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	3301      	adds	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b04      	cmp	r3, #4
 8008784:	d9ee      	bls.n	8008764 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <hci_init+0x74>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <hci_init+0x5e>
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <hci_init+0x74>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2000      	movs	r0, #0
 8008794:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <hci_init+0x74>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <hci_init+0x6c>
 800879e:	4b03      	ldr	r3, [pc, #12]	; (80087ac <hci_init+0x74>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4798      	blx	r3
}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20000b14 	.word	0x20000b14
 80087b0:	200005c8 	.word	0x200005c8
 80087b4:	200005d0 	.word	0x200005d0
 80087b8:	200005d8 	.word	0x200005d8

080087bc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a0b      	ldr	r2, [pc, #44]	; (80087f8 <hci_register_io_bus+0x3c>)
 80087ca:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <hci_register_io_bus+0x3c>)
 80087d2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	4a07      	ldr	r2, [pc, #28]	; (80087f8 <hci_register_io_bus+0x3c>)
 80087da:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	4a05      	ldr	r2, [pc, #20]	; (80087f8 <hci_register_io_bus+0x3c>)
 80087e2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <hci_register_io_bus+0x3c>)
 80087ea:	6093      	str	r3, [r2, #8]
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	20000b14 	.word	0x20000b14

080087fc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	885b      	ldrh	r3, [r3, #2]
 800880c:	b21b      	sxth	r3, r3
 800880e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008812:	b21a      	sxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	029b      	lsls	r3, r3, #10
 800881a:	b21b      	sxth	r3, r3
 800881c:	4313      	orrs	r3, r2
 800881e:	b21b      	sxth	r3, r3
 8008820:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f97c 	bl	8008b28 <list_init_head>

  free_event_list();
 8008830:	f7ff ff64 	bl	80086fc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8818      	ldrh	r0, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8859      	ldrh	r1, [r3, #2]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	b2da      	uxtb	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f7ff fec3 	bl	80085d0 <send_cmd>
  
  if (async)
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <hci_send_req+0x58>
  {
    return 0;
 8008850:	2300      	movs	r3, #0
 8008852:	e0e5      	b.n	8008a20 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008854:	f7f9 ffb6 	bl	80027c4 <HAL_GetTick>
 8008858:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800885a:	f7f9 ffb3 	bl	80027c4 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008868:	f200 80b6 	bhi.w	80089d8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800886c:	486e      	ldr	r0, [pc, #440]	; (8008a28 <hci_send_req+0x22c>)
 800886e:	f000 f96b 	bl	8008b48 <list_is_empty>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d000      	beq.n	800887a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008878:	e7ef      	b.n	800885a <hci_send_req+0x5e>
      {
        break;
 800887a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800887c:	f107 0310 	add.w	r3, r7, #16
 8008880:	4619      	mov	r1, r3
 8008882:	4869      	ldr	r0, [pc, #420]	; (8008a28 <hci_send_req+0x22c>)
 8008884:	f000 f9ef 	bl	8008c66 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3308      	adds	r3, #8
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d17b      	bne.n	800898e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	3301      	adds	r3, #1
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3308      	adds	r3, #8
 80088a0:	3303      	adds	r3, #3
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80088aa:	3b03      	subs	r3, #3
 80088ac:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b3e      	cmp	r3, #62	; 0x3e
 80088b4:	d04d      	beq.n	8008952 <hci_send_req+0x156>
 80088b6:	2b3e      	cmp	r3, #62	; 0x3e
 80088b8:	dc6b      	bgt.n	8008992 <hci_send_req+0x196>
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	f000 808e 	beq.w	80089dc <hci_send_req+0x1e0>
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	dc66      	bgt.n	8008992 <hci_send_req+0x196>
 80088c4:	2b0e      	cmp	r3, #14
 80088c6:	d024      	beq.n	8008912 <hci_send_req+0x116>
 80088c8:	2b0f      	cmp	r3, #15
 80088ca:	d162      	bne.n	8008992 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088d8:	429a      	cmp	r2, r3
 80088da:	f040 8081 	bne.w	80089e0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d004      	beq.n	80088f0 <hci_send_req+0xf4>
          if (cs->status) {
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d053      	beq.n	8008996 <hci_send_req+0x19a>
            goto failed;
 80088ee:	e07a      	b.n	80089e6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	bf28      	it	cs
 80088fa:	461a      	movcs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6918      	ldr	r0, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	461a      	mov	r2, r3
 800890a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800890c:	f000 fa4c 	bl	8008da8 <memcpy>
        goto done;
 8008910:	e07a      	b.n	8008a08 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800891c:	b29b      	uxth	r3, r3
 800891e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008920:	429a      	cmp	r2, r3
 8008922:	d15f      	bne.n	80089e4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	3303      	adds	r3, #3
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	3b03      	subs	r3, #3
 800892e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	429a      	cmp	r2, r3
 8008938:	bf28      	it	cs
 800893a:	461a      	movcs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6918      	ldr	r0, [r3, #16]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	461a      	mov	r2, r3
 800894a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800894c:	f000 fa2c 	bl	8008da8 <memcpy>
        goto done;
 8008950:	e05a      	b.n	8008a08 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d11a      	bne.n	800899a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	3b01      	subs	r3, #1
 8008968:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695a      	ldr	r2, [r3, #20]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	429a      	cmp	r2, r3
 8008972:	bf28      	it	cs
 8008974:	461a      	movcs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6918      	ldr	r0, [r3, #16]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	1c59      	adds	r1, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	461a      	mov	r2, r3
 8008988:	f000 fa0e 	bl	8008da8 <memcpy>
        goto done;
 800898c:	e03c      	b.n	8008a08 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800898e:	bf00      	nop
 8008990:	e004      	b.n	800899c <hci_send_req+0x1a0>
        break;
 8008992:	bf00      	nop
 8008994:	e002      	b.n	800899c <hci_send_req+0x1a0>
          break;
 8008996:	bf00      	nop
 8008998:	e000      	b.n	800899c <hci_send_req+0x1a0>
          break;
 800899a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800899c:	4823      	ldr	r0, [pc, #140]	; (8008a2c <hci_send_req+0x230>)
 800899e:	f000 f8d3 	bl	8008b48 <list_is_empty>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00d      	beq.n	80089c4 <hci_send_req+0x1c8>
 80089a8:	481f      	ldr	r0, [pc, #124]	; (8008a28 <hci_send_req+0x22c>)
 80089aa:	f000 f8cd 	bl	8008b48 <list_is_empty>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	4619      	mov	r1, r3
 80089b8:	481c      	ldr	r0, [pc, #112]	; (8008a2c <hci_send_req+0x230>)
 80089ba:	f000 f90d 	bl	8008bd8 <list_insert_tail>
      hciReadPacket=NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	e008      	b.n	80089d6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4611      	mov	r1, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f903 	bl	8008bd8 <list_insert_tail>
      hciReadPacket=NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	613b      	str	r3, [r7, #16]
  {
 80089d6:	e73d      	b.n	8008854 <hci_send_req+0x58>
        goto failed;
 80089d8:	bf00      	nop
 80089da:	e004      	b.n	80089e6 <hci_send_req+0x1ea>
        goto failed;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <hci_send_req+0x1ea>
          goto failed;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <hci_send_req+0x1ea>
          goto failed;
 80089e4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	4619      	mov	r1, r3
 80089f0:	480e      	ldr	r0, [pc, #56]	; (8008a2c <hci_send_req+0x230>)
 80089f2:	f000 f8cb 	bl	8008b8c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4619      	mov	r1, r3
 80089fc:	480a      	ldr	r0, [pc, #40]	; (8008a28 <hci_send_req+0x22c>)
 80089fe:	f7ff fe61 	bl	80086c4 <move_list>

  return -1;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	e00b      	b.n	8008a20 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4807      	ldr	r0, [pc, #28]	; (8008a2c <hci_send_req+0x230>)
 8008a0e:	f000 f8bd 	bl	8008b8c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8008a12:	f107 0308 	add.w	r3, r7, #8
 8008a16:	4619      	mov	r1, r3
 8008a18:	4803      	ldr	r0, [pc, #12]	; (8008a28 <hci_send_req+0x22c>)
 8008a1a:	f7ff fe53 	bl	80086c4 <move_list>

  return 0;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3738      	adds	r7, #56	; 0x38
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	200005d0 	.word	0x200005d0
 8008a2c:	200005c8 	.word	0x200005c8

08008a30 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008a3a:	e013      	b.n	8008a64 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	4619      	mov	r1, r3
 8008a40:	480e      	ldr	r0, [pc, #56]	; (8008a7c <hci_user_evt_proc+0x4c>)
 8008a42:	f000 f910 	bl	8008c66 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008a46:	4b0e      	ldr	r3, [pc, #56]	; (8008a80 <hci_user_evt_proc+0x50>)
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <hci_user_evt_proc+0x50>)
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	3208      	adds	r2, #8
 8008a56:	4610      	mov	r0, r2
 8008a58:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4809      	ldr	r0, [pc, #36]	; (8008a84 <hci_user_evt_proc+0x54>)
 8008a60:	f000 f8ba 	bl	8008bd8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008a64:	4805      	ldr	r0, [pc, #20]	; (8008a7c <hci_user_evt_proc+0x4c>)
 8008a66:	f000 f86f 	bl	8008b48 <list_is_empty>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0e5      	beq.n	8008a3c <hci_user_evt_proc+0xc>
  }
}
 8008a70:	bf00      	nop
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200005d0 	.word	0x200005d0
 8008a80:	20000b14 	.word	0x20000b14
 8008a84:	200005c8 	.word	0x200005c8

08008a88 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008a98:	4820      	ldr	r0, [pc, #128]	; (8008b1c <hci_notify_asynch_evt+0x94>)
 8008a9a:	f000 f855 	bl	8008b48 <list_is_empty>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d133      	bne.n	8008b0c <hci_notify_asynch_evt+0x84>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	481c      	ldr	r0, [pc, #112]	; (8008b1c <hci_notify_asynch_evt+0x94>)
 8008aac:	f000 f8db 	bl	8008c66 <list_remove_head>
    
    if (hciContext.io.Receive)
 8008ab0:	4b1b      	ldr	r3, [pc, #108]	; (8008b20 <hci_notify_asynch_evt+0x98>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d02b      	beq.n	8008b10 <hci_notify_asynch_evt+0x88>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008ab8:	4b19      	ldr	r3, [pc, #100]	; (8008b20 <hci_notify_asynch_evt+0x98>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	3208      	adds	r2, #8
 8008ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8008acc:	7cfb      	ldrb	r3, [r7, #19]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d016      	beq.n	8008b00 <hci_notify_asynch_evt+0x78>
      {                    
        hciReadPacket->data_len = data_len;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7cfa      	ldrb	r2, [r7, #19]
 8008ad6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (verify_packet(hciReadPacket) == 0)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fd57 	bl	8008590 <verify_packet>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d105      	bne.n	8008af4 <hci_notify_asynch_evt+0x6c>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4619      	mov	r1, r3
 8008aec:	480d      	ldr	r0, [pc, #52]	; (8008b24 <hci_notify_asynch_evt+0x9c>)
 8008aee:	f000 f873 	bl	8008bd8 <list_insert_tail>
 8008af2:	e00d      	b.n	8008b10 <hci_notify_asynch_evt+0x88>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4619      	mov	r1, r3
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <hci_notify_asynch_evt+0x94>)
 8008afa:	f000 f847 	bl	8008b8c <list_insert_head>
 8008afe:	e007      	b.n	8008b10 <hci_notify_asynch_evt+0x88>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4805      	ldr	r0, [pc, #20]	; (8008b1c <hci_notify_asynch_evt+0x94>)
 8008b06:	f000 f841 	bl	8008b8c <list_insert_head>
 8008b0a:	e001      	b.n	8008b10 <hci_notify_asynch_evt+0x88>
      }
    }
  }
  else 
  {
    ret = 1;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008b10:	697b      	ldr	r3, [r7, #20]

}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200005c8 	.word	0x200005c8
 8008b20:	20000b14 	.word	0x20000b14
 8008b24:	200005d0 	.word	0x200005d0

08008b28 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	605a      	str	r2, [r3, #4]
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b50:	f3ef 8310 	mrs	r3, PRIMASK
 8008b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b56:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b5a:	b672      	cpsid	i
}
 8008b5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d102      	bne.n	8008b6e <list_is_empty+0x26>
  {
    return_value = 1;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
 8008b6c:	e001      	b.n	8008b72 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f383 8810 	msr	PRIMASK, r3
}
 8008b7c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b96:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ba0:	b672      	cpsid	i
}
 8008ba2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f383 8810 	msr	PRIMASK, r3
}
 8008bca:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008bcc:	bf00      	nop
 8008bce:	371c      	adds	r7, #28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be2:	f3ef 8310 	mrs	r3, PRIMASK
 8008be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008be8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bec:	b672      	cpsid	i
}
 8008bee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f383 8810 	msr	PRIMASK, r3
}
 8008c16:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c32:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c36:	b672      	cpsid	i
}
 8008c38:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6852      	ldr	r2, [r2, #4]
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f383 8810 	msr	PRIMASK, r3
}
 8008c58:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b086      	sub	sp, #24
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c70:	f3ef 8310 	mrs	r3, PRIMASK
 8008c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c76:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c7a:	b672      	cpsid	i
}
 8008c7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ffca 	bl	8008c24 <list_remove_node>
  (*node)->next = NULL;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f383 8810 	msr	PRIMASK, r3
}
 8008caa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cc8:	b672      	cpsid	i
}
 8008cca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff ffa3 	bl	8008c24 <list_remove_node>
  (*node)->next = NULL;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	605a      	str	r2, [r3, #4]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f383 8810 	msr	PRIMASK, r3
}
 8008cf8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008cfa:	bf00      	nop
 8008cfc:	3718      	adds	r7, #24
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b089      	sub	sp, #36	; 0x24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  int size = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d12:	613b      	str	r3, [r7, #16]
  return(result);
 8008d14:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d18:	b672      	cpsid	i
}
 8008d1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008d22:	e005      	b.n	8008d30 <list_get_size+0x2e>
  {
    size++;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	3301      	adds	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d1f5      	bne.n	8008d24 <list_get_size+0x22>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8008d44:	69fb      	ldr	r3, [r7, #28]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3724      	adds	r7, #36	; 0x24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
	...

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000074 	.word	0x20000074

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f001 f832 	bl	8009ddc <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800a4a8 	.word	0x0800a4a8
 8008d9c:	0800a4a8 	.word	0x0800a4a8
 8008da0:	0800a4a8 	.word	0x0800a4a8
 8008da4:	0800a4ac 	.word	0x0800a4ac

08008da8 <memcpy>:
 8008da8:	440a      	add	r2, r1
 8008daa:	4291      	cmp	r1, r2
 8008dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008db0:	d100      	bne.n	8008db4 <memcpy+0xc>
 8008db2:	4770      	bx	lr
 8008db4:	b510      	push	{r4, lr}
 8008db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dbe:	4291      	cmp	r1, r2
 8008dc0:	d1f9      	bne.n	8008db6 <memcpy+0xe>
 8008dc2:	bd10      	pop	{r4, pc}

08008dc4 <memset>:
 8008dc4:	4402      	add	r2, r0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d100      	bne.n	8008dce <memset+0xa>
 8008dcc:	4770      	bx	lr
 8008dce:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd2:	e7f9      	b.n	8008dc8 <memset+0x4>

08008dd4 <iprintf>:
 8008dd4:	b40f      	push	{r0, r1, r2, r3}
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <iprintf+0x2c>)
 8008dd8:	b513      	push	{r0, r1, r4, lr}
 8008dda:	681c      	ldr	r4, [r3, #0]
 8008ddc:	b124      	cbz	r4, 8008de8 <iprintf+0x14>
 8008dde:	69a3      	ldr	r3, [r4, #24]
 8008de0:	b913      	cbnz	r3, 8008de8 <iprintf+0x14>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fa5e 	bl	80092a4 <__sinit>
 8008de8:	ab05      	add	r3, sp, #20
 8008dea:	9a04      	ldr	r2, [sp, #16]
 8008dec:	68a1      	ldr	r1, [r4, #8]
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 fc67 	bl	80096c4 <_vfiprintf_r>
 8008df6:	b002      	add	sp, #8
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	b004      	add	sp, #16
 8008dfe:	4770      	bx	lr
 8008e00:	20000074 	.word	0x20000074

08008e04 <_puts_r>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4605      	mov	r5, r0
 8008e0a:	b118      	cbz	r0, 8008e14 <_puts_r+0x10>
 8008e0c:	6983      	ldr	r3, [r0, #24]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <_puts_r+0x10>
 8008e10:	f000 fa48 	bl	80092a4 <__sinit>
 8008e14:	69ab      	ldr	r3, [r5, #24]
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	b913      	cbnz	r3, 8008e20 <_puts_r+0x1c>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f000 fa42 	bl	80092a4 <__sinit>
 8008e20:	4b2c      	ldr	r3, [pc, #176]	; (8008ed4 <_puts_r+0xd0>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d120      	bne.n	8008e68 <_puts_r+0x64>
 8008e26:	686c      	ldr	r4, [r5, #4]
 8008e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e2a:	07db      	lsls	r3, r3, #31
 8008e2c:	d405      	bmi.n	8008e3a <_puts_r+0x36>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	0598      	lsls	r0, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_puts_r+0x36>
 8008e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e36:	f000 fad3 	bl	80093e0 <__retarget_lock_acquire_recursive>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	d51d      	bpl.n	8008e7c <_puts_r+0x78>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	b1db      	cbz	r3, 8008e7c <_puts_r+0x78>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	60a3      	str	r3, [r4, #8]
 8008e50:	bb39      	cbnz	r1, 8008ea2 <_puts_r+0x9e>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da38      	bge.n	8008ec8 <_puts_r+0xc4>
 8008e56:	4622      	mov	r2, r4
 8008e58:	210a      	movs	r1, #10
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f848 	bl	8008ef0 <__swbuf_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d011      	beq.n	8008e88 <_puts_r+0x84>
 8008e64:	250a      	movs	r5, #10
 8008e66:	e011      	b.n	8008e8c <_puts_r+0x88>
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <_puts_r+0xd4>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <_puts_r+0x6e>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7da      	b.n	8008e28 <_puts_r+0x24>
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <_puts_r+0xd8>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7d5      	b.n	8008e28 <_puts_r+0x24>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 f888 	bl	8008f94 <__swsetup_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0dd      	beq.n	8008e44 <_puts_r+0x40>
 8008e88:	f04f 35ff 	mov.w	r5, #4294967295
 8008e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8e:	07da      	lsls	r2, r3, #31
 8008e90:	d405      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <_puts_r+0x9a>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f000 faa2 	bl	80093e2 <__retarget_lock_release_recursive>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da04      	bge.n	8008eb0 <_puts_r+0xac>
 8008ea6:	69a2      	ldr	r2, [r4, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	dc06      	bgt.n	8008eba <_puts_r+0xb6>
 8008eac:	290a      	cmp	r1, #10
 8008eae:	d004      	beq.n	8008eba <_puts_r+0xb6>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	6022      	str	r2, [r4, #0]
 8008eb6:	7019      	strb	r1, [r3, #0]
 8008eb8:	e7c5      	b.n	8008e46 <_puts_r+0x42>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f000 f817 	bl	8008ef0 <__swbuf_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d1bf      	bne.n	8008e46 <_puts_r+0x42>
 8008ec6:	e7df      	b.n	8008e88 <_puts_r+0x84>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	250a      	movs	r5, #10
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	701d      	strb	r5, [r3, #0]
 8008ed2:	e7db      	b.n	8008e8c <_puts_r+0x88>
 8008ed4:	0800a42c 	.word	0x0800a42c
 8008ed8:	0800a44c 	.word	0x0800a44c
 8008edc:	0800a40c 	.word	0x0800a40c

08008ee0 <puts>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <puts+0xc>)
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f7ff bf8d 	b.w	8008e04 <_puts_r>
 8008eea:	bf00      	nop
 8008eec:	20000074 	.word	0x20000074

08008ef0 <__swbuf_r>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b118      	cbz	r0, 8008f02 <__swbuf_r+0x12>
 8008efa:	6983      	ldr	r3, [r0, #24]
 8008efc:	b90b      	cbnz	r3, 8008f02 <__swbuf_r+0x12>
 8008efe:	f000 f9d1 	bl	80092a4 <__sinit>
 8008f02:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <__swbuf_r+0x98>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	d12b      	bne.n	8008f60 <__swbuf_r+0x70>
 8008f08:	686c      	ldr	r4, [r5, #4]
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	071a      	lsls	r2, r3, #28
 8008f12:	d52f      	bpl.n	8008f74 <__swbuf_r+0x84>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	b36b      	cbz	r3, 8008f74 <__swbuf_r+0x84>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	1ac0      	subs	r0, r0, r3
 8008f1e:	6963      	ldr	r3, [r4, #20]
 8008f20:	b2f6      	uxtb	r6, r6
 8008f22:	4283      	cmp	r3, r0
 8008f24:	4637      	mov	r7, r6
 8008f26:	dc04      	bgt.n	8008f32 <__swbuf_r+0x42>
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 f926 	bl	800917c <_fflush_r>
 8008f30:	bb30      	cbnz	r0, 8008f80 <__swbuf_r+0x90>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	701e      	strb	r6, [r3, #0]
 8008f40:	6963      	ldr	r3, [r4, #20]
 8008f42:	3001      	adds	r0, #1
 8008f44:	4283      	cmp	r3, r0
 8008f46:	d004      	beq.n	8008f52 <__swbuf_r+0x62>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	07db      	lsls	r3, r3, #31
 8008f4c:	d506      	bpl.n	8008f5c <__swbuf_r+0x6c>
 8008f4e:	2e0a      	cmp	r6, #10
 8008f50:	d104      	bne.n	8008f5c <__swbuf_r+0x6c>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f911 	bl	800917c <_fflush_r>
 8008f5a:	b988      	cbnz	r0, 8008f80 <__swbuf_r+0x90>
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <__swbuf_r+0x9c>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <__swbuf_r+0x7a>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7cf      	b.n	8008f0a <__swbuf_r+0x1a>
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <__swbuf_r+0xa0>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7ca      	b.n	8008f0a <__swbuf_r+0x1a>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 f80c 	bl	8008f94 <__swsetup_r>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0cb      	beq.n	8008f18 <__swbuf_r+0x28>
 8008f80:	f04f 37ff 	mov.w	r7, #4294967295
 8008f84:	e7ea      	b.n	8008f5c <__swbuf_r+0x6c>
 8008f86:	bf00      	nop
 8008f88:	0800a42c 	.word	0x0800a42c
 8008f8c:	0800a44c 	.word	0x0800a44c
 8008f90:	0800a40c 	.word	0x0800a40c

08008f94 <__swsetup_r>:
 8008f94:	4b32      	ldr	r3, [pc, #200]	; (8009060 <__swsetup_r+0xcc>)
 8008f96:	b570      	push	{r4, r5, r6, lr}
 8008f98:	681d      	ldr	r5, [r3, #0]
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	b125      	cbz	r5, 8008faa <__swsetup_r+0x16>
 8008fa0:	69ab      	ldr	r3, [r5, #24]
 8008fa2:	b913      	cbnz	r3, 8008faa <__swsetup_r+0x16>
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 f97d 	bl	80092a4 <__sinit>
 8008faa:	4b2e      	ldr	r3, [pc, #184]	; (8009064 <__swsetup_r+0xd0>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d10f      	bne.n	8008fd0 <__swsetup_r+0x3c>
 8008fb0:	686c      	ldr	r4, [r5, #4]
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fb8:	0719      	lsls	r1, r3, #28
 8008fba:	d42c      	bmi.n	8009016 <__swsetup_r+0x82>
 8008fbc:	06dd      	lsls	r5, r3, #27
 8008fbe:	d411      	bmi.n	8008fe4 <__swsetup_r+0x50>
 8008fc0:	2309      	movs	r3, #9
 8008fc2:	6033      	str	r3, [r6, #0]
 8008fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295
 8008fce:	e03e      	b.n	800904e <__swsetup_r+0xba>
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <__swsetup_r+0xd4>)
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d101      	bne.n	8008fda <__swsetup_r+0x46>
 8008fd6:	68ac      	ldr	r4, [r5, #8]
 8008fd8:	e7eb      	b.n	8008fb2 <__swsetup_r+0x1e>
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <__swsetup_r+0xd8>)
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	bf08      	it	eq
 8008fe0:	68ec      	ldreq	r4, [r5, #12]
 8008fe2:	e7e6      	b.n	8008fb2 <__swsetup_r+0x1e>
 8008fe4:	0758      	lsls	r0, r3, #29
 8008fe6:	d512      	bpl.n	800900e <__swsetup_r+0x7a>
 8008fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fea:	b141      	cbz	r1, 8008ffe <__swsetup_r+0x6a>
 8008fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <__swsetup_r+0x66>
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 fa5b 	bl	80094b0 <_free_r>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	2300      	movs	r3, #0
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f043 0308 	orr.w	r3, r3, #8
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	b94b      	cbnz	r3, 800902e <__swsetup_r+0x9a>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009024:	d003      	beq.n	800902e <__swsetup_r+0x9a>
 8009026:	4621      	mov	r1, r4
 8009028:	4630      	mov	r0, r6
 800902a:	f000 fa01 	bl	8009430 <__smakebuf_r>
 800902e:	89a0      	ldrh	r0, [r4, #12]
 8009030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009034:	f010 0301 	ands.w	r3, r0, #1
 8009038:	d00a      	beq.n	8009050 <__swsetup_r+0xbc>
 800903a:	2300      	movs	r3, #0
 800903c:	60a3      	str	r3, [r4, #8]
 800903e:	6963      	ldr	r3, [r4, #20]
 8009040:	425b      	negs	r3, r3
 8009042:	61a3      	str	r3, [r4, #24]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	b943      	cbnz	r3, 800905a <__swsetup_r+0xc6>
 8009048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800904c:	d1ba      	bne.n	8008fc4 <__swsetup_r+0x30>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	0781      	lsls	r1, r0, #30
 8009052:	bf58      	it	pl
 8009054:	6963      	ldrpl	r3, [r4, #20]
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	e7f4      	b.n	8009044 <__swsetup_r+0xb0>
 800905a:	2000      	movs	r0, #0
 800905c:	e7f7      	b.n	800904e <__swsetup_r+0xba>
 800905e:	bf00      	nop
 8009060:	20000074 	.word	0x20000074
 8009064:	0800a42c 	.word	0x0800a42c
 8009068:	0800a44c 	.word	0x0800a44c
 800906c:	0800a40c 	.word	0x0800a40c

08009070 <__sflush_r>:
 8009070:	898a      	ldrh	r2, [r1, #12]
 8009072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009076:	4605      	mov	r5, r0
 8009078:	0710      	lsls	r0, r2, #28
 800907a:	460c      	mov	r4, r1
 800907c:	d458      	bmi.n	8009130 <__sflush_r+0xc0>
 800907e:	684b      	ldr	r3, [r1, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	dc05      	bgt.n	8009090 <__sflush_r+0x20>
 8009084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc02      	bgt.n	8009090 <__sflush_r+0x20>
 800908a:	2000      	movs	r0, #0
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009092:	2e00      	cmp	r6, #0
 8009094:	d0f9      	beq.n	800908a <__sflush_r+0x1a>
 8009096:	2300      	movs	r3, #0
 8009098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800909c:	682f      	ldr	r7, [r5, #0]
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	d032      	beq.n	8009108 <__sflush_r+0x98>
 80090a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	075a      	lsls	r2, r3, #29
 80090a8:	d505      	bpl.n	80090b6 <__sflush_r+0x46>
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	1ac0      	subs	r0, r0, r3
 80090ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090b0:	b10b      	cbz	r3, 80090b6 <__sflush_r+0x46>
 80090b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090b4:	1ac0      	subs	r0, r0, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	4602      	mov	r2, r0
 80090ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090bc:	6a21      	ldr	r1, [r4, #32]
 80090be:	4628      	mov	r0, r5
 80090c0:	47b0      	blx	r6
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	d106      	bne.n	80090d6 <__sflush_r+0x66>
 80090c8:	6829      	ldr	r1, [r5, #0]
 80090ca:	291d      	cmp	r1, #29
 80090cc:	d82c      	bhi.n	8009128 <__sflush_r+0xb8>
 80090ce:	4a2a      	ldr	r2, [pc, #168]	; (8009178 <__sflush_r+0x108>)
 80090d0:	40ca      	lsrs	r2, r1
 80090d2:	07d6      	lsls	r6, r2, #31
 80090d4:	d528      	bpl.n	8009128 <__sflush_r+0xb8>
 80090d6:	2200      	movs	r2, #0
 80090d8:	6062      	str	r2, [r4, #4]
 80090da:	04d9      	lsls	r1, r3, #19
 80090dc:	6922      	ldr	r2, [r4, #16]
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	d504      	bpl.n	80090ec <__sflush_r+0x7c>
 80090e2:	1c42      	adds	r2, r0, #1
 80090e4:	d101      	bne.n	80090ea <__sflush_r+0x7a>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	b903      	cbnz	r3, 80090ec <__sflush_r+0x7c>
 80090ea:	6560      	str	r0, [r4, #84]	; 0x54
 80090ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ee:	602f      	str	r7, [r5, #0]
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d0ca      	beq.n	800908a <__sflush_r+0x1a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__sflush_r+0x92>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 f9d7 	bl	80094b0 <_free_r>
 8009102:	2000      	movs	r0, #0
 8009104:	6360      	str	r0, [r4, #52]	; 0x34
 8009106:	e7c1      	b.n	800908c <__sflush_r+0x1c>
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	2301      	movs	r3, #1
 800910c:	4628      	mov	r0, r5
 800910e:	47b0      	blx	r6
 8009110:	1c41      	adds	r1, r0, #1
 8009112:	d1c7      	bne.n	80090a4 <__sflush_r+0x34>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0c4      	beq.n	80090a4 <__sflush_r+0x34>
 800911a:	2b1d      	cmp	r3, #29
 800911c:	d001      	beq.n	8009122 <__sflush_r+0xb2>
 800911e:	2b16      	cmp	r3, #22
 8009120:	d101      	bne.n	8009126 <__sflush_r+0xb6>
 8009122:	602f      	str	r7, [r5, #0]
 8009124:	e7b1      	b.n	800908a <__sflush_r+0x1a>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	e7ad      	b.n	800908c <__sflush_r+0x1c>
 8009130:	690f      	ldr	r7, [r1, #16]
 8009132:	2f00      	cmp	r7, #0
 8009134:	d0a9      	beq.n	800908a <__sflush_r+0x1a>
 8009136:	0793      	lsls	r3, r2, #30
 8009138:	680e      	ldr	r6, [r1, #0]
 800913a:	bf08      	it	eq
 800913c:	694b      	ldreq	r3, [r1, #20]
 800913e:	600f      	str	r7, [r1, #0]
 8009140:	bf18      	it	ne
 8009142:	2300      	movne	r3, #0
 8009144:	eba6 0807 	sub.w	r8, r6, r7
 8009148:	608b      	str	r3, [r1, #8]
 800914a:	f1b8 0f00 	cmp.w	r8, #0
 800914e:	dd9c      	ble.n	800908a <__sflush_r+0x1a>
 8009150:	6a21      	ldr	r1, [r4, #32]
 8009152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009154:	4643      	mov	r3, r8
 8009156:	463a      	mov	r2, r7
 8009158:	4628      	mov	r0, r5
 800915a:	47b0      	blx	r6
 800915c:	2800      	cmp	r0, #0
 800915e:	dc06      	bgt.n	800916e <__sflush_r+0xfe>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	e78e      	b.n	800908c <__sflush_r+0x1c>
 800916e:	4407      	add	r7, r0
 8009170:	eba8 0800 	sub.w	r8, r8, r0
 8009174:	e7e9      	b.n	800914a <__sflush_r+0xda>
 8009176:	bf00      	nop
 8009178:	20400001 	.word	0x20400001

0800917c <_fflush_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b913      	cbnz	r3, 800918c <_fflush_r+0x10>
 8009186:	2500      	movs	r5, #0
 8009188:	4628      	mov	r0, r5
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	b118      	cbz	r0, 8009196 <_fflush_r+0x1a>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <_fflush_r+0x1a>
 8009192:	f000 f887 	bl	80092a4 <__sinit>
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <_fflush_r+0x6c>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d11b      	bne.n	80091d4 <_fflush_r+0x58>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0ef      	beq.n	8009186 <_fflush_r+0xa>
 80091a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091a8:	07d0      	lsls	r0, r2, #31
 80091aa:	d404      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091ac:	0599      	lsls	r1, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f000 f915 	bl	80093e0 <__retarget_lock_acquire_recursive>
 80091b6:	4628      	mov	r0, r5
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff ff59 	bl	8009070 <__sflush_r>
 80091be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c0:	07da      	lsls	r2, r3, #31
 80091c2:	4605      	mov	r5, r0
 80091c4:	d4e0      	bmi.n	8009188 <_fflush_r+0xc>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	059b      	lsls	r3, r3, #22
 80091ca:	d4dd      	bmi.n	8009188 <_fflush_r+0xc>
 80091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ce:	f000 f908 	bl	80093e2 <__retarget_lock_release_recursive>
 80091d2:	e7d9      	b.n	8009188 <_fflush_r+0xc>
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <_fflush_r+0x70>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <_fflush_r+0x62>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7df      	b.n	800919e <_fflush_r+0x22>
 80091de:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <_fflush_r+0x74>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7da      	b.n	800919e <_fflush_r+0x22>
 80091e8:	0800a42c 	.word	0x0800a42c
 80091ec:	0800a44c 	.word	0x0800a44c
 80091f0:	0800a40c 	.word	0x0800a40c

080091f4 <std>:
 80091f4:	2300      	movs	r3, #0
 80091f6:	b510      	push	{r4, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	e9c0 3300 	strd	r3, r3, [r0]
 80091fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	; 0x64
 8009208:	81c2      	strh	r2, [r0, #14]
 800920a:	6183      	str	r3, [r0, #24]
 800920c:	4619      	mov	r1, r3
 800920e:	2208      	movs	r2, #8
 8009210:	305c      	adds	r0, #92	; 0x5c
 8009212:	f7ff fdd7 	bl	8008dc4 <memset>
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <std+0x38>)
 8009218:	6263      	str	r3, [r4, #36]	; 0x24
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <std+0x3c>)
 800921c:	62a3      	str	r3, [r4, #40]	; 0x28
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <std+0x40>)
 8009220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <std+0x44>)
 8009224:	6224      	str	r4, [r4, #32]
 8009226:	6323      	str	r3, [r4, #48]	; 0x30
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop
 800922c:	08009c6d 	.word	0x08009c6d
 8009230:	08009c8f 	.word	0x08009c8f
 8009234:	08009cc7 	.word	0x08009cc7
 8009238:	08009ceb 	.word	0x08009ceb

0800923c <_cleanup_r>:
 800923c:	4901      	ldr	r1, [pc, #4]	; (8009244 <_cleanup_r+0x8>)
 800923e:	f000 b8af 	b.w	80093a0 <_fwalk_reent>
 8009242:	bf00      	nop
 8009244:	0800917d 	.word	0x0800917d

08009248 <__sfmoreglue>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	2268      	movs	r2, #104	; 0x68
 800924c:	1e4d      	subs	r5, r1, #1
 800924e:	4355      	muls	r5, r2
 8009250:	460e      	mov	r6, r1
 8009252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009256:	f000 f997 	bl	8009588 <_malloc_r>
 800925a:	4604      	mov	r4, r0
 800925c:	b140      	cbz	r0, 8009270 <__sfmoreglue+0x28>
 800925e:	2100      	movs	r1, #0
 8009260:	e9c0 1600 	strd	r1, r6, [r0]
 8009264:	300c      	adds	r0, #12
 8009266:	60a0      	str	r0, [r4, #8]
 8009268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800926c:	f7ff fdaa 	bl	8008dc4 <memset>
 8009270:	4620      	mov	r0, r4
 8009272:	bd70      	pop	{r4, r5, r6, pc}

08009274 <__sfp_lock_acquire>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__sfp_lock_acquire+0x8>)
 8009276:	f000 b8b3 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	20000b35 	.word	0x20000b35

08009280 <__sfp_lock_release>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sfp_lock_release+0x8>)
 8009282:	f000 b8ae 	b.w	80093e2 <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	20000b35 	.word	0x20000b35

0800928c <__sinit_lock_acquire>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sinit_lock_acquire+0x8>)
 800928e:	f000 b8a7 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 8009292:	bf00      	nop
 8009294:	20000b36 	.word	0x20000b36

08009298 <__sinit_lock_release>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sinit_lock_release+0x8>)
 800929a:	f000 b8a2 	b.w	80093e2 <__retarget_lock_release_recursive>
 800929e:	bf00      	nop
 80092a0:	20000b36 	.word	0x20000b36

080092a4 <__sinit>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	f7ff fff0 	bl	800928c <__sinit_lock_acquire>
 80092ac:	69a3      	ldr	r3, [r4, #24]
 80092ae:	b11b      	cbz	r3, 80092b8 <__sinit+0x14>
 80092b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b4:	f7ff bff0 	b.w	8009298 <__sinit_lock_release>
 80092b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092bc:	6523      	str	r3, [r4, #80]	; 0x50
 80092be:	4b13      	ldr	r3, [pc, #76]	; (800930c <__sinit+0x68>)
 80092c0:	4a13      	ldr	r2, [pc, #76]	; (8009310 <__sinit+0x6c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	bf04      	itt	eq
 80092ca:	2301      	moveq	r3, #1
 80092cc:	61a3      	streq	r3, [r4, #24]
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 f820 	bl	8009314 <__sfp>
 80092d4:	6060      	str	r0, [r4, #4]
 80092d6:	4620      	mov	r0, r4
 80092d8:	f000 f81c 	bl	8009314 <__sfp>
 80092dc:	60a0      	str	r0, [r4, #8]
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f818 	bl	8009314 <__sfp>
 80092e4:	2200      	movs	r2, #0
 80092e6:	60e0      	str	r0, [r4, #12]
 80092e8:	2104      	movs	r1, #4
 80092ea:	6860      	ldr	r0, [r4, #4]
 80092ec:	f7ff ff82 	bl	80091f4 <std>
 80092f0:	68a0      	ldr	r0, [r4, #8]
 80092f2:	2201      	movs	r2, #1
 80092f4:	2109      	movs	r1, #9
 80092f6:	f7ff ff7d 	bl	80091f4 <std>
 80092fa:	68e0      	ldr	r0, [r4, #12]
 80092fc:	2202      	movs	r2, #2
 80092fe:	2112      	movs	r1, #18
 8009300:	f7ff ff78 	bl	80091f4 <std>
 8009304:	2301      	movs	r3, #1
 8009306:	61a3      	str	r3, [r4, #24]
 8009308:	e7d2      	b.n	80092b0 <__sinit+0xc>
 800930a:	bf00      	nop
 800930c:	0800a408 	.word	0x0800a408
 8009310:	0800923d 	.word	0x0800923d

08009314 <__sfp>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	4607      	mov	r7, r0
 8009318:	f7ff ffac 	bl	8009274 <__sfp_lock_acquire>
 800931c:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <__sfp+0x84>)
 800931e:	681e      	ldr	r6, [r3, #0]
 8009320:	69b3      	ldr	r3, [r6, #24]
 8009322:	b913      	cbnz	r3, 800932a <__sfp+0x16>
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ffbd 	bl	80092a4 <__sinit>
 800932a:	3648      	adds	r6, #72	; 0x48
 800932c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009330:	3b01      	subs	r3, #1
 8009332:	d503      	bpl.n	800933c <__sfp+0x28>
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	b30b      	cbz	r3, 800937c <__sfp+0x68>
 8009338:	6836      	ldr	r6, [r6, #0]
 800933a:	e7f7      	b.n	800932c <__sfp+0x18>
 800933c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009340:	b9d5      	cbnz	r5, 8009378 <__sfp+0x64>
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <__sfp+0x88>)
 8009344:	60e3      	str	r3, [r4, #12]
 8009346:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800934a:	6665      	str	r5, [r4, #100]	; 0x64
 800934c:	f000 f847 	bl	80093de <__retarget_lock_init_recursive>
 8009350:	f7ff ff96 	bl	8009280 <__sfp_lock_release>
 8009354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800935c:	6025      	str	r5, [r4, #0]
 800935e:	61a5      	str	r5, [r4, #24]
 8009360:	2208      	movs	r2, #8
 8009362:	4629      	mov	r1, r5
 8009364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009368:	f7ff fd2c 	bl	8008dc4 <memset>
 800936c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009374:	4620      	mov	r0, r4
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	3468      	adds	r4, #104	; 0x68
 800937a:	e7d9      	b.n	8009330 <__sfp+0x1c>
 800937c:	2104      	movs	r1, #4
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff ff62 	bl	8009248 <__sfmoreglue>
 8009384:	4604      	mov	r4, r0
 8009386:	6030      	str	r0, [r6, #0]
 8009388:	2800      	cmp	r0, #0
 800938a:	d1d5      	bne.n	8009338 <__sfp+0x24>
 800938c:	f7ff ff78 	bl	8009280 <__sfp_lock_release>
 8009390:	230c      	movs	r3, #12
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	e7ee      	b.n	8009374 <__sfp+0x60>
 8009396:	bf00      	nop
 8009398:	0800a408 	.word	0x0800a408
 800939c:	ffff0001 	.word	0xffff0001

080093a0 <_fwalk_reent>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4606      	mov	r6, r0
 80093a6:	4688      	mov	r8, r1
 80093a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093ac:	2700      	movs	r7, #0
 80093ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093b2:	f1b9 0901 	subs.w	r9, r9, #1
 80093b6:	d505      	bpl.n	80093c4 <_fwalk_reent+0x24>
 80093b8:	6824      	ldr	r4, [r4, #0]
 80093ba:	2c00      	cmp	r4, #0
 80093bc:	d1f7      	bne.n	80093ae <_fwalk_reent+0xe>
 80093be:	4638      	mov	r0, r7
 80093c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c4:	89ab      	ldrh	r3, [r5, #12]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d907      	bls.n	80093da <_fwalk_reent+0x3a>
 80093ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ce:	3301      	adds	r3, #1
 80093d0:	d003      	beq.n	80093da <_fwalk_reent+0x3a>
 80093d2:	4629      	mov	r1, r5
 80093d4:	4630      	mov	r0, r6
 80093d6:	47c0      	blx	r8
 80093d8:	4307      	orrs	r7, r0
 80093da:	3568      	adds	r5, #104	; 0x68
 80093dc:	e7e9      	b.n	80093b2 <_fwalk_reent+0x12>

080093de <__retarget_lock_init_recursive>:
 80093de:	4770      	bx	lr

080093e0 <__retarget_lock_acquire_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <__retarget_lock_release_recursive>:
 80093e2:	4770      	bx	lr

080093e4 <__swhatbuf_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460e      	mov	r6, r1
 80093e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ec:	2900      	cmp	r1, #0
 80093ee:	b096      	sub	sp, #88	; 0x58
 80093f0:	4614      	mov	r4, r2
 80093f2:	461d      	mov	r5, r3
 80093f4:	da08      	bge.n	8009408 <__swhatbuf_r+0x24>
 80093f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	061a      	lsls	r2, r3, #24
 8009400:	d410      	bmi.n	8009424 <__swhatbuf_r+0x40>
 8009402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009406:	e00e      	b.n	8009426 <__swhatbuf_r+0x42>
 8009408:	466a      	mov	r2, sp
 800940a:	f000 fc95 	bl	8009d38 <_fstat_r>
 800940e:	2800      	cmp	r0, #0
 8009410:	dbf1      	blt.n	80093f6 <__swhatbuf_r+0x12>
 8009412:	9a01      	ldr	r2, [sp, #4]
 8009414:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009418:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800941c:	425a      	negs	r2, r3
 800941e:	415a      	adcs	r2, r3
 8009420:	602a      	str	r2, [r5, #0]
 8009422:	e7ee      	b.n	8009402 <__swhatbuf_r+0x1e>
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	2000      	movs	r0, #0
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	b016      	add	sp, #88	; 0x58
 800942c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009430 <__smakebuf_r>:
 8009430:	898b      	ldrh	r3, [r1, #12]
 8009432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009434:	079d      	lsls	r5, r3, #30
 8009436:	4606      	mov	r6, r0
 8009438:	460c      	mov	r4, r1
 800943a:	d507      	bpl.n	800944c <__smakebuf_r+0x1c>
 800943c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	2301      	movs	r3, #1
 8009446:	6163      	str	r3, [r4, #20]
 8009448:	b002      	add	sp, #8
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	ab01      	add	r3, sp, #4
 800944e:	466a      	mov	r2, sp
 8009450:	f7ff ffc8 	bl	80093e4 <__swhatbuf_r>
 8009454:	9900      	ldr	r1, [sp, #0]
 8009456:	4605      	mov	r5, r0
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f895 	bl	8009588 <_malloc_r>
 800945e:	b948      	cbnz	r0, 8009474 <__smakebuf_r+0x44>
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	059a      	lsls	r2, r3, #22
 8009466:	d4ef      	bmi.n	8009448 <__smakebuf_r+0x18>
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	f043 0302 	orr.w	r3, r3, #2
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	e7e3      	b.n	800943c <__smakebuf_r+0xc>
 8009474:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <__smakebuf_r+0x7c>)
 8009476:	62b3      	str	r3, [r6, #40]	; 0x28
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	6020      	str	r0, [r4, #0]
 800947c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009480:	81a3      	strh	r3, [r4, #12]
 8009482:	9b00      	ldr	r3, [sp, #0]
 8009484:	6163      	str	r3, [r4, #20]
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	6120      	str	r0, [r4, #16]
 800948a:	b15b      	cbz	r3, 80094a4 <__smakebuf_r+0x74>
 800948c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 fc63 	bl	8009d5c <_isatty_r>
 8009496:	b128      	cbz	r0, 80094a4 <__smakebuf_r+0x74>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	89a0      	ldrh	r0, [r4, #12]
 80094a6:	4305      	orrs	r5, r0
 80094a8:	81a5      	strh	r5, [r4, #12]
 80094aa:	e7cd      	b.n	8009448 <__smakebuf_r+0x18>
 80094ac:	0800923d 	.word	0x0800923d

080094b0 <_free_r>:
 80094b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d044      	beq.n	8009540 <_free_r+0x90>
 80094b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ba:	9001      	str	r0, [sp, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f1a1 0404 	sub.w	r4, r1, #4
 80094c2:	bfb8      	it	lt
 80094c4:	18e4      	addlt	r4, r4, r3
 80094c6:	f000 fc6b 	bl	8009da0 <__malloc_lock>
 80094ca:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <_free_r+0x94>)
 80094cc:	9801      	ldr	r0, [sp, #4]
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	b933      	cbnz	r3, 80094e0 <_free_r+0x30>
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	6014      	str	r4, [r2, #0]
 80094d6:	b003      	add	sp, #12
 80094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094dc:	f000 bc66 	b.w	8009dac <__malloc_unlock>
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	d908      	bls.n	80094f6 <_free_r+0x46>
 80094e4:	6825      	ldr	r5, [r4, #0]
 80094e6:	1961      	adds	r1, r4, r5
 80094e8:	428b      	cmp	r3, r1
 80094ea:	bf01      	itttt	eq
 80094ec:	6819      	ldreq	r1, [r3, #0]
 80094ee:	685b      	ldreq	r3, [r3, #4]
 80094f0:	1949      	addeq	r1, r1, r5
 80094f2:	6021      	streq	r1, [r4, #0]
 80094f4:	e7ed      	b.n	80094d2 <_free_r+0x22>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x50>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x46>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1855      	adds	r5, r2, r1
 8009504:	42a5      	cmp	r5, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x70>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	4421      	add	r1, r4
 800950c:	1854      	adds	r4, r2, r1
 800950e:	42a3      	cmp	r3, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1e0      	bne.n	80094d6 <_free_r+0x26>
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6053      	str	r3, [r2, #4]
 800951a:	4421      	add	r1, r4
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	e7da      	b.n	80094d6 <_free_r+0x26>
 8009520:	d902      	bls.n	8009528 <_free_r+0x78>
 8009522:	230c      	movs	r3, #12
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	e7d6      	b.n	80094d6 <_free_r+0x26>
 8009528:	6825      	ldr	r5, [r4, #0]
 800952a:	1961      	adds	r1, r4, r5
 800952c:	428b      	cmp	r3, r1
 800952e:	bf04      	itt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	bf04      	itt	eq
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	6054      	str	r4, [r2, #4]
 800953e:	e7ca      	b.n	80094d6 <_free_r+0x26>
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}
 8009544:	20000b38 	.word	0x20000b38

08009548 <sbrk_aligned>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4e0e      	ldr	r6, [pc, #56]	; (8009584 <sbrk_aligned+0x3c>)
 800954c:	460c      	mov	r4, r1
 800954e:	6831      	ldr	r1, [r6, #0]
 8009550:	4605      	mov	r5, r0
 8009552:	b911      	cbnz	r1, 800955a <sbrk_aligned+0x12>
 8009554:	f000 fb7a 	bl	8009c4c <_sbrk_r>
 8009558:	6030      	str	r0, [r6, #0]
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 fb75 	bl	8009c4c <_sbrk_r>
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	d00a      	beq.n	800957c <sbrk_aligned+0x34>
 8009566:	1cc4      	adds	r4, r0, #3
 8009568:	f024 0403 	bic.w	r4, r4, #3
 800956c:	42a0      	cmp	r0, r4
 800956e:	d007      	beq.n	8009580 <sbrk_aligned+0x38>
 8009570:	1a21      	subs	r1, r4, r0
 8009572:	4628      	mov	r0, r5
 8009574:	f000 fb6a 	bl	8009c4c <_sbrk_r>
 8009578:	3001      	adds	r0, #1
 800957a:	d101      	bne.n	8009580 <sbrk_aligned+0x38>
 800957c:	f04f 34ff 	mov.w	r4, #4294967295
 8009580:	4620      	mov	r0, r4
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	20000b3c 	.word	0x20000b3c

08009588 <_malloc_r>:
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	1ccd      	adds	r5, r1, #3
 800958e:	f025 0503 	bic.w	r5, r5, #3
 8009592:	3508      	adds	r5, #8
 8009594:	2d0c      	cmp	r5, #12
 8009596:	bf38      	it	cc
 8009598:	250c      	movcc	r5, #12
 800959a:	2d00      	cmp	r5, #0
 800959c:	4607      	mov	r7, r0
 800959e:	db01      	blt.n	80095a4 <_malloc_r+0x1c>
 80095a0:	42a9      	cmp	r1, r5
 80095a2:	d905      	bls.n	80095b0 <_malloc_r+0x28>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	2600      	movs	r6, #0
 80095aa:	4630      	mov	r0, r6
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	4e2e      	ldr	r6, [pc, #184]	; (800966c <_malloc_r+0xe4>)
 80095b2:	f000 fbf5 	bl	8009da0 <__malloc_lock>
 80095b6:	6833      	ldr	r3, [r6, #0]
 80095b8:	461c      	mov	r4, r3
 80095ba:	bb34      	cbnz	r4, 800960a <_malloc_r+0x82>
 80095bc:	4629      	mov	r1, r5
 80095be:	4638      	mov	r0, r7
 80095c0:	f7ff ffc2 	bl	8009548 <sbrk_aligned>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	4604      	mov	r4, r0
 80095c8:	d14d      	bne.n	8009666 <_malloc_r+0xde>
 80095ca:	6834      	ldr	r4, [r6, #0]
 80095cc:	4626      	mov	r6, r4
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	d140      	bne.n	8009654 <_malloc_r+0xcc>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	4631      	mov	r1, r6
 80095d6:	4638      	mov	r0, r7
 80095d8:	eb04 0803 	add.w	r8, r4, r3
 80095dc:	f000 fb36 	bl	8009c4c <_sbrk_r>
 80095e0:	4580      	cmp	r8, r0
 80095e2:	d13a      	bne.n	800965a <_malloc_r+0xd2>
 80095e4:	6821      	ldr	r1, [r4, #0]
 80095e6:	3503      	adds	r5, #3
 80095e8:	1a6d      	subs	r5, r5, r1
 80095ea:	f025 0503 	bic.w	r5, r5, #3
 80095ee:	3508      	adds	r5, #8
 80095f0:	2d0c      	cmp	r5, #12
 80095f2:	bf38      	it	cc
 80095f4:	250c      	movcc	r5, #12
 80095f6:	4629      	mov	r1, r5
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7ff ffa5 	bl	8009548 <sbrk_aligned>
 80095fe:	3001      	adds	r0, #1
 8009600:	d02b      	beq.n	800965a <_malloc_r+0xd2>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	442b      	add	r3, r5
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	e00e      	b.n	8009628 <_malloc_r+0xa0>
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	1b52      	subs	r2, r2, r5
 800960e:	d41e      	bmi.n	800964e <_malloc_r+0xc6>
 8009610:	2a0b      	cmp	r2, #11
 8009612:	d916      	bls.n	8009642 <_malloc_r+0xba>
 8009614:	1961      	adds	r1, r4, r5
 8009616:	42a3      	cmp	r3, r4
 8009618:	6025      	str	r5, [r4, #0]
 800961a:	bf18      	it	ne
 800961c:	6059      	strne	r1, [r3, #4]
 800961e:	6863      	ldr	r3, [r4, #4]
 8009620:	bf08      	it	eq
 8009622:	6031      	streq	r1, [r6, #0]
 8009624:	5162      	str	r2, [r4, r5]
 8009626:	604b      	str	r3, [r1, #4]
 8009628:	4638      	mov	r0, r7
 800962a:	f104 060b 	add.w	r6, r4, #11
 800962e:	f000 fbbd 	bl	8009dac <__malloc_unlock>
 8009632:	f026 0607 	bic.w	r6, r6, #7
 8009636:	1d23      	adds	r3, r4, #4
 8009638:	1af2      	subs	r2, r6, r3
 800963a:	d0b6      	beq.n	80095aa <_malloc_r+0x22>
 800963c:	1b9b      	subs	r3, r3, r6
 800963e:	50a3      	str	r3, [r4, r2]
 8009640:	e7b3      	b.n	80095aa <_malloc_r+0x22>
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	42a3      	cmp	r3, r4
 8009646:	bf0c      	ite	eq
 8009648:	6032      	streq	r2, [r6, #0]
 800964a:	605a      	strne	r2, [r3, #4]
 800964c:	e7ec      	b.n	8009628 <_malloc_r+0xa0>
 800964e:	4623      	mov	r3, r4
 8009650:	6864      	ldr	r4, [r4, #4]
 8009652:	e7b2      	b.n	80095ba <_malloc_r+0x32>
 8009654:	4634      	mov	r4, r6
 8009656:	6876      	ldr	r6, [r6, #4]
 8009658:	e7b9      	b.n	80095ce <_malloc_r+0x46>
 800965a:	230c      	movs	r3, #12
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4638      	mov	r0, r7
 8009660:	f000 fba4 	bl	8009dac <__malloc_unlock>
 8009664:	e7a1      	b.n	80095aa <_malloc_r+0x22>
 8009666:	6025      	str	r5, [r4, #0]
 8009668:	e7de      	b.n	8009628 <_malloc_r+0xa0>
 800966a:	bf00      	nop
 800966c:	20000b38 	.word	0x20000b38

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	3b01      	subs	r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	b410      	push	{r4}
 8009678:	6093      	str	r3, [r2, #8]
 800967a:	da08      	bge.n	800968e <__sfputc_r+0x1e>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db01      	blt.n	8009686 <__sfputc_r+0x16>
 8009682:	290a      	cmp	r1, #10
 8009684:	d103      	bne.n	800968e <__sfputc_r+0x1e>
 8009686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800968a:	f7ff bc31 	b.w	8008ef0 <__swbuf_r>
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	1c58      	adds	r0, r3, #1
 8009692:	6010      	str	r0, [r2, #0]
 8009694:	7019      	strb	r1, [r3, #0]
 8009696:	4608      	mov	r0, r1
 8009698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800969c:	4770      	bx	lr

0800969e <__sfputs_r>:
 800969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	18d5      	adds	r5, r2, r3
 80096a8:	42ac      	cmp	r4, r5
 80096aa:	d101      	bne.n	80096b0 <__sfputs_r+0x12>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e007      	b.n	80096c0 <__sfputs_r+0x22>
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	463a      	mov	r2, r7
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ffda 	bl	8009670 <__sfputc_r>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d1f3      	bne.n	80096a8 <__sfputs_r+0xa>
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c4 <_vfiprintf_r>:
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	460d      	mov	r5, r1
 80096ca:	b09d      	sub	sp, #116	; 0x74
 80096cc:	4614      	mov	r4, r2
 80096ce:	4698      	mov	r8, r3
 80096d0:	4606      	mov	r6, r0
 80096d2:	b118      	cbz	r0, 80096dc <_vfiprintf_r+0x18>
 80096d4:	6983      	ldr	r3, [r0, #24]
 80096d6:	b90b      	cbnz	r3, 80096dc <_vfiprintf_r+0x18>
 80096d8:	f7ff fde4 	bl	80092a4 <__sinit>
 80096dc:	4b89      	ldr	r3, [pc, #548]	; (8009904 <_vfiprintf_r+0x240>)
 80096de:	429d      	cmp	r5, r3
 80096e0:	d11b      	bne.n	800971a <_vfiprintf_r+0x56>
 80096e2:	6875      	ldr	r5, [r6, #4]
 80096e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e6:	07d9      	lsls	r1, r3, #31
 80096e8:	d405      	bmi.n	80096f6 <_vfiprintf_r+0x32>
 80096ea:	89ab      	ldrh	r3, [r5, #12]
 80096ec:	059a      	lsls	r2, r3, #22
 80096ee:	d402      	bmi.n	80096f6 <_vfiprintf_r+0x32>
 80096f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f2:	f7ff fe75 	bl	80093e0 <__retarget_lock_acquire_recursive>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	071b      	lsls	r3, r3, #28
 80096fa:	d501      	bpl.n	8009700 <_vfiprintf_r+0x3c>
 80096fc:	692b      	ldr	r3, [r5, #16]
 80096fe:	b9eb      	cbnz	r3, 800973c <_vfiprintf_r+0x78>
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff fc46 	bl	8008f94 <__swsetup_r>
 8009708:	b1c0      	cbz	r0, 800973c <_vfiprintf_r+0x78>
 800970a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800970c:	07dc      	lsls	r4, r3, #31
 800970e:	d50e      	bpl.n	800972e <_vfiprintf_r+0x6a>
 8009710:	f04f 30ff 	mov.w	r0, #4294967295
 8009714:	b01d      	add	sp, #116	; 0x74
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971a:	4b7b      	ldr	r3, [pc, #492]	; (8009908 <_vfiprintf_r+0x244>)
 800971c:	429d      	cmp	r5, r3
 800971e:	d101      	bne.n	8009724 <_vfiprintf_r+0x60>
 8009720:	68b5      	ldr	r5, [r6, #8]
 8009722:	e7df      	b.n	80096e4 <_vfiprintf_r+0x20>
 8009724:	4b79      	ldr	r3, [pc, #484]	; (800990c <_vfiprintf_r+0x248>)
 8009726:	429d      	cmp	r5, r3
 8009728:	bf08      	it	eq
 800972a:	68f5      	ldreq	r5, [r6, #12]
 800972c:	e7da      	b.n	80096e4 <_vfiprintf_r+0x20>
 800972e:	89ab      	ldrh	r3, [r5, #12]
 8009730:	0598      	lsls	r0, r3, #22
 8009732:	d4ed      	bmi.n	8009710 <_vfiprintf_r+0x4c>
 8009734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009736:	f7ff fe54 	bl	80093e2 <__retarget_lock_release_recursive>
 800973a:	e7e9      	b.n	8009710 <_vfiprintf_r+0x4c>
 800973c:	2300      	movs	r3, #0
 800973e:	9309      	str	r3, [sp, #36]	; 0x24
 8009740:	2320      	movs	r3, #32
 8009742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009746:	f8cd 800c 	str.w	r8, [sp, #12]
 800974a:	2330      	movs	r3, #48	; 0x30
 800974c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009910 <_vfiprintf_r+0x24c>
 8009750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009754:	f04f 0901 	mov.w	r9, #1
 8009758:	4623      	mov	r3, r4
 800975a:	469a      	mov	sl, r3
 800975c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009760:	b10a      	cbz	r2, 8009766 <_vfiprintf_r+0xa2>
 8009762:	2a25      	cmp	r2, #37	; 0x25
 8009764:	d1f9      	bne.n	800975a <_vfiprintf_r+0x96>
 8009766:	ebba 0b04 	subs.w	fp, sl, r4
 800976a:	d00b      	beq.n	8009784 <_vfiprintf_r+0xc0>
 800976c:	465b      	mov	r3, fp
 800976e:	4622      	mov	r2, r4
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff ff93 	bl	800969e <__sfputs_r>
 8009778:	3001      	adds	r0, #1
 800977a:	f000 80aa 	beq.w	80098d2 <_vfiprintf_r+0x20e>
 800977e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009780:	445a      	add	r2, fp
 8009782:	9209      	str	r2, [sp, #36]	; 0x24
 8009784:	f89a 3000 	ldrb.w	r3, [sl]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80a2 	beq.w	80098d2 <_vfiprintf_r+0x20e>
 800978e:	2300      	movs	r3, #0
 8009790:	f04f 32ff 	mov.w	r2, #4294967295
 8009794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009798:	f10a 0a01 	add.w	sl, sl, #1
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a4:	931a      	str	r3, [sp, #104]	; 0x68
 80097a6:	4654      	mov	r4, sl
 80097a8:	2205      	movs	r2, #5
 80097aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ae:	4858      	ldr	r0, [pc, #352]	; (8009910 <_vfiprintf_r+0x24c>)
 80097b0:	f7f6 fd16 	bl	80001e0 <memchr>
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	b9d8      	cbnz	r0, 80097f0 <_vfiprintf_r+0x12c>
 80097b8:	06d1      	lsls	r1, r2, #27
 80097ba:	bf44      	itt	mi
 80097bc:	2320      	movmi	r3, #32
 80097be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c2:	0713      	lsls	r3, r2, #28
 80097c4:	bf44      	itt	mi
 80097c6:	232b      	movmi	r3, #43	; 0x2b
 80097c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097cc:	f89a 3000 	ldrb.w	r3, [sl]
 80097d0:	2b2a      	cmp	r3, #42	; 0x2a
 80097d2:	d015      	beq.n	8009800 <_vfiprintf_r+0x13c>
 80097d4:	9a07      	ldr	r2, [sp, #28]
 80097d6:	4654      	mov	r4, sl
 80097d8:	2000      	movs	r0, #0
 80097da:	f04f 0c0a 	mov.w	ip, #10
 80097de:	4621      	mov	r1, r4
 80097e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e4:	3b30      	subs	r3, #48	; 0x30
 80097e6:	2b09      	cmp	r3, #9
 80097e8:	d94e      	bls.n	8009888 <_vfiprintf_r+0x1c4>
 80097ea:	b1b0      	cbz	r0, 800981a <_vfiprintf_r+0x156>
 80097ec:	9207      	str	r2, [sp, #28]
 80097ee:	e014      	b.n	800981a <_vfiprintf_r+0x156>
 80097f0:	eba0 0308 	sub.w	r3, r0, r8
 80097f4:	fa09 f303 	lsl.w	r3, r9, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	46a2      	mov	sl, r4
 80097fe:	e7d2      	b.n	80097a6 <_vfiprintf_r+0xe2>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	1d19      	adds	r1, r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	9103      	str	r1, [sp, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfbb      	ittet	lt
 800980c:	425b      	neglt	r3, r3
 800980e:	f042 0202 	orrlt.w	r2, r2, #2
 8009812:	9307      	strge	r3, [sp, #28]
 8009814:	9307      	strlt	r3, [sp, #28]
 8009816:	bfb8      	it	lt
 8009818:	9204      	strlt	r2, [sp, #16]
 800981a:	7823      	ldrb	r3, [r4, #0]
 800981c:	2b2e      	cmp	r3, #46	; 0x2e
 800981e:	d10c      	bne.n	800983a <_vfiprintf_r+0x176>
 8009820:	7863      	ldrb	r3, [r4, #1]
 8009822:	2b2a      	cmp	r3, #42	; 0x2a
 8009824:	d135      	bne.n	8009892 <_vfiprintf_r+0x1ce>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	9203      	str	r2, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	bfb8      	it	lt
 8009832:	f04f 33ff 	movlt.w	r3, #4294967295
 8009836:	3402      	adds	r4, #2
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009920 <_vfiprintf_r+0x25c>
 800983e:	7821      	ldrb	r1, [r4, #0]
 8009840:	2203      	movs	r2, #3
 8009842:	4650      	mov	r0, sl
 8009844:	f7f6 fccc 	bl	80001e0 <memchr>
 8009848:	b140      	cbz	r0, 800985c <_vfiprintf_r+0x198>
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	eba0 000a 	sub.w	r0, r0, sl
 8009850:	fa03 f000 	lsl.w	r0, r3, r0
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	4303      	orrs	r3, r0
 8009858:	3401      	adds	r4, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	482c      	ldr	r0, [pc, #176]	; (8009914 <_vfiprintf_r+0x250>)
 8009862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009866:	2206      	movs	r2, #6
 8009868:	f7f6 fcba 	bl	80001e0 <memchr>
 800986c:	2800      	cmp	r0, #0
 800986e:	d03f      	beq.n	80098f0 <_vfiprintf_r+0x22c>
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <_vfiprintf_r+0x254>)
 8009872:	bb1b      	cbnz	r3, 80098bc <_vfiprintf_r+0x1f8>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	3307      	adds	r3, #7
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	3308      	adds	r3, #8
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	443b      	add	r3, r7
 8009884:	9309      	str	r3, [sp, #36]	; 0x24
 8009886:	e767      	b.n	8009758 <_vfiprintf_r+0x94>
 8009888:	fb0c 3202 	mla	r2, ip, r2, r3
 800988c:	460c      	mov	r4, r1
 800988e:	2001      	movs	r0, #1
 8009890:	e7a5      	b.n	80097de <_vfiprintf_r+0x11a>
 8009892:	2300      	movs	r3, #0
 8009894:	3401      	adds	r4, #1
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	4619      	mov	r1, r3
 800989a:	f04f 0c0a 	mov.w	ip, #10
 800989e:	4620      	mov	r0, r4
 80098a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a4:	3a30      	subs	r2, #48	; 0x30
 80098a6:	2a09      	cmp	r2, #9
 80098a8:	d903      	bls.n	80098b2 <_vfiprintf_r+0x1ee>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c5      	beq.n	800983a <_vfiprintf_r+0x176>
 80098ae:	9105      	str	r1, [sp, #20]
 80098b0:	e7c3      	b.n	800983a <_vfiprintf_r+0x176>
 80098b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b6:	4604      	mov	r4, r0
 80098b8:	2301      	movs	r3, #1
 80098ba:	e7f0      	b.n	800989e <_vfiprintf_r+0x1da>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <_vfiprintf_r+0x258>)
 80098c4:	a904      	add	r1, sp, #16
 80098c6:	4630      	mov	r0, r6
 80098c8:	f3af 8000 	nop.w
 80098cc:	4607      	mov	r7, r0
 80098ce:	1c78      	adds	r0, r7, #1
 80098d0:	d1d6      	bne.n	8009880 <_vfiprintf_r+0x1bc>
 80098d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d4:	07d9      	lsls	r1, r3, #31
 80098d6:	d405      	bmi.n	80098e4 <_vfiprintf_r+0x220>
 80098d8:	89ab      	ldrh	r3, [r5, #12]
 80098da:	059a      	lsls	r2, r3, #22
 80098dc:	d402      	bmi.n	80098e4 <_vfiprintf_r+0x220>
 80098de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e0:	f7ff fd7f 	bl	80093e2 <__retarget_lock_release_recursive>
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	065b      	lsls	r3, r3, #25
 80098e8:	f53f af12 	bmi.w	8009710 <_vfiprintf_r+0x4c>
 80098ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ee:	e711      	b.n	8009714 <_vfiprintf_r+0x50>
 80098f0:	ab03      	add	r3, sp, #12
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	462a      	mov	r2, r5
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <_vfiprintf_r+0x258>)
 80098f8:	a904      	add	r1, sp, #16
 80098fa:	4630      	mov	r0, r6
 80098fc:	f000 f880 	bl	8009a00 <_printf_i>
 8009900:	e7e4      	b.n	80098cc <_vfiprintf_r+0x208>
 8009902:	bf00      	nop
 8009904:	0800a42c 	.word	0x0800a42c
 8009908:	0800a44c 	.word	0x0800a44c
 800990c:	0800a40c 	.word	0x0800a40c
 8009910:	0800a46c 	.word	0x0800a46c
 8009914:	0800a476 	.word	0x0800a476
 8009918:	00000000 	.word	0x00000000
 800991c:	0800969f 	.word	0x0800969f
 8009920:	0800a472 	.word	0x0800a472

08009924 <_printf_common>:
 8009924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009928:	4616      	mov	r6, r2
 800992a:	4699      	mov	r9, r3
 800992c:	688a      	ldr	r2, [r1, #8]
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009934:	4293      	cmp	r3, r2
 8009936:	bfb8      	it	lt
 8009938:	4613      	movlt	r3, r2
 800993a:	6033      	str	r3, [r6, #0]
 800993c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009940:	4607      	mov	r7, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b10a      	cbz	r2, 800994a <_printf_common+0x26>
 8009946:	3301      	adds	r3, #1
 8009948:	6033      	str	r3, [r6, #0]
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	0699      	lsls	r1, r3, #26
 800994e:	bf42      	ittt	mi
 8009950:	6833      	ldrmi	r3, [r6, #0]
 8009952:	3302      	addmi	r3, #2
 8009954:	6033      	strmi	r3, [r6, #0]
 8009956:	6825      	ldr	r5, [r4, #0]
 8009958:	f015 0506 	ands.w	r5, r5, #6
 800995c:	d106      	bne.n	800996c <_printf_common+0x48>
 800995e:	f104 0a19 	add.w	sl, r4, #25
 8009962:	68e3      	ldr	r3, [r4, #12]
 8009964:	6832      	ldr	r2, [r6, #0]
 8009966:	1a9b      	subs	r3, r3, r2
 8009968:	42ab      	cmp	r3, r5
 800996a:	dc26      	bgt.n	80099ba <_printf_common+0x96>
 800996c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009970:	1e13      	subs	r3, r2, #0
 8009972:	6822      	ldr	r2, [r4, #0]
 8009974:	bf18      	it	ne
 8009976:	2301      	movne	r3, #1
 8009978:	0692      	lsls	r2, r2, #26
 800997a:	d42b      	bmi.n	80099d4 <_printf_common+0xb0>
 800997c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009980:	4649      	mov	r1, r9
 8009982:	4638      	mov	r0, r7
 8009984:	47c0      	blx	r8
 8009986:	3001      	adds	r0, #1
 8009988:	d01e      	beq.n	80099c8 <_printf_common+0xa4>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	68e5      	ldr	r5, [r4, #12]
 800998e:	6832      	ldr	r2, [r6, #0]
 8009990:	f003 0306 	and.w	r3, r3, #6
 8009994:	2b04      	cmp	r3, #4
 8009996:	bf08      	it	eq
 8009998:	1aad      	subeq	r5, r5, r2
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	6922      	ldr	r2, [r4, #16]
 800999e:	bf0c      	ite	eq
 80099a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099a4:	2500      	movne	r5, #0
 80099a6:	4293      	cmp	r3, r2
 80099a8:	bfc4      	itt	gt
 80099aa:	1a9b      	subgt	r3, r3, r2
 80099ac:	18ed      	addgt	r5, r5, r3
 80099ae:	2600      	movs	r6, #0
 80099b0:	341a      	adds	r4, #26
 80099b2:	42b5      	cmp	r5, r6
 80099b4:	d11a      	bne.n	80099ec <_printf_common+0xc8>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e008      	b.n	80099cc <_printf_common+0xa8>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4652      	mov	r2, sl
 80099be:	4649      	mov	r1, r9
 80099c0:	4638      	mov	r0, r7
 80099c2:	47c0      	blx	r8
 80099c4:	3001      	adds	r0, #1
 80099c6:	d103      	bne.n	80099d0 <_printf_common+0xac>
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d0:	3501      	adds	r5, #1
 80099d2:	e7c6      	b.n	8009962 <_printf_common+0x3e>
 80099d4:	18e1      	adds	r1, r4, r3
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	2030      	movs	r0, #48	; 0x30
 80099da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099de:	4422      	add	r2, r4
 80099e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099e8:	3302      	adds	r3, #2
 80099ea:	e7c7      	b.n	800997c <_printf_common+0x58>
 80099ec:	2301      	movs	r3, #1
 80099ee:	4622      	mov	r2, r4
 80099f0:	4649      	mov	r1, r9
 80099f2:	4638      	mov	r0, r7
 80099f4:	47c0      	blx	r8
 80099f6:	3001      	adds	r0, #1
 80099f8:	d0e6      	beq.n	80099c8 <_printf_common+0xa4>
 80099fa:	3601      	adds	r6, #1
 80099fc:	e7d9      	b.n	80099b2 <_printf_common+0x8e>
	...

08009a00 <_printf_i>:
 8009a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a04:	7e0f      	ldrb	r7, [r1, #24]
 8009a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a08:	2f78      	cmp	r7, #120	; 0x78
 8009a0a:	4691      	mov	r9, r2
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	469a      	mov	sl, r3
 8009a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a16:	d807      	bhi.n	8009a28 <_printf_i+0x28>
 8009a18:	2f62      	cmp	r7, #98	; 0x62
 8009a1a:	d80a      	bhi.n	8009a32 <_printf_i+0x32>
 8009a1c:	2f00      	cmp	r7, #0
 8009a1e:	f000 80d8 	beq.w	8009bd2 <_printf_i+0x1d2>
 8009a22:	2f58      	cmp	r7, #88	; 0x58
 8009a24:	f000 80a3 	beq.w	8009b6e <_printf_i+0x16e>
 8009a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a30:	e03a      	b.n	8009aa8 <_printf_i+0xa8>
 8009a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a36:	2b15      	cmp	r3, #21
 8009a38:	d8f6      	bhi.n	8009a28 <_printf_i+0x28>
 8009a3a:	a101      	add	r1, pc, #4	; (adr r1, 8009a40 <_printf_i+0x40>)
 8009a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a40:	08009a99 	.word	0x08009a99
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009a29 	.word	0x08009a29
 8009a4c:	08009a29 	.word	0x08009a29
 8009a50:	08009a29 	.word	0x08009a29
 8009a54:	08009a29 	.word	0x08009a29
 8009a58:	08009aad 	.word	0x08009aad
 8009a5c:	08009a29 	.word	0x08009a29
 8009a60:	08009a29 	.word	0x08009a29
 8009a64:	08009a29 	.word	0x08009a29
 8009a68:	08009a29 	.word	0x08009a29
 8009a6c:	08009bb9 	.word	0x08009bb9
 8009a70:	08009add 	.word	0x08009add
 8009a74:	08009b9b 	.word	0x08009b9b
 8009a78:	08009a29 	.word	0x08009a29
 8009a7c:	08009a29 	.word	0x08009a29
 8009a80:	08009bdb 	.word	0x08009bdb
 8009a84:	08009a29 	.word	0x08009a29
 8009a88:	08009add 	.word	0x08009add
 8009a8c:	08009a29 	.word	0x08009a29
 8009a90:	08009a29 	.word	0x08009a29
 8009a94:	08009ba3 	.word	0x08009ba3
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	602a      	str	r2, [r5, #0]
 8009aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e0a3      	b.n	8009bf4 <_printf_i+0x1f4>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	6829      	ldr	r1, [r5, #0]
 8009ab0:	0606      	lsls	r6, r0, #24
 8009ab2:	f101 0304 	add.w	r3, r1, #4
 8009ab6:	d50a      	bpl.n	8009ace <_printf_i+0xce>
 8009ab8:	680e      	ldr	r6, [r1, #0]
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	da03      	bge.n	8009ac8 <_printf_i+0xc8>
 8009ac0:	232d      	movs	r3, #45	; 0x2d
 8009ac2:	4276      	negs	r6, r6
 8009ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ac8:	485e      	ldr	r0, [pc, #376]	; (8009c44 <_printf_i+0x244>)
 8009aca:	230a      	movs	r3, #10
 8009acc:	e019      	b.n	8009b02 <_printf_i+0x102>
 8009ace:	680e      	ldr	r6, [r1, #0]
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ad6:	bf18      	it	ne
 8009ad8:	b236      	sxthne	r6, r6
 8009ada:	e7ef      	b.n	8009abc <_printf_i+0xbc>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	6820      	ldr	r0, [r4, #0]
 8009ae0:	1d19      	adds	r1, r3, #4
 8009ae2:	6029      	str	r1, [r5, #0]
 8009ae4:	0601      	lsls	r1, r0, #24
 8009ae6:	d501      	bpl.n	8009aec <_printf_i+0xec>
 8009ae8:	681e      	ldr	r6, [r3, #0]
 8009aea:	e002      	b.n	8009af2 <_printf_i+0xf2>
 8009aec:	0646      	lsls	r6, r0, #25
 8009aee:	d5fb      	bpl.n	8009ae8 <_printf_i+0xe8>
 8009af0:	881e      	ldrh	r6, [r3, #0]
 8009af2:	4854      	ldr	r0, [pc, #336]	; (8009c44 <_printf_i+0x244>)
 8009af4:	2f6f      	cmp	r7, #111	; 0x6f
 8009af6:	bf0c      	ite	eq
 8009af8:	2308      	moveq	r3, #8
 8009afa:	230a      	movne	r3, #10
 8009afc:	2100      	movs	r1, #0
 8009afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b02:	6865      	ldr	r5, [r4, #4]
 8009b04:	60a5      	str	r5, [r4, #8]
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	bfa2      	ittt	ge
 8009b0a:	6821      	ldrge	r1, [r4, #0]
 8009b0c:	f021 0104 	bicge.w	r1, r1, #4
 8009b10:	6021      	strge	r1, [r4, #0]
 8009b12:	b90e      	cbnz	r6, 8009b18 <_printf_i+0x118>
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	d04d      	beq.n	8009bb4 <_printf_i+0x1b4>
 8009b18:	4615      	mov	r5, r2
 8009b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b22:	5dc7      	ldrb	r7, [r0, r7]
 8009b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b28:	4637      	mov	r7, r6
 8009b2a:	42bb      	cmp	r3, r7
 8009b2c:	460e      	mov	r6, r1
 8009b2e:	d9f4      	bls.n	8009b1a <_printf_i+0x11a>
 8009b30:	2b08      	cmp	r3, #8
 8009b32:	d10b      	bne.n	8009b4c <_printf_i+0x14c>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	07de      	lsls	r6, r3, #31
 8009b38:	d508      	bpl.n	8009b4c <_printf_i+0x14c>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	6861      	ldr	r1, [r4, #4]
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	bfde      	ittt	le
 8009b42:	2330      	movle	r3, #48	; 0x30
 8009b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b4c:	1b52      	subs	r2, r2, r5
 8009b4e:	6122      	str	r2, [r4, #16]
 8009b50:	f8cd a000 	str.w	sl, [sp]
 8009b54:	464b      	mov	r3, r9
 8009b56:	aa03      	add	r2, sp, #12
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7ff fee2 	bl	8009924 <_printf_common>
 8009b60:	3001      	adds	r0, #1
 8009b62:	d14c      	bne.n	8009bfe <_printf_i+0x1fe>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	b004      	add	sp, #16
 8009b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6e:	4835      	ldr	r0, [pc, #212]	; (8009c44 <_printf_i+0x244>)
 8009b70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b74:	6829      	ldr	r1, [r5, #0]
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b7c:	6029      	str	r1, [r5, #0]
 8009b7e:	061d      	lsls	r5, r3, #24
 8009b80:	d514      	bpl.n	8009bac <_printf_i+0x1ac>
 8009b82:	07df      	lsls	r7, r3, #31
 8009b84:	bf44      	itt	mi
 8009b86:	f043 0320 	orrmi.w	r3, r3, #32
 8009b8a:	6023      	strmi	r3, [r4, #0]
 8009b8c:	b91e      	cbnz	r6, 8009b96 <_printf_i+0x196>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f023 0320 	bic.w	r3, r3, #32
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	2310      	movs	r3, #16
 8009b98:	e7b0      	b.n	8009afc <_printf_i+0xfc>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	f043 0320 	orr.w	r3, r3, #32
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	2378      	movs	r3, #120	; 0x78
 8009ba4:	4828      	ldr	r0, [pc, #160]	; (8009c48 <_printf_i+0x248>)
 8009ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009baa:	e7e3      	b.n	8009b74 <_printf_i+0x174>
 8009bac:	0659      	lsls	r1, r3, #25
 8009bae:	bf48      	it	mi
 8009bb0:	b2b6      	uxthmi	r6, r6
 8009bb2:	e7e6      	b.n	8009b82 <_printf_i+0x182>
 8009bb4:	4615      	mov	r5, r2
 8009bb6:	e7bb      	b.n	8009b30 <_printf_i+0x130>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	6826      	ldr	r6, [r4, #0]
 8009bbc:	6961      	ldr	r1, [r4, #20]
 8009bbe:	1d18      	adds	r0, r3, #4
 8009bc0:	6028      	str	r0, [r5, #0]
 8009bc2:	0635      	lsls	r5, r6, #24
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0x1cc>
 8009bc8:	6019      	str	r1, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <_printf_i+0x1d2>
 8009bcc:	0670      	lsls	r0, r6, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0x1c8>
 8009bd0:	8019      	strh	r1, [r3, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6123      	str	r3, [r4, #16]
 8009bd6:	4615      	mov	r5, r2
 8009bd8:	e7ba      	b.n	8009b50 <_printf_i+0x150>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	1d1a      	adds	r2, r3, #4
 8009bde:	602a      	str	r2, [r5, #0]
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	6862      	ldr	r2, [r4, #4]
 8009be4:	2100      	movs	r1, #0
 8009be6:	4628      	mov	r0, r5
 8009be8:	f7f6 fafa 	bl	80001e0 <memchr>
 8009bec:	b108      	cbz	r0, 8009bf2 <_printf_i+0x1f2>
 8009bee:	1b40      	subs	r0, r0, r5
 8009bf0:	6060      	str	r0, [r4, #4]
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	6123      	str	r3, [r4, #16]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bfc:	e7a8      	b.n	8009b50 <_printf_i+0x150>
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	462a      	mov	r2, r5
 8009c02:	4649      	mov	r1, r9
 8009c04:	4640      	mov	r0, r8
 8009c06:	47d0      	blx	sl
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d0ab      	beq.n	8009b64 <_printf_i+0x164>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	079b      	lsls	r3, r3, #30
 8009c10:	d413      	bmi.n	8009c3a <_printf_i+0x23a>
 8009c12:	68e0      	ldr	r0, [r4, #12]
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	4298      	cmp	r0, r3
 8009c18:	bfb8      	it	lt
 8009c1a:	4618      	movlt	r0, r3
 8009c1c:	e7a4      	b.n	8009b68 <_printf_i+0x168>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4632      	mov	r2, r6
 8009c22:	4649      	mov	r1, r9
 8009c24:	4640      	mov	r0, r8
 8009c26:	47d0      	blx	sl
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d09b      	beq.n	8009b64 <_printf_i+0x164>
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	68e3      	ldr	r3, [r4, #12]
 8009c30:	9903      	ldr	r1, [sp, #12]
 8009c32:	1a5b      	subs	r3, r3, r1
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	dcf2      	bgt.n	8009c1e <_printf_i+0x21e>
 8009c38:	e7eb      	b.n	8009c12 <_printf_i+0x212>
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	f104 0619 	add.w	r6, r4, #25
 8009c40:	e7f5      	b.n	8009c2e <_printf_i+0x22e>
 8009c42:	bf00      	nop
 8009c44:	0800a47d 	.word	0x0800a47d
 8009c48:	0800a48e 	.word	0x0800a48e

08009c4c <_sbrk_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d06      	ldr	r5, [pc, #24]	; (8009c68 <_sbrk_r+0x1c>)
 8009c50:	2300      	movs	r3, #0
 8009c52:	4604      	mov	r4, r0
 8009c54:	4608      	mov	r0, r1
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	f7f8 fb48 	bl	80022ec <_sbrk>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_sbrk_r+0x1a>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_sbrk_r+0x1a>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20000b40 	.word	0x20000b40

08009c6c <__sread>:
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	460c      	mov	r4, r1
 8009c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c74:	f000 f8a0 	bl	8009db8 <_read_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	bfab      	itete	ge
 8009c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c80:	181b      	addge	r3, r3, r0
 8009c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c86:	bfac      	ite	ge
 8009c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c8a:	81a3      	strhlt	r3, [r4, #12]
 8009c8c:	bd10      	pop	{r4, pc}

08009c8e <__swrite>:
 8009c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	461f      	mov	r7, r3
 8009c94:	898b      	ldrh	r3, [r1, #12]
 8009c96:	05db      	lsls	r3, r3, #23
 8009c98:	4605      	mov	r5, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4616      	mov	r6, r2
 8009c9e:	d505      	bpl.n	8009cac <__swrite+0x1e>
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f000 f868 	bl	8009d7c <_lseek_r>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	f000 b817 	b.w	8009cf4 <_write_r>

08009cc6 <__sseek>:
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cce:	f000 f855 	bl	8009d7c <_lseek_r>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	bf15      	itete	ne
 8009cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ce2:	81a3      	strheq	r3, [r4, #12]
 8009ce4:	bf18      	it	ne
 8009ce6:	81a3      	strhne	r3, [r4, #12]
 8009ce8:	bd10      	pop	{r4, pc}

08009cea <__sclose>:
 8009cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cee:	f000 b813 	b.w	8009d18 <_close_r>
	...

08009cf4 <_write_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d07      	ldr	r5, [pc, #28]	; (8009d14 <_write_r+0x20>)
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	4608      	mov	r0, r1
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	602a      	str	r2, [r5, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f7f8 faa1 	bl	800224a <_write>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_write_r+0x1e>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_write_r+0x1e>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000b40 	.word	0x20000b40

08009d18 <_close_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	; (8009d34 <_close_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f8 faad 	bl	8002282 <_close>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_close_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_close_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20000b40 	.word	0x20000b40

08009d38 <_fstat_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	; (8009d58 <_fstat_r+0x20>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	4611      	mov	r1, r2
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	f7f8 faa8 	bl	800229a <_fstat>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	d102      	bne.n	8009d54 <_fstat_r+0x1c>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	b103      	cbz	r3, 8009d54 <_fstat_r+0x1c>
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	bd38      	pop	{r3, r4, r5, pc}
 8009d56:	bf00      	nop
 8009d58:	20000b40 	.word	0x20000b40

08009d5c <_isatty_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_isatty_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 faa7 	bl	80022ba <_isatty>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_isatty_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_isatty_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20000b40 	.word	0x20000b40

08009d7c <_lseek_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d07      	ldr	r5, [pc, #28]	; (8009d9c <_lseek_r+0x20>)
 8009d80:	4604      	mov	r4, r0
 8009d82:	4608      	mov	r0, r1
 8009d84:	4611      	mov	r1, r2
 8009d86:	2200      	movs	r2, #0
 8009d88:	602a      	str	r2, [r5, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f7f8 faa0 	bl	80022d0 <_lseek>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_lseek_r+0x1e>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_lseek_r+0x1e>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	20000b40 	.word	0x20000b40

08009da0 <__malloc_lock>:
 8009da0:	4801      	ldr	r0, [pc, #4]	; (8009da8 <__malloc_lock+0x8>)
 8009da2:	f7ff bb1d 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 8009da6:	bf00      	nop
 8009da8:	20000b34 	.word	0x20000b34

08009dac <__malloc_unlock>:
 8009dac:	4801      	ldr	r0, [pc, #4]	; (8009db4 <__malloc_unlock+0x8>)
 8009dae:	f7ff bb18 	b.w	80093e2 <__retarget_lock_release_recursive>
 8009db2:	bf00      	nop
 8009db4:	20000b34 	.word	0x20000b34

08009db8 <_read_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	; (8009dd8 <_read_r+0x20>)
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f7f8 fa22 	bl	8002210 <_read>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_read_r+0x1e>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_read_r+0x1e>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	20000b40 	.word	0x20000b40

08009ddc <_init>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr

08009de8 <_fini>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	bf00      	nop
 8009dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dee:	bc08      	pop	{r3}
 8009df0:	469e      	mov	lr, r3
 8009df2:	4770      	bx	lr
